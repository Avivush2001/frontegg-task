import { IAddUser, IChangePassword, ILoadUsers, IResendActivationLink, ITeamUserRole, ITeamStats, ITeamUser, IUpdateProfile, IUpdateUser, IDeleteUser, ITeamUserPermission, IResendInvitationLink, IInviteUserLinkResponse, ICreateOrUpdateInviteUserLink, IInviteLinkConfiguration, IUpdateUserExpiration, ITemporaryUserConfiguration } from './interfaces';
import { PaginationResult } from '../interfaces';
import { IUserProfile } from '../users/interfaces';
import { BaseApiClient } from '../BaseApiClient';
export declare class TeamsApi extends BaseApiClient {
    constructor(appName: string);
    getProfile: (params?: object) => Promise<IUserProfile>;
    updateEmail: (email: string) => Promise<void>;
    verifyEmail: (email: string, code: string) => Promise<void>;
    updateProfile: (body: Partial<IUpdateProfile>) => Promise<IUserProfile>;
    updateProfileImage: (body: FormData) => Promise<string>;
    /**
     * change user password by providing current password and the new password.
     *
     * @throws exception if the current password incorrect or new password validation failed.
     * ``authorized user``
     */
    changePassword: (body: IChangePassword) => Promise<void>;
    loadUsers: (params: ILoadUsers) => Promise<PaginationResult<ITeamUser>>;
    addUser: (body: IAddUser) => Promise<ITeamUser>;
    deleteUser: (body: IDeleteUser) => Promise<ITeamUser>;
    updateUser: (body: IUpdateUser) => Promise<ITeamUser>;
    updateUserExpirationTime: (body: IUpdateUserExpiration) => Promise<void>;
    setPermanentUser: (userId: string) => Promise<void>;
    getTemporaryUserConfiguration: () => Promise<ITemporaryUserConfiguration>;
    createInviteUserLink: (body: ICreateOrUpdateInviteUserLink) => Promise<IInviteUserLinkResponse>;
    updateInviteUserLink: (body: ICreateOrUpdateInviteUserLink) => Promise<IInviteUserLinkResponse>;
    deleteInviteUserLink: () => Promise<void>;
    getInviteUserLink: () => Promise<IInviteUserLinkResponse>;
    getInviteLinkConfiguration: () => Promise<IInviteLinkConfiguration>;
    loadAvailableRoles: () => Promise<ITeamUserRole[]>;
    loadAvailablePermissions: () => Promise<ITeamUserPermission[]>;
    loadStats: () => Promise<ITeamStats>;
    resendActivationLink: (body: IResendActivationLink) => Promise<void>;
    resendInvitationLink: (body: IResendInvitationLink) => Promise<void>;
    resendInvitationLinkToAllTenants: (body: IResendInvitationLink) => Promise<void>;
    disableUser: (userId: string) => Promise<void>;
    enableUser: (userId: string) => Promise<void>;
}
declare const _default: TeamsApi;
export default _default;
