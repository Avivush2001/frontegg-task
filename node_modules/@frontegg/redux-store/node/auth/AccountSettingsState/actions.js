"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _state = require("./state");
var _helpers = require("../../helpers");
const _excluded = ["activeTenant", "tenants"];
var _default = (store, api, sharedActions) => {
  const actions = sharedActions;
  const setAccountSettingsState = state => {
    Object.assign(store.auth.accountSettingsState, state);
  };
  const resetAccountSettingsState = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'accountSettingsState'], _state.initialState);
  };
  const updateTenantState = ({
    newSettingValues
  }) => {
    const _store$auth$tenantsSt = store.auth.tenantsState,
      {
        activeTenant,
        tenants
      } = _store$auth$tenantsSt,
      rest = (0, _objectWithoutPropertiesLoose2.default)(_store$auth$tenantsSt, _excluded);
    const updatedTenants = tenants.map(tenant => tenant.id !== (activeTenant == null ? void 0 : activeTenant.id) ? tenant : (0, _extends2.default)({}, tenant, newSettingValues));
    const updatedActiveTenant = (0, _extends2.default)({}, activeTenant, newSettingValues);
    sharedActions.setTenantsState((0, _extends2.default)({}, rest, {
      tenants: updatedTenants,
      activeTenant: updatedActiveTenant
    }));
  };
  const saveAccountSettings = async payload => {
    try {
      var _payload$callback;
      setAccountSettingsState({
        loading: true
      });
      const {
        address,
        timezone,
        dateFormat,
        timeFormat,
        currency,
        logo
      } = store.auth.accountSettingsState;
      const body = await api.accountSettings.updateSettings((0, _extends2.default)({
        address,
        timezone,
        dateFormat,
        timeFormat,
        currency,
        logo
      }, payload));
      updateTenantState({
        newSettingValues: body
      });
      setAccountSettingsState((0, _extends2.default)({}, body, {
        loading: false
      }));
      (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, body);
    } catch (e) {
      var _payload$callback2;
      setAccountSettingsState({
        loading: false,
        error: (0, _helpers.errorHandler)(e)
      });
      (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, null, e);
    }
  };
  const loadAccountSettings = async payload => {
    setAccountSettingsState({
      loading: !(payload != null && payload.silentLoading),
      error: null
    });
    try {
      const body = await (0, _helpers.retryIfNeeded)(() => api.accountSettings.getSettings(), payload == null ? void 0 : payload.retryConfig);
      setAccountSettingsState((0, _extends2.default)({}, body, {
        loading: false
      }));
    } catch (e) {
      setAccountSettingsState({
        loading: false,
        error: (0, _helpers.errorHandler)(e)
      });
    }
  };
  return {
    setAccountSettingsState,
    resetAccountSettingsState,
    saveAccountSettings,
    loadAccountSettings
  };
};
exports.default = _default;