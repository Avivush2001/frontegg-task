import { FronteggState, RestApi, SharedActions, WithCallback, WithRetryConfig } from '../../interfaces';
import { IDisableMFAWebAuthnPayload, IUserEnrollMFASMSPayload, IUserEnrollMFAWebAuthnPayload, IUserPreEnrollMFASMSPayload, MFAState } from './interfaces';
import type { IDisableMfa, IDisableMFASMS, ILoginWithMfa, IVerifyMfa, IVerifyMfaResponse } from '@frontegg/rest-api';
import { IPreEnrollMFAWebAuthNForLoginResponse, IPreVerifyMFAWebAuthNForLoginResponse, WithDeviceId } from '../LoginState/interfaces';
declare const _default: (store: FronteggState, api: RestApi, sharedActions: SharedActions) => {
    setMfaState: (state: Partial<MFAState>) => void;
    resetMfaState: () => void;
    getMFADevices: () => Promise<void>;
    getMFAStrategies: (payload?: WithRetryConfig<{}>) => Promise<void>;
    enrollMfa: () => Promise<void>;
    verifyMfa: (_payload: WithCallback<IVerifyMfa, string | undefined>) => Promise<void>;
    verifyMfaAfterForce: (_payload: WithCallback<ILoginWithMfa, string | undefined>) => Promise<void>;
    disableMfa: (payload: WithCallback<IDisableMfa>) => Promise<void>;
    preDisableMfaSms: (_payload: WithCallback<WithDeviceId<{}>>) => Promise<void>;
    disableMfaSms: (_payload: WithCallback<WithDeviceId<IDisableMFASMS>>) => Promise<void>;
    preEnrollMfaSms: (payload: IUserPreEnrollMFASMSPayload) => Promise<void>;
    enrollMfaSms: (_payload: IUserEnrollMFASMSPayload) => Promise<void>;
    preEnrollMfaWebAuthn: (payload: WithCallback<{}, IPreEnrollMFAWebAuthNForLoginResponse>) => Promise<void>;
    enrollMfaWebAuthn: (_payload: IUserEnrollMFAWebAuthnPayload) => Promise<void>;
    preDisableMfaWebAuthn: (_payload: WithCallback<WithDeviceId<{}>, IPreVerifyMFAWebAuthNForLoginResponse>) => Promise<void>;
    disableMfaWebAuthn: (_payload: IDisableMFAWebAuthnPayload) => Promise<void>;
    __getMfaStateAfterEnroll: (res: IVerifyMfaResponse) => Promise<MFAState>;
};
export default _default;
