"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  SubscriptionsApi: true
};
exports.default = exports.SubscriptionsApi = void 0;
var _BaseApiClient = require("../BaseApiClient");
var _invoices = require("./invoices");
var _managedSubscriptions = require("./managedSubscriptions");
var _paymentMethods = require("./paymentMethods");
var _paymentProviders = require("./paymentProviders");
var _plans = require("./plans");
var _subscriptions = require("./subscriptions");
var _summaries = require("./summaries");
var _tenantConfiguration = require("./tenantConfiguration");
var _vendorPublicConfigurations = require("./vendorPublicConfigurations");
var _stripe = require("./providers/stripe");
var _interfaces = require("./interfaces");
Object.keys(_interfaces).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _interfaces[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _interfaces[key];
    }
  });
});
var _enums = require("./enums");
Object.keys(_enums).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _enums[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _enums[key];
    }
  });
});
class SubscriptionsApi extends _BaseApiClient.BaseApiClient {
  constructor(appName) {
    super(appName);
    this.invoicesApi = new _invoices.InvoicesApi(this.appName);
    this.managedSubscriptionApi = new _managedSubscriptions.ManagedSubscriptionApi(this.appName);
    this.paymentMethodsApi = new _paymentMethods.PaymentMethodsApi(this.appName);
    this.paymentProvidersApi = new _paymentProviders.PaymentProvidersApi(this.appName);
    this.plansApi = new _plans.PlansApi(this.appName);
    this.subscriptionApi = new _subscriptions.SubscriptionApi(this.appName);
    this.summariesApi = new _summaries.SummariesApi(this.appName);
    this.subscriptionTenantConfigApi = new _tenantConfiguration.SubscriptionTenantConfigApi(this.appName);
    this.vendorPublicConfigApi = new _vendorPublicConfigurations.VendorPublicConfigApi(this.appName);
    this.stripeProviderApi = new _stripe.StripeProviderApi(this.appName);
    this.getSubscriptionInvoices = this.invoicesApi.getSubscriptionInvoices.bind(this.invoicesApi);
    this.getSubscriptionInvoice = this.invoicesApi.getSubscriptionInvoice.bind(this.invoicesApi);
    this.getSubscriptionInvoicePdf = this.invoicesApi.getSubscriptionInvoicePdf.bind(this.invoicesApi);
    this.getManagedSubscription = this.managedSubscriptionApi.getManagedSubscription.bind(this.managedSubscriptionApi);
    this.getManagedSubscriptions = this.managedSubscriptionApi.getManagedSubscriptions.bind(this.managedSubscriptionApi);
    this.cancelManagedSubscription = this.managedSubscriptionApi.cancelManagedSubscription.bind(this.managedSubscriptionApi);
    this.renewManagedSubscription = this.managedSubscriptionApi.renewManagedSubscription.bind(this.managedSubscriptionApi);
    this.updateManagedSubscription = this.managedSubscriptionApi.updateManagedSubscription.bind(this.managedSubscriptionApi);
    this.getPaymentMethods = this.paymentMethodsApi.getPaymentMethods.bind(this.paymentMethodsApi);
    this.getPaymentMethod = this.paymentMethodsApi.getPaymentMethod.bind(this.paymentMethodsApi);
    this.updatePaymentMethodBillingDetails = this.paymentMethodsApi.updatePaymentMethodBillingDetails.bind(this.paymentMethodsApi);
    this.getPaymentProviders = this.paymentProvidersApi.getPaymentProviders.bind(this.paymentProvidersApi);
    this.getSubscriptionPlans = this.plansApi.getSubscriptionPlans.bind(this.plansApi);
    this.getSubscriptionPlan = this.plansApi.getSubscriptionPlan.bind(this.plansApi);
    this.getSubscriptions = this.subscriptionApi.getSubscriptions.bind(this.subscriptionApi);
    this.getSubscription = this.subscriptionApi.getSubscription.bind(this.subscriptionApi);
    this.cancelSubscription = this.subscriptionApi.cancelSubscription.bind(this.subscriptionApi);
    this.renewSubscription = this.subscriptionApi.renewSubscription.bind(this.subscriptionApi);
    this.updateSubscription = this.subscriptionApi.updateSubscription.bind(this.subscriptionApi);
    this.getSubscriptionSummaries = this.summariesApi.getSubscriptionSummaries.bind(this.summariesApi);
    this.getTenantConfiguration = this.subscriptionTenantConfigApi.getTenantConfiguration.bind(this.subscriptionTenantConfigApi);
    this.createTenantConfiguration = this.subscriptionTenantConfigApi.createTenantConfiguration.bind(this.subscriptionTenantConfigApi);
    this.getVendorPublicConfigurations = this.vendorPublicConfigApi.getVendorPublicConfigurations.bind(this.vendorPublicConfigApi);
    this.createSubscription = this.stripeProviderApi.createSubscription.bind(this.stripeProviderApi);
    this.getStripeCustomer = this.stripeProviderApi.getStripeCustomer.bind(this.stripeProviderApi);
    this.createStripeCustomer = this.stripeProviderApi.createStripeCustomer.bind(this.stripeProviderApi);
    this.getStripePaymentProviderConfiguration = this.stripeProviderApi.getStripePaymentProviderConfiguration.bind(this.stripeProviderApi);
    this.createStripePaymentMethodSetupIntentSecret = this.stripeProviderApi.createStripePaymentMethodSetupIntentSecret.bind(this.stripeProviderApi);
  }
}
exports.SubscriptionsApi = SubscriptionsApi;
var _default = new SubscriptionsApi('default');
exports.default = _default;