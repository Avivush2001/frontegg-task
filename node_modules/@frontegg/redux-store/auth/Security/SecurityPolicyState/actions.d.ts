import { IAuthStrategiesConfig, IVendorConfig, TestConfig } from '@frontegg/rest-api';
import { FronteggState, RestApi, RetryConfig, SharedActions, WithCallback, WithRetryConfig } from '../../../interfaces';
import { CaptchaPolicyState, GlobalPolicyState, LockoutPolicyState, MfaPolicyState, PasswordHistoryPolicyState, PasswordPolicyState, PasswordRotationPolicyState, PublicAuthStrategyPolicyState, PublicPolicyState, SaveSecurityPolicyLockoutPayload, SaveSecurityPolicyMfaPayload, SaveSecurityPolicyPasswordHistoryPayload, SaveSecurityPolicyPasswordRotationPayload, SecurityPolicyState } from './interfaces';
declare const _default: (store: FronteggState, api: RestApi, sharedActions: SharedActions) => {
    setSecurityPolicyState: (state: Partial<SecurityPolicyState>) => void;
    setSecurityPolicyGlobalState: (state: Partial<GlobalPolicyState>) => void;
    setSecurityPolicyPublicState: (state: Partial<PublicPolicyState>) => void;
    setSecurityPolicyMfaState: (state: Partial<MfaPolicyState>) => void;
    setSecurityPolicyVendorMfaState: (state: Partial<MfaPolicyState>) => void;
    setSecurityPolicyLockoutState: (state: Partial<LockoutPolicyState>) => void;
    setSecurityPolicyVendorLockoutState: (state: Partial<LockoutPolicyState>) => void;
    setSecurityPolicyCaptchaState: (state: Partial<CaptchaPolicyState>) => void;
    setSecurityPolicyPasswordHistoryState: (state: Partial<PasswordHistoryPolicyState>) => void;
    setSecurityPolicyVendorPasswordHistoryState: (state: Partial<PasswordHistoryPolicyState>) => void;
    setSecurityPolicyPasswordRotationState: (state: Partial<PasswordRotationPolicyState>) => void;
    resetSecurityPolicyState: () => void;
    setSecurityPolicyPasswordState: (state: Partial<PasswordPolicyState>) => void;
    setSecurityPolicyAuthStrategyPublicState: (state: Partial<PublicAuthStrategyPolicyState>) => void;
    loadSecurityPolicy: (payload?: WithRetryConfig<{}>) => Promise<void>;
    loadGlobalSecurityPolicy: (payload?: WithRetryConfig<{}>) => Promise<void>;
    loadPublicSecurityPolicy: (payload?: WithRetryConfig<{}>) => Promise<void>;
    loadVendorPasswordConfig: (payload?: WithCallback<WithRetryConfig<{}>, Partial<TestConfig>>) => Promise<void>;
    loadSecurityPolicyMfa: (payload?: WithRetryConfig<{}>) => Promise<void>;
    loadSecurityPolicyVendorMfa: (payload?: WithRetryConfig<{}>) => Promise<void>;
    loadSecurityPolicyLockout: (payload?: WithRetryConfig<{}>) => Promise<void>;
    loadSecurityPolicyVendorLockout: (payload?: WithRetryConfig<{}>) => Promise<void>;
    loadSecurityPolicyCaptcha: (payload?: WithRetryConfig<{}>) => Promise<void>;
    loadSecurityPolicyPasswordHistory: () => Promise<void>;
    loadSecurityPolicyVendorPasswordHistory: (payload?: WithRetryConfig<{}>) => Promise<void>;
    loadSecurityPolicyPasswordRotation: () => Promise<void>;
    loadPublicAuthStrategiesPolicy: (payload?: WithCallback<WithRetryConfig<{}>, IAuthStrategiesConfig>) => Promise<void>;
    saveSecurityPolicyMfa: (payload: SaveSecurityPolicyMfaPayload) => Promise<void>;
    saveSecurityPolicyLockout: (payload: SaveSecurityPolicyLockoutPayload) => Promise<void>;
    saveSecurityPolicyPasswordHistory: (payload: SaveSecurityPolicyPasswordHistoryPayload) => Promise<void>;
    saveSecurityPolicyPasswordRotation: (payload: SaveSecurityPolicyPasswordRotationPayload) => Promise<void>;
    __getSecurityPolicyPublicStateWithCustomLogin: (securityPolicyPublicState?: IVendorConfig, retryConfig?: RetryConfig) => Promise<IVendorConfig | undefined>;
};
export default _default;
