import { FronteggActions, FronteggState, RestApi } from '../interfaces';
import { DeepPartial } from '../types';
export * from './Checkout/interfaces';
export * from './Billing/interfaces';
export * from './Plans/interfaces';
export * from './Stripe/interfaces';
export * from './Config/interfaces';
export * from './VendorPublicConfig/interfaces';
import { SubscriptionsState } from './interfaces';
import { buildConfigActions } from './Config';
import { buildPlansActions } from './Plans';
import { buildCheckoutActions } from './Checkout';
import { buildStripeActions } from './Stripe';
import { buildVendorPublicConfigActions } from './VendorPublicConfig';
export declare const createSubscriptionsState: (overrideState?: DeepPartial<SubscriptionsState>) => SubscriptionsState;
export declare const buildSubscriptionsActions: (store: FronteggState, api: RestApi, actions: FronteggActions) => [SubscriptionsActions, SubscriptionsStateActions];
import type { BillingActions, BillingStateActions } from './Billing';
export type SubscriptionsActions = ReturnType<typeof buildConfigActions> & BillingActions & ReturnType<typeof buildPlansActions> & ReturnType<typeof buildCheckoutActions> & ReturnType<typeof buildStripeActions> & ReturnType<typeof buildVendorPublicConfigActions>;
export type SubscriptionsStateActions = {
    config: ReturnType<typeof buildConfigActions>;
    billing: BillingStateActions;
    plans: ReturnType<typeof buildPlansActions>;
    checkout: ReturnType<typeof buildCheckoutActions>;
    stripe: ReturnType<typeof buildStripeActions>;
    vendorPublicConfig: ReturnType<typeof buildVendorPublicConfigActions>;
};
export type { BillingActions, BillingStateActions };
export type CheckoutActions = ReturnType<typeof buildCheckoutActions>;
export type PlansActions = ReturnType<typeof buildPlansActions>;
export type VendorPublicConfigurationActions = ReturnType<typeof buildVendorPublicConfigActions>;
