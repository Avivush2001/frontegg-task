"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TenantsApi = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _constants = require("../constants");
var _utils = require("../auth/utils");
var _ContextHolder = require("../ContextHolder");
var _BaseApiClient = require("../BaseApiClient");
class TenantsApi extends _BaseApiClient.BaseApiClient {
  constructor(appName) {
    super(appName);
    this.switchTenant = async body => {
      if (_ContextHolder.ContextHolder.for(this.appName).isSessionPerTenantEnabled()) {
        (0, _utils.setTabTenantInSessionStorage)(body.tenantId);
      }
      return this.put(`${_constants.urls.identity.users.v1}/tenant`, body);
    };
    this.getTenants = async () => {
      return this.get(`${_constants.urls.identity.users.v2}/me/tenants`);
    };
    this.getSubTenants = async options => {
      return this.get(_constants.urls.tenants.hierarchy.v1, undefined, {
        headers: this.extractHeadersFromOptions(options)
      });
    };
    this.getSubTenantsAsTree = async options => {
      return this.get(_constants.urls.tenants.hierarchy.tree.v1, undefined, {
        headers: this.extractHeadersFromOptions(options)
      });
    };
    this.getParentTenants = async options => {
      return this.get(_constants.urls.tenants.hierarchy.parents.v1, undefined, {
        headers: this.extractHeadersFromOptions(options)
      });
    };
    this.getParentTenantsById = async (tenantId, options) => {
      return this.get(`${_constants.urls.tenants.hierarchy.parents.v1}/${tenantId}`, undefined, {
        headers: this.extractHeadersFromOptions(options)
      });
    };
    this.getTenantsUsersCount = async (body, options) => {
      return this.post(`${_constants.urls.identity.tenants.users.v1}/count`, body, {
        headers: this.extractHeadersFromOptions(options)
      });
    };
    this.searchSubTenants = async (params, options) => {
      return this.get(_constants.urls.tenants.hierarchy.v2, params, {
        headers: this.extractHeadersFromOptions(options)
      });
    };
    this.getHierarchyMetadata = async (params, options) => {
      return this.get(_constants.urls.tenants.hierarchy.metadata.v2, (0, _extends2.default)({}, params, {
        _tenantIds: params._tenantIds.join(',')
      }), {
        headers: this.extractHeadersFromOptions(options)
      });
    };
  }

  /**
   * Switch logged in user to specific tenant by providing tenantId.
   * @throws exception if invalid tenantId.
   */
}
exports.TenantsApi = TenantsApi;
var _default = new TenantsApi('default');
exports.default = _default;