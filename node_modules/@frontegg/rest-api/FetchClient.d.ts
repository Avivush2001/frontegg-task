import { ContextOptions, RequestOptions, UserJwtOptions } from './interfaces';
/**
 * FetchClient is a class that wrap around the fetch API to make requests.
 * It is used by the BaseApiClient to make requests to the server
 */
export declare class FetchClient {
    private appName;
    constructor(appName: string);
    private getFronteggContext;
    private prepareUrl;
    private buildQueryParams;
    private getAdditionalQueryParams;
    private getAdditionalHeaders;
    private buildRequestHeaders;
    private getResponseTraceId;
    sendRequest: (opts: RequestOptions) => Promise<any>;
    get: (url: string, params?: any, opts?: Omit<RequestOptions, "method" | "url">) => Promise<any>;
    post: (url: string, body?: any, opts?: Omit<RequestOptions, "method" | "url">) => Promise<any>;
    patch: (url: string, body?: any, opts?: Omit<RequestOptions, "method" | "url">) => Promise<any>;
    put: (url: string, body?: any, opts?: Omit<RequestOptions, "method" | "url">) => Promise<any>;
    delete: (url: string, body?: any, opts?: Omit<RequestOptions, "method" | "url">) => Promise<any>;
    postDownload: (url: string, body?: any, params?: any, opts?: any) => Promise<any>;
    extractHeadersFromOptions: (options?: UserJwtOptions) => {
        Authorization?: string | undefined;
    };
    /** @deprecated use getContextBaseUrl instead */
    static getBaseUrl: (context: ContextOptions, url: string, withFronteggPrefix?: boolean) => string;
    /** @deprecated use getContextBaseUrl instead */
    getBaseUrl: (context: ContextOptions, url: string, withFronteggPrefix?: boolean) => string;
    getContextBaseUrl: (url: string, withFronteggPrefix?: boolean) => string;
    static getMetadataHeaders: (context: ContextOptions) => Record<string, string>;
    /** @deprecated - use getContextMetadataHeaders instead */
    getMetadataHeaders: (context: ContextOptions) => Record<string, string>;
    getContextMetadataHeaders: () => Record<string, string>;
    static getScopedTenant: () => string | null;
}
/**
 * import FetchClient and use it to make requests to the server for specific application
 * @param appName - the application name to make requests for
 * @deprecated - use FetchClient directly
 */
declare const _default: FetchClient;
export default _default;
