"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _helpers = require("../../helpers");
var _state = require("./state");
var _restApi = require("@frontegg/rest-api");
var _default = (store, api, sharedActions) => {
  const actions = sharedActions;
  const setCheckoutState = state => {
    Object.assign(store.subscriptions.checkout, state);
  };
  const resetCheckoutState = () => {
    (0, _helpers.deepResetState)(store, ['subscriptions', 'checkout'], _state.initialState);
  };
  const loadCheckout = () => {
    setCheckoutState({
      fetching: false,
      loading: false,
      error: null,
      confirmed: false
    });
  };
  const resetCheckout = () => {
    setCheckoutState({
      loading: false,
      error: null,
      confirmed: false
    });
  };
  const submitCheckout = () => {
    setCheckoutState({
      loading: true,
      error: null
    });
  };
  const confirmCheckout = async payload => {
    const {
      paymentMethodId,
      planId
    } = payload;
    const subscription = store.subscriptions.billing.subscription.subscription;
    const summary = store.subscriptions.billing.information.summary;
    const isTrialing = (subscription == null ? void 0 : subscription.status) === _restApi.ISubscriptionStatus.TRIALING;
    const hasPaymentMethod = !!(summary != null && summary.paymentMethodId);
    if (!subscription) {
      setCheckoutState({
        loading: false,
        error: new _restApi.FronteggApiError('Subscription not found', 500, null)
      });
      return;
    }
    setCheckoutState({
      loading: true,
      error: null
    });
    if (isTrialing && hasPaymentMethod) {
      setCheckoutState({
        loading: false,
        error: null,
        confirmed: true
      });
      actions.setBillingSubscriptionState({
        subscription: (0, _extends2.default)({}, subscription, {
          status: _restApi.ISubscriptionStatus.ACTIVE
        })
      });
      return;
    }
    try {
      await api.subscriptions.updateManagedSubscription(subscription.id, {
        paymentMethodId,
        planId
      });
      await Promise.all([actions.loadBillingInformation(), actions.loadPaymentMethod(), actions.loadInvoices()]);
      setCheckoutState({
        loading: false,
        error: null,
        confirmed: true
      });
    } catch (e) {
      setCheckoutState({
        loading: false,
        error: (0, _helpers.errorHandler)(e)
      });
    }
  };
  const errorCheckout = payload => {
    setCheckoutState({
      loading: false,
      error: payload
    });
  };
  return {
    setCheckoutState,
    resetCheckoutState,
    loadCheckout,
    resetCheckout,
    submitCheckout,
    confirmCheckout,
    errorCheckout
  };
};
exports.default = _default;