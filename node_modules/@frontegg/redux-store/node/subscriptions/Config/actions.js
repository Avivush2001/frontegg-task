"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _helpers = require("../../helpers");
var _state = require("./state");
var _restApi = require("@frontegg/rest-api");
var _interfaces = require("../interfaces");
var _default = (store, api, sharedActions) => {
  const setPaymentConfigState = state => {
    Object.assign(store.subscriptions.config, state);
  };
  const resetPaymentConfigState = () => {
    (0, _helpers.deepResetState)(store, ['subscriptions', 'config'], _state.initialState);
  };
  const setPaymentConfigError = error => {
    Object.assign(store.subscriptions.config, {
      error,
      loading: false,
      fetching: false
    });
  };
  const loadStripePaymentConfiguration = async () => {
    setPaymentConfigState({
      loading: true
    });
    try {
      const response = await api.subscriptions.getStripePaymentProviderConfiguration();
      const config = {
        paymentProvider: _interfaces.PaymentProvider.STRIPE,
        apiKey: response.publishableKey
      };
      setPaymentConfigState({
        config
      });
      setPaymentConfigState({
        loading: false,
        fetching: false
      });
    } catch (e) {
      setPaymentConfigError((0, _helpers.errorHandler)(e));
    }
  };
  const loadPaymentConfiguration = async () => {
    setPaymentConfigState({
      loading: true
    });
    try {
      var _await$api$subscripti;
      const response = (_await$api$subscripti = await api.subscriptions.getPaymentProviders()) != null ? _await$api$subscripti : [];
      const stripePaymentProvider = response.find(paymentProvider => paymentProvider.status === '1' && paymentProvider.providerType === _restApi.ProviderType.Stripe);
      if (stripePaymentProvider) {
        await loadStripePaymentConfiguration();
      } else {
        setPaymentConfigError((0, _helpers.errorHandler)('Payment provider not configured'));
      }
    } catch (e) {
      setPaymentConfigError((0, _helpers.errorHandler)(e));
    }
  };
  return {
    setPaymentConfigState,
    resetPaymentConfigState,
    loadPaymentConfiguration
  };
};
exports.default = _default;