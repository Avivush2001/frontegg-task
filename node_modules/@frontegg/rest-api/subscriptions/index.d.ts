import { BaseApiClient } from '../BaseApiClient';
export declare class SubscriptionsApi extends BaseApiClient {
    constructor(appName: string);
    private readonly invoicesApi;
    private readonly managedSubscriptionApi;
    private readonly paymentMethodsApi;
    private readonly paymentProvidersApi;
    private readonly plansApi;
    private readonly subscriptionApi;
    private readonly summariesApi;
    private readonly subscriptionTenantConfigApi;
    private readonly vendorPublicConfigApi;
    private readonly stripeProviderApi;
    /** InvoicesApi **/
    getSubscriptionInvoices: () => Promise<import("./interfaces").ISubscriptionInvoiceResponse[]>;
    getSubscriptionInvoice: (invoiceId: string) => Promise<import("./interfaces").ISubscriptionInvoiceResponse>;
    getSubscriptionInvoicePdf: (invoiceId: string, outputFileName?: string) => Promise<void>;
    /** ManagedSubscriptionApi **/
    getManagedSubscription: (subscriptionId: string) => Promise<import("./interfaces").ISubscriptionResponse>;
    getManagedSubscriptions: () => Promise<import("./interfaces").ISubscriptionResponse[]>;
    cancelManagedSubscription: (subscriptionId: string) => Promise<void>;
    renewManagedSubscription: (subscriptionId: string) => Promise<void>;
    updateManagedSubscription: (subscriptionId: string, { paymentMethodId, planId }: import("./interfaces").IUpdateManagedSubscriptionRequest) => Promise<void>;
    /** PaymentMethodsApi **/
    getPaymentMethods: () => Promise<import("./interfaces").ISubscriptionPaymentMethodResponse[]>;
    getPaymentMethod: (paymentMethodId: string) => Promise<import("./interfaces").ISubscriptionPaymentMethodResponse>;
    updatePaymentMethodBillingDetails: (paymentMethodId: string, { email, ...address }: import("./interfaces").ISubscriptionUpdatePaymentMethodBillingDetails) => Promise<import("./interfaces").ISubscriptionUpdatePaymentMethodBillingDetails>;
    /** PaymentProvidersApi **/
    getPaymentProviders: () => Promise<import("./interfaces").IPaymentProviderResponse[]>;
    /** PlansApi **/
    getSubscriptionPlans: () => Promise<import("./interfaces").IPlanResponse[]>;
    getSubscriptionPlan: (planId: string) => Promise<import("./interfaces").IPlanResponse[]>;
    /** SubscriptionApi **/
    getSubscriptions: () => Promise<import("./interfaces").ISubscriptionResponse[]>;
    getSubscription: (subscriptionId: string) => Promise<import("./interfaces").ISubscriptionResponse>;
    cancelSubscription: (subscriptionId: string) => Promise<void>;
    renewSubscription: (subscriptionId: string) => Promise<void>;
    updateSubscription: (subscriptionId: string, { paymentMethodId, planId }: import("./interfaces").IUpdateSubscriptionRequest) => Promise<void>;
    /** SummariesApi **/
    getSubscriptionSummaries: (tenantId: string) => Promise<import("./interfaces").ISubscriptionSummariesResponse>;
    /** SubscriptionTenantConfigApi **/
    getTenantConfiguration: (tenantId: string) => Promise<import("./interfaces").ITenantConfigurationResponse>;
    createTenantConfiguration: (request: import("./interfaces").ICreateTenantConfigurationRequest) => Promise<import("./interfaces").ICreateTenantConfigurationResponse>;
    /** VendorPublicConfigApi **/
    getVendorPublicConfigurations: () => Promise<import("./interfaces").IVendorPublicConfigurationResponse[]>;
    /** StripeProviderApi **/
    createSubscription: (request: import("./interfaces").ICreateStripeSubscriptionRequest) => Promise<import("./interfaces").ICreateSubscriptionResponse>;
    getStripeCustomer: (tenantId: string) => Promise<import("./interfaces").IStripeCustomerResponse>;
    createStripeCustomer: (request: import("./interfaces").ICreateStripeCustomerRequest) => Promise<import("./interfaces").ICreateStripeCustomerResponse>;
    getStripePaymentProviderConfiguration: () => Promise<import("./interfaces").IStripePaymentProviderConfigurationResponse>;
    createStripePaymentMethodSetupIntentSecret: (request: import("./interfaces").ICreateStripePaymentMethodSetupRequest) => Promise<import("./interfaces").ICreateStripePaymentMethodSetupResponse>;
}
declare const _default: SubscriptionsApi;
export default _default;
export * from './interfaces';
export * from './enums';
