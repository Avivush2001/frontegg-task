"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildAuthActions = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _acceptInvitationActions = _interopRequireDefault(require("./acceptInvitationActions.mocks"));
var _accountSettingsActions = _interopRequireDefault(require("./accountSettingsActions.mocks"));
var _activateAccountActions = _interopRequireDefault(require("./activateAccountActions.mocks"));
var _allAccountsActions = _interopRequireDefault(require("./allAccountsActions.mocks"));
var _MSP = require("../../auth/MSP");
var _apiTokensActions = _interopRequireDefault(require("./apiTokensActions.mocks"));
var _applicationsActions = _interopRequireDefault(require("./applicationsActions.mocks"));
var _customLoginActions = _interopRequireDefault(require("./customLoginActions.mocks"));
var _entitlementsActions = _interopRequireDefault(require("./entitlementsActions.mocks"));
var _forgotPasswordActions = _interopRequireDefault(require("./forgotPasswordActions.mocks"));
var _passwordRotationActions = _interopRequireDefault(require("./passwordRotationActions.mocks"));
var _groupsActions = _interopRequireDefault(require("./groupsActions.mocks"));
var _GroupsDialogsState = require("../../auth/GroupsDialogsState");
var _impersonateActions = _interopRequireDefault(require("./impersonateActions.mocks"));
var _loginActions = _interopRequireDefault(require("./loginActions.mocks"));
var _mfaActions = _interopRequireDefault(require("./mfaActions.mocks"));
var _passkeysActions = _interopRequireDefault(require("./passkeysActions.mocks"));
var _profileActions = _interopRequireDefault(require("./profileActions.mocks"));
var _provisioningActions = _interopRequireDefault(require("./provisioningActions.mocks"));
var _resetPhoneNumberActions = _interopRequireDefault(require("./resetPhoneNumberActions.mocks"));
var _rolesActions = _interopRequireDefault(require("./rolesActions.mocks"));
var _restrictionsActions = _interopRequireDefault(require("./security/restrictionsActions.mocks"));
var _securityCenterActions = _interopRequireDefault(require("./security/securityCenterActions.mocks"));
var _securityPolicyActions = _interopRequireDefault(require("./security/securityPolicyActions.mocks"));
var _sessionsPolicyActions = _interopRequireDefault(require("./security/sessionsPolicyActions.mocks"));
var _sessionsActions = _interopRequireDefault(require("./sessionsActions.mocks"));
var _signUpActions = _interopRequireDefault(require("./signUpActions.mocks"));
var _smsActions = _interopRequireDefault(require("./smsActions.mocks"));
var _socialLoginActions = _interopRequireDefault(require("./socialLoginActions.mocks"));
var _ssoActions = _interopRequireDefault(require("./ssoActions.mocks"));
var _stepUpActions = _interopRequireDefault(require("./stepUpActions.mocks"));
var _teamActions = _interopRequireDefault(require("./teamActions.mocks"));
var _tenantsActions = _interopRequireDefault(require("./tenantsActions.mocks"));
var _unlockAccountActions = _interopRequireDefault(require("./unlockAccountActions.mocks"));
var _usersEmailsPolicyActions = _interopRequireDefault(require("./usersEmailsPolicyActions.mocks"));
var _helpers = require("../../helpers");
var _UsernamesState = require("../../auth/UsernamesState");
const _excluded = ["requestName"];
const buildAuthActions = (store, api, actions, snapshotAuthState) => {
  const acceptInvitationActions = (0, _acceptInvitationActions.default)(store, api, actions);
  const accountSettingsActions = (0, _accountSettingsActions.default)(store, api, actions);
  const unlockAccountActions = (0, _unlockAccountActions.default)(store, api, actions);
  const activateAccountActions = (0, _activateAccountActions.default)(store, api, actions);
  const allAccountsActions = (0, _allAccountsActions.default)(store, api, actions);
  const allAccountsDialogActions = (0, _MSP.buildAllAccountsDialogActions)(store, api, actions);
  const apiTokensActions = (0, _apiTokensActions.default)(store, api, actions);
  const applicationsActions = (0, _applicationsActions.default)(store, api, actions);
  const customLoginActions = (0, _customLoginActions.default)(store, api, actions);
  const entitlementsActions = (0, _entitlementsActions.default)(store, api, actions);
  const forgotPasswordActions = (0, _forgotPasswordActions.default)(store, api, actions);
  const passwordRotationActions = (0, _passwordRotationActions.default)(store, api, actions);
  const groupsActions = (0, _groupsActions.default)(store, api, actions);
  const groupsDialogsActions = (0, _GroupsDialogsState.buildGroupsDialogsActions)(store, api, actions);
  const impersonateActions = (0, _impersonateActions.default)(store, api, actions);
  const loginActions = (0, _loginActions.default)(store, api, actions);
  const mfaActions = (0, _mfaActions.default)(store, api, actions);
  const passkeysActions = (0, _passkeysActions.default)(store, api, actions);
  const profileActions = (0, _profileActions.default)(store, api, actions);
  const provisioningActions = (0, _provisioningActions.default)(store, api, actions);
  const resetPhoneNumberActions = (0, _resetPhoneNumberActions.default)(store, api, actions);
  const restrictionsActions = (0, _restrictionsActions.default)(store, api, actions);
  const rolesActions = (0, _rolesActions.default)(store, api, actions);
  const securityCenterActions = (0, _securityCenterActions.default)(store, api, actions);
  const securityPolicyActions = (0, _securityPolicyActions.default)(store, api, actions);
  const sessionsActions = (0, _sessionsActions.default)(store, api, actions);
  const sessionsPolicyActions = (0, _sessionsPolicyActions.default)(store, api, actions);
  const signUpActions = (0, _signUpActions.default)(store, api, actions);
  const smsActions = (0, _smsActions.default)(store, api, actions);
  const socialLoginActions = (0, _socialLoginActions.default)(store, api, actions);
  const ssoActions = (0, _ssoActions.default)(store, api, actions);
  const stepUpActions = (0, _stepUpActions.default)(store, api, actions);
  const teamActions = (0, _teamActions.default)(store, api, actions);
  const tenantsActions = (0, _tenantsActions.default)(store, api, actions);
  const usernamesActions = (0, _UsernamesState.buildUsernamesActions)(store, api, actions);
  const usersEmailsPolicyActions = (0, _usersEmailsPolicyActions.default)(store, api, actions);
  const authStateActions = {
    acceptInvitationActions,
    accountSettingsActions,
    unlockAccountActions,
    activateAccountActions,
    allAccountsActions,
    allAccountsDialogActions,
    apiTokensActions,
    applicationsActions,
    customLoginActions,
    entitlementsActions,
    forgotPasswordActions,
    passwordRotationActions,
    groupsActions,
    groupsDialogsActions,
    impersonateActions,
    loginActions,
    mfaActions,
    passkeysActions,
    profileActions,
    provisioningActions,
    resetPhoneNumberActions,
    restrictionsActions,
    rolesActions,
    securityCenterActions,
    securityPolicyActions,
    sessionsActions,
    sessionsPolicyActions,
    signUpActions,
    smsActions,
    socialLoginActions,
    ssoActions,
    stepUpActions,
    teamActions,
    tenantsActions,
    usernamesActions,
    usersEmailsPolicyActions
  };
  const setAuthState = state => {
    Object.keys(state).forEach(key => {
      const authKey = key;
      if ((0, _helpers.isProxy)(store.auth[authKey])) {
        Object.assign(store.auth[authKey], state[authKey]);
      } else {
        store.auth[authKey] = state[authKey];
      }
    });
  };
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  const resetAuthState = () => {
    (0, _helpers.deepResetState)(store, ['auth'], snapshotAuthState);
  };
  const setUser = user => {
    setAuthState({
      user
    });
  };
  const setErrorByRequestName = _ref => {
    let {
        requestName
      } = _ref,
      data = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
    store.auth.errorByRequest = (0, _extends2.default)({}, store.auth.errorByRequest, {
      [requestName]: (0, _extends2.default)({}, data, {
        isError: true
      })
    });
  };
  const authActions = (0, _extends2.default)({
    setState: setAuthState,
    setAuthState,
    setErrorByRequestName,
    resetAuthState,
    setUser
  }, acceptInvitationActions, accountSettingsActions, activateAccountActions, unlockAccountActions, allAccountsActions, allAccountsDialogActions, apiTokensActions, applicationsActions, customLoginActions, entitlementsActions, forgotPasswordActions, passwordRotationActions, groupsActions, groupsDialogsActions, impersonateActions, loginActions, mfaActions, passkeysActions, profileActions, provisioningActions, resetPhoneNumberActions, restrictionsActions, rolesActions, securityCenterActions, securityPolicyActions, sessionsActions, sessionsPolicyActions, signUpActions, smsActions, socialLoginActions, ssoActions, stepUpActions, teamActions, tenantsActions, usernamesActions, usersEmailsPolicyActions);
  return {
    authActions,
    authStateActions
  };
};
exports.buildAuthActions = buildAuthActions;