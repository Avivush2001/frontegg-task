import { FronteggState, RestApi, SharedActions, WithCallback, WithSilentLoad } from '../../interfaces';
import { IGetUsersV2Payload, LoadRolesAndPermissionsPayload } from '../../auth';
import { AddUserToSubTenantsRequest, IDeleteUser, ILoadAllUsers, IResendActivationLink, IResendInvitationEmail, IResendInvitationLink, ISubTenantUser, ITeamUser, IUpdateUser, IUpdateUserExpiration, RemoveUserFromSubTenantsRequest } from '@frontegg/rest-api';
declare const _default: (store: FronteggState, api: RestApi, actions: SharedActions) => {
    getInvitationLink: (payload?: import("../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    createInvitationLink: (payload: WithCallback<import("@frontegg/rest-api").ICreateOrUpdateInviteUserLink, string>) => Promise<void>;
    updateInvitationLink: (payload: WithCallback<import("@frontegg/rest-api").ICreateOrUpdateInviteUserLink>) => Promise<void>;
    deleteInvitationLink: (payload?: WithCallback<{}, boolean>) => Promise<void>;
    resendActivationLink: (payload: WithCallback<IResendActivationLink>) => Promise<void>;
    resendInvitationLink: (payload: WithCallback<IResendInvitationLink>) => Promise<void>;
    resendInvitationEmail: (payload: WithCallback<IResendInvitationEmail>) => Promise<void>;
    resendInvitationLinkToAllSubTenants: (payload: WithCallback<IResendInvitationLink>) => Promise<void>;
    loadAllSubTenantsUsers: (payload: WithCallback<WithSilentLoad<Partial<ILoadAllUsers>>, ISubTenantUser[]>) => Promise<void>;
    setUserRolesForSubTenants: (payload: WithCallback<import("@frontegg/rest-api").UpdateUserRolesForSubTenantsRequestDto & {
        userId: string;
    }>) => Promise<void>;
    deleteUserFromSubTenants: (payload: WithCallback<RemoveUserFromSubTenantsRequest>) => Promise<void>;
    addUserToSubTenants: (payload: WithCallback<AddUserToSubTenantsRequest>) => Promise<void>;
    loadRoles: (payload?: import("../../interfaces").WithRetryConfig<LoadRolesAndPermissionsPayload>) => Promise<void>;
    loadUsers: (payload: WithCallback<WithSilentLoad<import("@frontegg/rest-api").ILoadUsers>, ITeamUser[]>) => Promise<void>;
    loadUsersV2: (payload: WithCallback<import("../../interfaces").WithRetryConfig<WithSilentLoad<IGetUsersV2Payload>>, ITeamUser[]>) => Promise<void>;
    addUser: (payload: WithCallback<import("../../auth").AddUserPayload, ITeamUser>) => Promise<void>;
    addUsersBulk: (payload: WithCallback<import("../../auth").IAddUsers, import("../../auth").BulkInvintationData>) => Promise<void>;
    updateUser: (payload: WithCallback<IUpdateUser, ITeamUser>) => Promise<void>;
    deleteUser: (payload: WithCallback<IDeleteUser>) => Promise<void>;
    enableUser: (payload: WithCallback<{
        userId: string;
    }>) => Promise<void>;
    disableUser: (payload: WithCallback<{
        userId: string;
    }>) => Promise<void>;
    getTemporaryUsersConfig: (payload?: import("../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    updateUserExpirationTime: (payload: WithCallback<IUpdateUserExpiration>) => Promise<void>;
    setUserAsPermanent: (payload: WithCallback<Pick<IUpdateUserExpiration, "userId">>) => Promise<void>;
    setTeamLoader: (payload: import("../../auth").TeamStateIndicator) => void;
    setTeamError: (payload: import("../../auth").TeamStateIndicator) => void;
    setTeamState: (payload: Partial<import("../../auth").TeamState>) => void;
    resetTeamState: () => void;
    openAddUserDialog: (payload?: import("../../auth").ISetAddUserDialog) => void;
    closeAddUserDialog: (payload?: any) => void;
    openDeleteUserDialog: (payload?: import("../../auth").ISetDeleteUserDialog) => void;
    closeDeleteUserDialog: (payload?: any) => void;
    lockUser: (payload: WithCallback<IDeleteUser>) => Promise<void>;
};
export default _default;
