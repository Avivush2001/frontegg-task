import { ICreateSamlGroup, ISamlConfiguration, ISamlRolesGroup, IOidcConfiguration, ITeamUserRole, ICreateSSODomain, ISSODomain, IUpdateSamlConfiguration, ISamlMetadata, IUpdateSSOConfiguration, ISSOConfiguration, IUpdateSamlGroup, FronteggApiError } from '@frontegg/rest-api';
import { WithCallback } from '../../interfaces';
export type { ISSOConfiguration, ISSODomain };
export interface SSOState {
    firstLoad: boolean;
    loading: boolean;
    error?: any;
    saving?: boolean;
    samlConfiguration?: ISamlConfiguration;
    oidcConfiguration?: IOidcConfiguration;
    roles?: ITeamUserRole[];
    rolesGroups?: ISamlRolesGroup[];
    authorizationRoles?: string[];
    ssoConfigurations: ISSOConfiguration[];
    errors: any;
    loaders: any;
    samlMetadata?: ISamlMetadata;
}
export type SSOStateIndicator = {
    key: SSOStateKeys;
    value: string | boolean | FronteggApiError;
};
export declare enum SSOStateKeys {
    LOAD_SSO_CONFIGURATIONS = "LOAD_SSO_CONFIGURATIONS",
    SAVE_SSO_CONFIGURATION = "SAVE_SSO_CONFIGURATION",
    UPDATE_SSO_CONFIGURATION = "UPDATE_SSO_CONFIGURATION",
    SAVE_SSO_CONFIGURATION_BY_METADATA = "SAVE_SSO_CONFIGURATION_BY_METADATA",
    UPDATE_SSO_CONFIGURATION_BY_METADATA = "UPDATE_SSO_CONFIGURATION",
    DELETE_SSO_CONFIGURATION = "DELETE_SSO_CONFIGURATION",
    SAVE_SSO_DOMAIN = "SAVE_SSO_DOMAIN",
    DELETE_SSO_DOMAIN = "DELETE_SSO_DOMAIN",
    VALIDATE_SSO_DOMAIN = "VALIDATE_SSO_DOMAIN",
    UPDATE_SSO_DEFAULT_ROLES = "UPDATE_SSO_DEFAULT_ROLES",
    DELETE_SSO_GROUPS = "DELETE_SSO_GROUPS",
    SAVE_SSO_GROUPS = "SAVE_SSO_GROUPS",
    GET_SSO_AUTHORIZATION_ROLES = "GET_SSO_AUTHORIZATION_ROLES"
}
export declare enum SamlVendors {
    Saml = "saml",
    Okta = "okta",
    Azure = "azure",
    Google = "google",
    Oidc = "oidc"
}
export type UpdateSSOGroupsPayload = WithCallback<{
    ssoConfigId: string;
    changedGroups: IUpdateSamlGroup[];
}>;
export type SetSSOGroupsPayload = WithCallback<{
    ssoConfigId: string;
    groupsToAdd: ICreateSamlGroup[];
    groupsToDelete: string[];
}>;
export type UpdateSSODefaultRolesPayload = WithCallback<{
    roleIds: string[];
    ssoConfigId: string;
}>;
export type SaveSSODomainPayload = WithCallback<ICreateSSODomain & {
    ssoConfigId: string;
}, ISSODomain>;
export type ValidateSSODomainPayload = WithCallback<{
    domainId: string;
    ssoConfigId: string;
}>;
export type SaveSSOConfigurationPayload = WithCallback<Partial<IUpdateSamlConfiguration & {
    samlVendor: SamlVendors;
}>>;
export type SaveSSOConfigurationPayloadV2 = WithCallback<IUpdateSSOConfiguration, ISSOConfiguration>;
export type SaveSSOConfigurationByMetadataPayload = WithCallback<{
    configFile: File;
}, ISSOConfiguration>;
export type UpdateSSOConfigurationByMetadataPayload = WithCallback<{
    configFile: File;
    ssoConfigId: string;
}, ISSOConfiguration>;
export type UpdateSSOConfigurationPayload = WithCallback<IUpdateSSOConfiguration & {
    ssoConfigId: string;
}, ISSOConfiguration>;
export type DeleteSSOConfigurationPayload = WithCallback<{
    ssoConfigId: string;
}>;
export type SaveSSOConfigurationFilePayload = WithCallback<{
    configFile: File;
}>;
export type SaveSSOConfigurationByDataPayload = WithCallback<Partial<ISSOConfiguration> & {
    ssoConfigId?: string;
    configMetadata?: Record<string, string>;
}, ISSOConfiguration>;
export type SaveSSOConfigurationByUrlPayload = WithCallback<{
    ssoConfigId?: string;
    configMetadata?: Record<string, string>;
    metadataUrl: string;
}, ISSOConfiguration>;
export type UpdateSSOAuthorizationRolesPayload = WithCallback<{
    authorizationRoles: string[];
    groups?: ISamlRolesGroup[];
}>;
export type DeleteSamlGroupPayload = WithCallback<{
    id: string;
}>;
export type CreateSamlGroupPayload = WithCallback<ICreateSamlGroup>;
