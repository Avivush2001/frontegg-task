import { FronteggState, RestApi, SharedActions, WithCallback } from '../../../interfaces';
import { ISetAddUserDialog, ISetDeleteUserDialog, TeamState, TeamStateIndicator } from '../interfaces';
import { IDeleteUser } from '@frontegg/rest-api';
declare const _default: (store: FronteggState, api: RestApi, sharedActions: SharedActions) => {
    getInvitationLink: (payload?: import("../../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    createInvitationLink: (payload: WithCallback<import("@frontegg/rest-api").ICreateOrUpdateInviteUserLink, string>) => Promise<void>;
    updateInvitationLink: (payload: WithCallback<import("@frontegg/rest-api").ICreateOrUpdateInviteUserLink>) => Promise<void>;
    deleteInvitationLink: (payload?: WithCallback<{}, boolean>) => Promise<void>;
    resendActivationLink: (payload: WithCallback<import("@frontegg/rest-api").IResendActivationLink>) => Promise<void>;
    resendInvitationLink: (payload: WithCallback<import("@frontegg/rest-api").IResendInvitationLink>) => Promise<void>;
    resendInvitationEmail: (payload: WithCallback<import("@frontegg/rest-api").IResendInvitationEmail>) => Promise<void>;
    resendInvitationLinkToAllSubTenants: (payload: WithCallback<import("@frontegg/rest-api").IResendInvitationLink>) => Promise<void>;
    loadAllSubTenantsUsers: (payload: WithCallback<import("../../../interfaces").WithSilentLoad<Partial<import("@frontegg/rest-api").ILoadAllUsers>>, import("@frontegg/rest-api").ISubTenantUser[]>) => Promise<void>;
    setUserRolesForSubTenants: (payload: WithCallback<import("@frontegg/rest-api").UpdateUserRolesForSubTenantsRequestDto & {
        userId: string;
    }>) => Promise<void>;
    deleteUserFromSubTenants: (payload: WithCallback<import("@frontegg/rest-api").RemoveUserFromSubTenantsRequest>) => Promise<void>;
    addUserToSubTenants: (payload: WithCallback<import("@frontegg/rest-api").AddUserToSubTenantsRequest>) => Promise<void>;
    loadRoles: (payload?: import("../../../interfaces").WithRetryConfig<import("../interfaces").LoadRolesAndPermissionsPayload>) => Promise<void>;
    loadUsers: (payload: WithCallback<import("../../../interfaces").WithSilentLoad<import("@frontegg/rest-api").ILoadUsers>, import("@frontegg/rest-api").ITeamUser[]>) => Promise<void>;
    loadUsersV2: (payload: WithCallback<import("../../../interfaces").WithRetryConfig<import("../../../interfaces").WithSilentLoad<import("../interfaces").IGetUsersV2Payload>>, import("@frontegg/rest-api").ITeamUser[]>) => Promise<void>;
    addUser: (payload: WithCallback<import("../interfaces").AddUserPayload, import("@frontegg/rest-api").ITeamUser>) => Promise<void>;
    addUsersBulk: (payload: WithCallback<import("../interfaces").IAddUsers, import("../interfaces").BulkInvintationData>) => Promise<void>;
    updateUser: (payload: WithCallback<import("@frontegg/rest-api").IUpdateUser, import("@frontegg/rest-api").ITeamUser>) => Promise<void>;
    deleteUser: (payload: WithCallback<IDeleteUser>) => Promise<void>;
    enableUser: (payload: WithCallback<{
        userId: string;
    }>) => Promise<void>;
    disableUser: (payload: WithCallback<{
        userId: string;
    }>) => Promise<void>;
    getTemporaryUsersConfig: (payload?: import("../../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    updateUserExpirationTime: (payload: WithCallback<import("@frontegg/rest-api").IUpdateUserExpiration>) => Promise<void>;
    setUserAsPermanent: (payload: WithCallback<Pick<import("@frontegg/rest-api").IUpdateUserExpiration, "userId">>) => Promise<void>;
    setTeamLoader: (payload: TeamStateIndicator) => void;
    setTeamError: (payload: TeamStateIndicator) => void;
    setTeamState: (payload: Partial<TeamState>) => void;
    resetTeamState: () => void;
    openAddUserDialog: (payload?: ISetAddUserDialog) => void;
    closeAddUserDialog: (payload?: any) => void;
    openDeleteUserDialog: (payload?: ISetDeleteUserDialog) => void;
    closeDeleteUserDialog: (payload?: any) => void;
    lockUser: (payload: WithCallback<IDeleteUser>) => Promise<void>;
};
export default _default;
