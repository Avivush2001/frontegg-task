"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _SecurityPolicyState = require("../../../auth/Security/SecurityPolicyState");
var _helpers = require("../../../helpers");
var _dummy = require("../../dummy");
var _helpers2 = require("../../helpers");
const _excluded = ["callback"],
  _excluded2 = ["callback"],
  _excluded3 = ["callback"];
var _default = (store, api, actions) => {
  const originalActions = (0, _SecurityPolicyState.buildSecurityPolicyActions)(store, api, actions);
  const mockedActions = (0, _helpers2.mockActionsExpect)(originalActions, ['setSecurityPolicyState', 'setSecurityPolicyGlobalState', 'setSecurityPolicyPublicState', 'setSecurityPolicyMfaState', 'setSecurityPolicyVendorMfaState', 'setSecurityPolicyLockoutState', 'setSecurityPolicyVendorLockoutState', 'setSecurityPolicyCaptchaState', 'setSecurityPolicyPasswordHistoryState', 'setSecurityPolicyVendorPasswordHistoryState', 'resetSecurityPolicyState', 'setSecurityPolicyPasswordState', 'setSecurityPolicyAuthStrategyPublicState']);
  mockedActions.loadSecurityPolicy = async () => {
    mockedActions.setSecurityPolicyGlobalState({
      loading: true,
      error: null
    });
    await Promise.all([mockedActions.loadSecurityPolicyMfa(), mockedActions.loadSecurityPolicyVendorMfa(), mockedActions.loadSecurityPolicyLockout(), mockedActions.loadSecurityPolicyVendorLockout(), mockedActions.loadSecurityPolicyPasswordHistory(), mockedActions.loadSecurityPolicyVendorPasswordHistory(), mockedActions.loadSecurityPolicyCaptcha()]);
    await (0, _helpers.delay)();
    mockedActions.setSecurityPolicyGlobalState({
      policy: _dummy.policyDemo,
      loading: false
    });
  };
  mockedActions.loadPublicSecurityPolicy = async () => {
    mockedActions.setSecurityPolicyPublicState({
      loading: true,
      error: null
    });
    try {
      mockedActions.setSecurityPolicyPublicState({
        policy: _dummy.publicSecurityPolicy,
        loading: false
      });
    } catch (e) {
      mockedActions.setSecurityPolicyPublicState({
        error: (0, _helpers.errorHandler)(e),
        loading: false
      });
    }
  };
  mockedActions.saveSecurityPolicyMfa = async payload => {
    var _newSecurityPolicy$id;
    const {
        callback
      } = payload,
      newSecurityPolicy = (0, _objectWithoutPropertiesLoose2.default)(payload, _excluded);
    mockedActions.setSecurityPolicyMfaState({
      saving: true,
      error: null
    });
    const policy = (0, _extends2.default)({}, _dummy.policyLockoutDemo, {
      id: (_newSecurityPolicy$id = newSecurityPolicy.id) != null ? _newSecurityPolicy$id : _dummy.policyLockoutDemo.id,
      enforceMFAType: newSecurityPolicy.enforceMFAType
    });
    await (0, _helpers.delay)();
    mockedActions.setSecurityPolicyMfaState({
      policy,
      saving: false
    });
    callback == null ? void 0 : callback(policy);
  };
  mockedActions.loadSecurityPolicyMfa = async () => {
    mockedActions.setSecurityPolicyMfaState({
      loading: true,
      error: null
    });
    await (0, _helpers.delay)();
    mockedActions.setSecurityPolicyMfaState({
      policy: _dummy.policyMfaDemo,
      loading: false
    });
  };
  mockedActions.loadSecurityPolicyVendorMfa = async () => {
    mockedActions.setSecurityPolicyVendorMfaState({
      loading: true,
      error: null
    });
    await (0, _helpers.delay)();
    mockedActions.setSecurityPolicyVendorMfaState({
      policy: _dummy.policyMfaDemo,
      loading: false
    });
  };
  mockedActions.saveSecurityPolicyLockout = async payload => {
    const {
        callback
      } = payload,
      newSecurityPolicy = (0, _objectWithoutPropertiesLoose2.default)(payload, _excluded2);
    mockedActions.setSecurityPolicyLockoutState({
      saving: true,
      error: null
    });
    await (0, _helpers.delay)();
    const policy = (0, _extends2.default)({}, _dummy.policyLockoutDemo, newSecurityPolicy, {
      id: newSecurityPolicy.id ? newSecurityPolicy.id : _dummy.policyLockoutDemo.id
    });
    callback == null ? void 0 : callback(policy);
    mockedActions.setSecurityPolicyLockoutState({
      policy,
      saving: false
    });
  };
  mockedActions.loadSecurityPolicyLockout = async () => {
    mockedActions.setSecurityPolicyLockoutState({
      loading: true,
      error: null
    });
    await (0, _helpers.delay)();
    mockedActions.setSecurityPolicyLockoutState({
      policy: _dummy.policyLockoutDemo,
      loading: false
    });
  };
  mockedActions.loadSecurityPolicyVendorLockout = async () => {
    mockedActions.setSecurityPolicyVendorLockoutState({
      loading: true,
      error: null
    });
    await (0, _helpers.delay)();
    mockedActions.setSecurityPolicyVendorLockoutState({
      policy: _dummy.policyLockoutDemo,
      loading: false
    });
  };
  mockedActions.loadSecurityPolicyCaptcha = async () => {
    mockedActions.setSecurityPolicyLockoutState({
      loading: true,
      error: null
    });
    await (0, _helpers.delay)();
    mockedActions.setSecurityPolicyLockoutState({
      policy: _dummy.policyLockoutDemo,
      loading: false
    });
  };
  mockedActions.saveSecurityPolicyPasswordHistory = async payload => {
    const {
        callback
      } = payload,
      newSecurityPolicy = (0, _objectWithoutPropertiesLoose2.default)(payload, _excluded3);
    mockedActions.setSecurityPolicyPasswordHistoryState({
      saving: true,
      error: null
    });
    await (0, _helpers.delay)();
    const policy = (0, _extends2.default)({}, _dummy.policyPasswordHistoryDemo, newSecurityPolicy, {
      id: newSecurityPolicy.id ? newSecurityPolicy.id : _dummy.policyPasswordHistoryDemo.id
    });
    callback == null ? void 0 : callback(policy);
    mockedActions.setSecurityPolicyPasswordHistoryState({
      policy,
      saving: false
    });
  };
  mockedActions.loadSecurityPolicyPasswordHistory = async () => {
    mockedActions.setSecurityPolicyPasswordHistoryState({
      loading: true,
      error: null
    });
    await (0, _helpers.delay)();
    mockedActions.setSecurityPolicyPasswordHistoryState({
      policy: _dummy.policyPasswordHistoryDemo,
      loading: false
    });
  };
  mockedActions.loadSecurityPolicyVendorPasswordHistory = async () => {
    mockedActions.setSecurityPolicyVendorPasswordHistoryState({
      loading: true,
      error: null
    });
    await (0, _helpers.delay)();
    mockedActions.setSecurityPolicyVendorPasswordHistoryState({
      policy: _dummy.policyPasswordHistoryDemo,
      loading: false
    });
  };
  return mockedActions;
};
exports.default = _default;