import { ContextOptions } from '@frontegg/rest-api';
import { FronteggActions, FronteggStateActions, FronteggStore, PartialFronteggState, RootState } from '../interfaces';
import { DeepPartial } from '../types';
import { AuthState } from '../auth';
export * from '../auth';
export * from '../interfaces';
export type StoreHolder = {
    store: FronteggStore;
    actions: FronteggActions;
    stateActions: FronteggStateActions;
};
export interface FronteggStoreOptions {
    /**
     * The context of the store
     */
    context: ContextOptions;
    /**
     * The name of the store
     */
    name?: string;
    /**
     * Override the initial state of the frontegg store
     */
    initialState?: PartialFronteggState;
    /**
     * Set the store holder for SSR
     * @default window
     */
    storeHolder?: any;
    /**
     * Weather to use hash or path for the url strategy
     */
    urlStrategy?: 'hash' | 'path';
    /**
     * Internal Usage
     * load Store with mock server
     */
    previewMode?: boolean;
    /**
     * Internal Usage
     * load Store as builder mode
     */
    builderMode?: boolean;
}
/**
 * @deprecated use createStore instead
 */
export declare const createFronteggStore: (rootInitialState: RootState, storeHolder?: any, previewMode?: boolean, authInitialState?: DeepPartial<AuthState>, overrideInitialState?: PartialFronteggState, builderMode?: boolean, urlStrategy?: "hash" | "path") => FronteggStore;
export declare const createStore: (options: FronteggStoreOptions) => FronteggStore;
