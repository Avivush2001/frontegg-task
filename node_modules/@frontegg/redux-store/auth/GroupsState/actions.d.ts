import { FronteggState, RestApi, SharedActions, WithRetryConfig } from '../../interfaces';
import { GroupsState, GroupsStateIndicator, IGroupsStateActionsPayloads } from './interfaces';
declare const _default: (store: FronteggState, api: RestApi, sharedActions: SharedActions) => {
    setUsersGroupsLoader: (payload: GroupsStateIndicator) => void;
    setUsersGroupsError: (payload: GroupsStateIndicator) => void;
    setGroupsState: (payload: Partial<GroupsState>) => void;
    resetUsersGroupsState: () => void;
    loadGroups: (payload?: WithRetryConfig<{}>) => Promise<void>;
    getGroupById: (payload: IGroupsStateActionsPayloads["getGroupById"]) => Promise<void>;
    createGroup: (payload: IGroupsStateActionsPayloads["createGroup"]) => Promise<void>;
    updateGroup: (payload: IGroupsStateActionsPayloads["updateGroup"]) => Promise<void>;
    deleteGroup: (payload: IGroupsStateActionsPayloads["deleteGroup"]) => Promise<void>;
    addRolesToGroup: (payload: IGroupsStateActionsPayloads["addRolesToGroup"]) => Promise<void>;
    deleteRolesFromGroup: (payload: IGroupsStateActionsPayloads["deleteRolesFromGroup"]) => Promise<void>;
    addUsersToGroup: (payload: IGroupsStateActionsPayloads["addUsersToGroup"]) => Promise<void>;
    deleteUsersFromGroup: (payload: IGroupsStateActionsPayloads["deleteUsersFromGroup"]) => Promise<void>;
    getGroupConfiguration: (payload?: WithRetryConfig<{}>) => Promise<void>;
    updateGroupConfiguration: (payload: IGroupsStateActionsPayloads["updateGroupConfiguration"]) => Promise<void>;
    getTeamUsers: (payload: IGroupsStateActionsPayloads["getTeamUsers"]) => Promise<void>;
};
export default _default;
