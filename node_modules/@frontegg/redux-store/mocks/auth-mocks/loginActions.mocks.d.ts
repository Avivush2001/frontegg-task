import { FronteggState, RestApi, SharedActions, WithCallback } from '../../interfaces';
declare const _default: (store: FronteggState, api: RestApi, sharedActions: SharedActions) => {
    preVerifyMFAWebAuthn: ({ callback, deviceId, ...payload }: WithCallback<import("../..").WithDeviceId<import("dist/@frontegg/rest-api").IPreVerifyMFA>, import("../..").IPreVerifyMFAWebAuthNForLoginResponse>, setLoadingAction: import("../..").SetLoadingAction) => Promise<void>;
    verifyMFAWebAuthn: ({ callback, deviceId, ...payload }: import("../..").IVerifyMFAWebAuthnPayload, setLoadingAction: import("../..").SetLoadingAction, isStepUp: boolean) => Promise<void>;
    preVerifyMFAWebAuthnForLogin: (payload: WithCallback<import("../..").WithDeviceId<import("dist/@frontegg/rest-api").IPreVerifyMFA>, import("../..").IPreVerifyMFAWebAuthNForLoginResponse>) => Promise<void>;
    verifyMFAWebAuthnForLogin: (payload: import("../..").IVerifyMFAWebAuthnPayload) => Promise<void>;
    preVerifyMFASMS: ({ callback, deviceId, ...payload }: WithCallback<import("../..").WithDeviceId<import("dist/@frontegg/rest-api").IPreVerifyMFA>>, setLoadingAction: import("../..").SetLoadingAction) => Promise<void>;
    verifyMFASMS: ({ callback, deviceId, ...payload }: WithCallback<import("../..").WithDeviceId<import("dist/@frontegg/rest-api").IVerifyMFASMS>>, setLoadingAction: import("../..").SetLoadingAction, isStepUp?: boolean) => Promise<void>;
    preVerifyMFASMSForLogin: (payload: WithCallback<import("../..").WithDeviceId<import("dist/@frontegg/rest-api").IPreVerifyMFA>>) => Promise<void>;
    verifyMFASMSForLogin: (payload: WithCallback<import("../..").WithDeviceId<import("dist/@frontegg/rest-api").IVerifyMFASMS>>) => Promise<void>;
    preVerifyMFAEmailCode: ({ callback, ...payload }: WithCallback<import("dist/@frontegg/rest-api").IPreVerifyMFA>, setLoadingAction?: import("../..").SetLoadingAction) => Promise<void>;
    verifyMFAEmailCode: ({ callback, ...payload }: WithCallback<import("dist/@frontegg/rest-api").IVerifyMFAEmailCode>, setLoadingAction?: import("../..").SetLoadingAction) => Promise<void>;
    preVerifyMFAEmailCodeForLogin: (payload: WithCallback<import("dist/@frontegg/rest-api").IPreVerifyMFA>) => Promise<void>;
    verifyMFAEmailCodeForLogin: (payload: WithCallback<import("dist/@frontegg/rest-api").IVerifyMFAEmailCode>) => Promise<void>;
    mfaWithAuthenticator: ({ callback, ...loginWithMfaPayload }: WithCallback<import("dist/@frontegg/rest-api").ILoginWithMfa>, setLoadingAction: import("../..").SetLoadingAction, isStepUp: boolean) => Promise<void>;
    loginWithMfa: (payload: WithCallback<import("dist/@frontegg/rest-api").ILoginWithMfa>) => Promise<void>;
    getMfaRequiredState: (user: import("../..").User | any, retryConfig?: import("../../interfaces").RetryConfig, shouldContinueWhenFailing?: boolean, emailFromSignup?: string) => Promise<Partial<import("../..").AuthState> & {
        mfaState: Partial<import("../..").MFAState>;
        loginState: Partial<import("../..").LoginState>;
    }>;
    postHandleVerifyMFAResponseForStepUp: () => Promise<void>;
    postHandleVerifyMFAResponseForLogin: (isAuthenticated: boolean, user: import("dist/@frontegg/rest-api").ILoginResponse) => Promise<void>;
    handleVerifyMFAResponse: (payload: import("dist/@frontegg/rest-api").ILoginResponseV3, isStepUp?: boolean) => Promise<void>;
    getFeatureFlags: (flags: string[]) => Promise<boolean[]>;
    afterAuthNavigationUtil: (resetStateAction: (() => void) | (() => Promise<void>), options?: import("../..").AfterAuthNavigationUtilOptions) => Promise<void>;
    afterAuthNavigation: (payload?: Pick<import("../..").AfterAuthNavigationUtilOptions, "preventRedirectUrlOriginCleaning">) => Promise<void>;
    afterStepUpAuthNavigation: () => Promise<void>;
    afterAuthenticationStateUpdate: ({ user, tenants, activeTenant }: import("dist/@frontegg/rest-api").ILoginResponseV3, additionalUpdate?: Partial<import("../..").AuthState>) => void;
    requestHostedLoginAuthorize: (additionalParams?: Record<string, string>) => Promise<void>;
    requestHostedLoginAuthorizeV2: (payload?: {
        additionalParams?: Record<string, string>;
        shouldRedirectToLogin?: boolean;
        firstTime?: boolean;
        loginDirectAction?: import("../..").LoginDirectAction;
    }) => Promise<void>;
    __requestHostedLoginAuthorize: (additionalParams?: Record<string, string>) => Promise<void>;
    __requestHostedLoginSilentAuthorize: () => Promise<void>;
    handleHostedLoginCallback: (payload: import("../..").HostedLoginCallback) => Promise<void>;
    setLoginState: (state: Partial<import("../..").LoginState>) => void;
    resetLoginState: () => void;
    requestAuthorize: (firstTime?: boolean) => Promise<void>;
    requestAuthorizeSSR: (payload: import("../..").FronteggNextJSSession) => Promise<void>;
    preLogin: (payload: WithCallback<import("dist/@frontegg/rest-api").IPreLogin & {
        recaptchaToken?: string;
        invitationToken?: string;
    }, void>) => Promise<void>;
    postLogin: (payload: import("dist/@frontegg/rest-api").IPostLogin) => Promise<void>;
    login: (payload: WithCallback<import("dist/@frontegg/rest-api").ILogin>) => Promise<void>;
    logout: (payload?: () => void) => Promise<void>;
    silentLogout: (payload?: WithCallback<{
        callbackTimeout?: number;
    }>) => Promise<void>;
    recoverMfa: (payload: import("../..").IRecoverMFATokenPayload) => Promise<void>;
    quickSmsPasswordlessPreLogin: (_payload: WithCallback<import("../..").IQuickSmsPasswordlessPreLoginPayload>) => Promise<void>;
    changePhoneNumberWithVerification: (_payload: WithCallback<import("dist/@frontegg/rest-api").IChangePhoneNumberWithVerification>) => Promise<void>;
    verifyChangePhoneNumber: (_payload: WithCallback<import("dist/@frontegg/rest-api").IVerifyChangePhoneNumber>) => Promise<void>;
    passwordlessPreLogin: (_payload: WithCallback<import("dist/@frontegg/rest-api").IPasswordlessPreLogin, void>) => Promise<void>;
    passwordlessPostLogin: (_payload: WithCallback<import("../..").IPasswordlessPostLoginPayload>) => Promise<void>;
    verifyInviteToken: (payload: import("dist/@frontegg/rest-api").IVerifyInviteToken) => Promise<void>;
    webAuthnPrelogin: (payload: WithCallback<import("dist/@frontegg/rest-api").IWebAuthnPreLogin, import("dist/@frontegg/rest-api").IWebAuthnPreLoginResponse | null>) => Promise<void>;
    webAuthnPostLogin: (payload: import("../..").IWebAuthnPostLoginPayload) => Promise<void>;
    webAuthnCreateNewDeviceSession: (payload: WithCallback<{}, import("dist/@frontegg/rest-api").ICreateNewDeviceSessionResponse | null>) => Promise<void>;
    webAuthnVerifyNewDeviceSession: (payload: import("../..").IVerifyNewWebAuthnDevicePayload) => Promise<void>;
    getUserIP: (payload: WithCallback<{}, import("../..").UserIPData | boolean>) => Promise<void>;
    preEnrollMFAWebAuthnForLogin: (_payload: WithCallback<import("dist/@frontegg/rest-api").IPreEnrollMFA, import("../..").IPreEnrollMFAWebAuthNForLoginResponse>) => Promise<void>;
    enrollMFAWebAuthnForLogin: (_payload: import("../..").IEnrollMFAWebAuthnPayload) => Promise<void>;
    enrollMFAAuthenticatorAppForLogin: (_payload: WithCallback<import("dist/@frontegg/rest-api").IEnrollMFAAuthenticatorApp>) => Promise<void>;
    preEnrollMFASMSForLogin: (_payload: WithCallback<import("dist/@frontegg/rest-api").IPreEnrollMFASMS>) => Promise<void>;
    enrollMFASMSForLogin: (_payload: WithCallback<import("dist/@frontegg/rest-api").IEnrollMFASMS>) => Promise<void>;
    handleEnrollMFAResponse: (payload: import("dist/@frontegg/rest-api").ILoginResponseV3) => Promise<void>;
    resetBreachedPassword: (payload: import("dist/@frontegg/rest-api").IForgotPassword) => Promise<void>;
    refreshTokenForSocialLogins: () => Promise<void>;
    __refreshToken: () => Promise<void>;
};
export default _default;
