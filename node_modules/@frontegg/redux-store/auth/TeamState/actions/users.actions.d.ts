import { IDeleteUser, ILoadUsers, ITeamUser, IUpdateUser, IUpdateUserExpiration } from '@frontegg/rest-api';
import { FronteggState, RestApi, SharedActions, WithCallback, WithRetryConfig, WithSilentLoad } from '../../../interfaces';
import { AddUserPayload, BulkInvintationData, IAddUsers, IGetUsersV2Payload, LoadRolesAndPermissionsPayload } from '../interfaces';
declare const _default: (store: FronteggState, api: RestApi, sharedActions: SharedActions) => {
    loadRoles: (payload?: WithRetryConfig<LoadRolesAndPermissionsPayload>) => Promise<void>;
    loadUsers: (payload: WithCallback<WithSilentLoad<ILoadUsers>, ITeamUser[]>) => Promise<void>;
    loadUsersV2: (payload: WithCallback<WithRetryConfig<WithSilentLoad<IGetUsersV2Payload>>, ITeamUser[]>) => Promise<void>;
    addUser: (payload: WithCallback<AddUserPayload, ITeamUser>) => Promise<void>;
    addUsersBulk: (payload: WithCallback<IAddUsers, BulkInvintationData>) => Promise<void>;
    updateUser: (payload: WithCallback<IUpdateUser, ITeamUser>) => Promise<void>;
    deleteUser: (payload: WithCallback<IDeleteUser>) => Promise<void>;
    enableUser: (payload: WithCallback<{
        userId: string;
    }>) => Promise<void>;
    disableUser: (payload: WithCallback<{
        userId: string;
    }>) => Promise<void>;
    getTemporaryUsersConfig: (payload?: WithRetryConfig<{}>) => Promise<void>;
    updateUserExpirationTime: (payload: WithCallback<IUpdateUserExpiration>) => Promise<void>;
    setUserAsPermanent: (payload: WithCallback<Pick<IUpdateUserExpiration, "userId">>) => Promise<void>;
};
export default _default;
