import { FronteggState, RestApi, SharedActions, WithCallback, WithRetryConfig } from '../../interfaces';
import { ApplicationsState, UserAppsAssignmentPayload } from './interfaces';
import { IApplicationsResponse, ITeamUser } from '@frontegg/rest-api';
declare const _default: (store: FronteggState, api: RestApi, sharedActions: SharedActions) => {
    setApplicationsState: (payload: Partial<ApplicationsState>) => void;
    resetApplicationsState: () => void;
    loadUserApplications: (payload?: WithRetryConfig<{}>) => Promise<void>;
    loadAccountApplications: (payload?: WithRetryConfig<{}>) => Promise<void>;
    loadMultipleUsersApplications: ({ userIds, retryConfig }: WithRetryConfig<{
        userIds: string[];
    }>) => Promise<Record<string, IApplicationsResponse[]> | undefined>;
    assignUserToApps: (payload: WithCallback<UserAppsAssignmentPayload>) => Promise<void>;
    unassignUserFromApps: (payload: WithCallback<UserAppsAssignmentPayload>) => Promise<void>;
    assignNewUserToApps: ({ appIds, user }: {
        appIds?: string[];
        user: ITeamUser;
    }) => Promise<((IApplicationsResponse & {
        userIds?: string[];
    }) | never[])[] | undefined>;
    mapUsersWithApplicationData: ({ shouldLoadApps, users, retryConfig, }: WithRetryConfig<{
        shouldLoadApps?: boolean;
        users: ITeamUser[];
    }>) => Promise<ITeamUser[]>;
};
export default _default;
