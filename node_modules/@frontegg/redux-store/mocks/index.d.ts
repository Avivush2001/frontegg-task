import { FronteggState, RestApi, SharedActions } from '../interfaces';
import { AuthState } from '../auth';
declare const buildMockActions: (store: FronteggState, api: RestApi, actions: SharedActions, snapshotAuthState: AuthState) => {
    authActions: import("../auth").AuthActions;
    authStateActions: import("../auth").AuthStateActions;
    connectivityActions: {
        setConnectivityState: (state: Partial<import("..").ConnectivityState>) => void;
        initData: () => void;
        resetConnectivityState: () => void;
        loadSlackActions: () => Promise<void>;
        loadSlackChannels: () => Promise<void>;
        loadDataAction: (_payload?: import("..").TPlatform[]) => Promise<void>;
        loadConnectivityChannels: (_payload?: import("..").TPlatform[]) => Promise<void>;
        postDataAction: (payload: import("../interfaces").WithCallback<import("..").TPostData>) => Promise<void>;
        postChannelData: (payload: import("../interfaces").WithCallback<import("..").TPostData>) => Promise<void>;
        postCodeAction: (payload: string) => Promise<void>;
        postSlackCode: (payload: string) => Promise<void>;
        loadScope: () => Promise<void>;
        loadSlackPermissions: () => Promise<void>;
        deleteWebhookConfigAction: (payload: import("../interfaces").WithCallback<{
            webhookId: string;
        }>) => Promise<void>;
        deleteWebhookConfig: (payload: import("../interfaces").WithCallback<{
            webhookId: string;
        }>) => Promise<void>;
        postWebhookTestAction: (payload: import("dist/@frontegg/rest-api").IWebhookTest) => Promise<void>;
        postWebhookTest: (payload: import("dist/@frontegg/rest-api").IWebhookTest) => Promise<void>;
        postWebhookRetryAction: (payload: string) => Promise<void>;
        postWebhookRetry: (payload: string) => Promise<void>;
        loadWebhookLogsAction: (payload: {
            id: string;
            offset: number;
            limit: number;
        }) => Promise<void>;
        loadWebhookLogs: (payload: {
            id: string;
            offset: number;
            limit: number;
        }) => Promise<void>;
        cleanWebhookTestData: () => void;
        cleanWebhookLogsData: () => Promise<void>;
        cleanWebhookTestMessage: (state: import("..").ConnectivityState) => Promise<void>;
        cleanError: () => Promise<void>;
        cleanSlackData: () => Promise<void>;
    };
    subscriptionsActions: import("..").SubscriptionsActions;
    subscriptionsStateActions: import("..").SubscriptionsStateActions;
    vendorActions: {
        setVendorState: (state: Partial<import("..").VendorState>) => void;
        resetVendorState: () => void;
        loadVendorPublicInfo: (payload?: import("../interfaces").WithRetryConfig<{}>) => Promise<void>;
        loadVendorPublicConfiguration: (payload?: import("../interfaces").WithRetryConfig<{}>) => Promise<void>;
    };
    auditsActions: {
        setAuditsMetadataState: (state: Partial<import("..").AuditsMetadataState>) => void;
        resetAuditsMetadataState: () => void;
        loadAuditsMetadata: (payload?: import("../interfaces").WithRetryConfig<{}>) => Promise<void>;
        setAuditLogsState: (state: Partial<import("..").AuditLogsState>) => void;
        resetAuditLogsState: () => void;
        exportAuditsCsv: () => Promise<void>;
        loadAuditLogs: (payload: import("../interfaces").WithRetryConfig<import("..").LoadAuditLogsPayload>) => Promise<void>;
    };
};
export default buildMockActions;
