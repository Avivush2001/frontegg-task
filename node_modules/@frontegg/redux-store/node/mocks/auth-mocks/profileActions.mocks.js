"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _ProfileState = require("../../auth/ProfileState");
var _helpers = require("../../helpers");
var _dummy = require("../dummy");
var _helpers2 = require("../helpers");
const _excluded = ["callback", "profilePictureUrl"];
var _default = (store, api, actions) => {
  const originalActions = (0, _ProfileState.buildProfileActions)(store, api, actions);
  const mockedActions = (0, _helpers2.mockActionsExpect)(originalActions, ['setProfileState', 'resetProfileState']);
  mockedActions.loadProfile = async () => {
    mockedActions.setProfileState({
      loading: true
    });
    await (0, _helpers.delay)();
    actions.setUser((0, _extends2.default)({}, _dummy.userDemo, _dummy.userProfileDemo));
    mockedActions.setProfileState({
      loading: false,
      profile: _dummy.userProfileDemo
    });
  };
  mockedActions.saveProfile = async _payload => {
    const {
        callback,
        profilePictureUrl
      } = _payload,
      payload = (0, _objectWithoutPropertiesLoose2.default)(_payload, _excluded);
    mockedActions.setProfileState({
      saving: true,
      error: null
    });
    const oldProfileData = _dummy.profileStateDemo;
    let newProfilePictureUrl = oldProfileData.profile.profilePictureUrl;
    if (profilePictureUrl !== oldProfileData.profile.profilePictureUrl && profilePictureUrl) {
      const matchResult = (profilePictureUrl || '').match(/^data:image\/([A-Za-z-+\/]+);base64,(.+)$/);
      if (matchResult) {
        newProfilePictureUrl = profilePictureUrl;
      }
    }
    const newProfileData = (0, _extends2.default)({}, oldProfileData.profile, payload, {
      profilePictureUrl: newProfilePictureUrl
    });
    const currentUser = _dummy.userDemo;
    await (0, _helpers.delay)();
    actions.setUser((0, _extends2.default)({}, currentUser, newProfileData));
    mockedActions.setProfileState({
      loading: false,
      error: null,
      saving: false,
      profile: newProfileData
    });
    callback == null ? void 0 : callback(newProfileData);
  };
  mockedActions.changePassword = async payload => {
    var _payload$callback;
    mockedActions.setProfileState({
      loading: true
    });
    await (0, _helpers.delay)();
    mockedActions.setProfileState({
      loading: false,
      error: undefined
    });
    (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, true);
  };
  mockedActions.updateEmail = async payload => {
    var _payload$callback2;
    mockedActions.setProfileState({
      saving: true,
      error: null,
      loading: true
    });
    await (0, _helpers.delay)();
    mockedActions.setProfileState({
      saving: false,
      error: null,
      loading: false
    });
    (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, true);
  };
  mockedActions.verifyEmail = async payload => {
    var _payload$callback3;
    mockedActions.setProfileState({
      saving: true,
      error: null,
      loading: true
    });
    await (0, _helpers.delay)();
    mockedActions.setProfileState({
      saving: false,
      error: null,
      loading: false
    });
    (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, true);
  };
  return mockedActions;
};
exports.default = _default;