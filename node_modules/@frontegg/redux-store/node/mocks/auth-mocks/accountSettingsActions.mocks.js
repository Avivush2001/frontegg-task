"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _AccountSettingsState = require("../../auth/AccountSettingsState");
var _helpers = require("../../helpers");
var _helpers2 = require("../helpers");
var _default = (store, api, actions) => {
  const originalActions = (0, _AccountSettingsState.buildAccountSettingsActions)(store, api, actions);
  const mockedActions = (0, _helpers2.mockActionsExpect)(originalActions, ['setAccountSettingsState', 'resetAccountSettingsState']);
  mockedActions.saveAccountSettings = async payload => {
    var _payload$callback;
    mockedActions.setAccountSettingsState({
      loading: true
    });
    await (0, _helpers.delay)();
    const accountSettingsState = store.auth.accountSettingsState;
    const {
      address,
      timezone,
      dateFormat,
      timeFormat,
      currency,
      logo
    } = accountSettingsState;
    const body = (0, _extends2.default)({
      address,
      timezone,
      dateFormat,
      timeFormat,
      currency,
      logo
    }, payload);
    mockedActions.setAccountSettingsState((0, _extends2.default)({}, body, {
      loading: false
    }));
    (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, body);
  };
  mockedActions.loadAccountSettings = async payload => {
    mockedActions.setAccountSettingsState({
      loading: !(payload != null && payload.silentLoading),
      error: null
    });
    await (0, _helpers.delay)();
    mockedActions.setAccountSettingsState((0, _extends2.default)({
      address: 'Tel-aviv',
      timezone: 'Asia/Jerusalem',
      dateFormat: 'DD/MM/YYYY',
      timeFormat: 'HH:mm',
      currency: 'USD',
      loading: false
    }, payload));
  };
  return mockedActions;
};
exports.default = _default;