import { IWebhookTest, IWebhooksSaveData, ISlackSubscription, IEmailSMSConfigResponse, IEmailSMSSubscriptionResponse, ISlackChannel, ISlackConfigurations, IWebhookLog, ICategory, IChannelsMap } from './interfaces';
import { BaseApiClient } from '../BaseApiClient';
export declare class ConnectivityApi extends BaseApiClient {
    constructor(appName: string);
    /** Get Slack configuration */
    getSlackConfiguration: () => Promise<ISlackConfigurations>;
    /** Get Slack scope */
    getSlackScope: () => Promise<unknown>;
    /** Get Slack channels */
    getSlackChannels: () => Promise<ISlackChannel[] | undefined>;
    /**
     * Post Slack configuration
     * @param data Slack subscription data
     */
    postSlackConfiguration: (data: ISlackSubscription) => Promise<any>;
    /**
     * Delete Slack configuration
     * @param data Required Slack subscription data
     */
    deleteSlackConfiguration: (data: Required<ISlackSubscription>) => Promise<unknown>;
    /**
     * Post Slack code
     * @param code Slack authorization code
     */
    postSlackCode: (code: string) => Promise<unknown>;
    /** Get email configuration */
    getEmailConfiguration: () => Promise<IEmailSMSConfigResponse[]>;
    /**
     * Post email configuration
     * @param data Email configuration data
     */
    postEmailConfiguration: ({ eventKey, ...data }: IEmailSMSConfigResponse) => Promise<null>;
    /**
     * Patch email configuration
     * @param enabled Email configuration enabled status
     * @param eventKey Email event key
     */
    patchEmailConfiguration: ({ eventKey, enabled, }: Pick<IEmailSMSConfigResponse, "eventKey" | "enabled">) => Promise<null>;
    /**
     * Delete email subscriptions
     * @param eventKey Email event key
     * @param subscriptionId Email subscription ID
     */
    deleteEmailSubscriptions: (eventKey: string, subscriptionId: string) => Promise<null>;
    /**
     * Put email subscriptions
     * @param subscriptionId Email subscription ID
     * @param eventKey Email event key
     * @param data Email subscription data
     */
    putEmailSubscriptions: (subscriptionId: string, eventKey: string, data: IEmailSMSSubscriptionResponse) => Promise<null>;
    /**
     * Delete email configuration
     * @param eventKey Email event key
     */
    deleteEmailConfiguration: (eventKey: string) => Promise<null>;
    /** Get SMS configuration */
    getSMSConfiguration: () => Promise<IEmailSMSConfigResponse[]>;
    /**
     * Post SMS configuration
     * @param data SMS configuration data
     */
    postSMSConfiguration: ({ eventKey, ...data }: IEmailSMSConfigResponse) => Promise<unknown>;
    /**
     * Patch SMS configuration
     * @param enabled SMS configuration enabled status
     * @param eventKey SMS event key
     */
    patchSMSConfiguration: ({ eventKey, enabled, }: Pick<IEmailSMSConfigResponse, "eventKey" | "enabled">) => Promise<null>;
    /**
     * Delete SMS subscriptions
     * @param eventKey SMS event key
     * @param subscriptionId SMS subscription ID
     */
    deleteSMSSubscriptions: (eventKey: string, subscriptionId: string) => Promise<null>;
    /**
     * Put SMS subscriptions
     * @param subscriptionId SMS subscription ID
     * @param eventKey SMS event key
     * @param data SMS subscription data
     */
    putSMSSubscriptions: (subscriptionId: string, eventKey: string, data: IEmailSMSSubscriptionResponse) => Promise<null>;
    /**
     * Delete SMS configuration
     * @param eventKey SMS event key
     */
    deleteSMSConfiguration: (eventKey: string) => Promise<null>;
    /** Get webhooks configurations */
    getWebhooksConfigurations: () => Promise<unknown>;
    /**
     * Post webhooks configuration
     * @param data Webhooks save data
     */
    postWebhooksConfiguration: (data: IWebhooksSaveData) => Promise<unknown>;
    /**
     * Delete webhooks configuration
     * @param id Webhook ID
     */
    deleteWebhooksConfiguration: (id: string) => Promise<null>;
    /**
     * Get webhook log
     * @param id Webhook ID
     * @param offset Pagination offset
     * @param limit Pagination limit
     */
    getWebhookLog: (id: string, offset?: number, limit?: number) => Promise<unknown>;
    /**
     * Post webhook test
     * @param data Webhook test data
     */
    postWebhookTest: (data: IWebhookTest) => Promise<IWebhookLog>;
    /**
     * Post webhook retry
     * @param id Webhook log ID
     */
    postWebhookRetry: (id: string) => Promise<IWebhookLog>;
    /** Get event categories */
    getCategories: () => Promise<ICategory[]>;
    /**
     * Get channel maps
     * @param channels Channel names
     */
    getChannelMaps: (channels: string) => Promise<IChannelsMap[]>;
}
declare const _default: ConnectivityApi;
export default _default;
