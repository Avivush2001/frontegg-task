import { CustomAttributes } from '@frontegg/entitlements-javascript-commons';
import { EntitledToOptions, Entitlement } from '@frontegg/redux-store';
/**
 @param key feature key
 @param customAttributes user attributes
 @returns if the user is entitled to the given feature and attributes. Attaching the justification if not
 */
export declare const useFeatureEntitlements: (key: string, customAttributes?: CustomAttributes) => Entitlement;
/**
 @param key permission key
 @param customAttributes user attributes
 @returns if the user is entitled to the given permission and attributes. Attaching the justification if not
 */
export declare const usePermissionEntitlements: (key: string, customAttributes?: CustomAttributes) => Entitlement;
/**
 @param options
 @param customAttributes user attributes
 @returns if the user is entitled to the given feature or permission and attributes (check only one). Attaching the justification if not
 */
export declare const useEntitlements: (options: EntitledToOptions, customAttributes?: CustomAttributes) => Entitlement;
/**
 @returns an action your can use to detect if the user is entitled to the given feature or permission (check only one).
  Attaching the justification if not
 */
export declare const useEntitlementsActions: () => {
    isEntitledTo: (options: EntitledToOptions, customAttributes?: CustomAttributes) => Entitlement;
};
/**
 @returns if the option to use entitlements is enabled
 */
export declare const useEntitlementsOptions: () => {
    isEntitlementsEnabled: boolean;
    isEntitledTo: (options: EntitledToOptions, customAttributes?: CustomAttributes) => Entitlement;
    verifyIsEntitledFF: boolean;
};
