type AnyFunction = (...args: any[]) => any;
type OpValue = unknown;
type OpPrevValue = unknown;
type OpError = unknown;
type Path = (string | symbol)[];
type Op = ['set', Path, OpValue, OpPrevValue] | ['delete', Path, OpPrevValue] | ['resolve', Path, OpValue] | ['reject', Path, OpError];
type Listener = (op: Op, nextVersion: number) => void;
type Primitive = string | number | boolean | null | undefined | symbol | bigint;
type AwaitedPolyfill<T> = T extends PromiseLike<infer U> ? U : T;
type SnapshotIgnore = Date | Map<any, any> | Set<any> | WeakMap<any, any> | WeakSet<any> | Error | RegExp | AnyFunction | Primitive;
type Snapshot<T> = T extends {
    $$valtioSnapshot: infer S;
} ? S : T extends SnapshotIgnore ? T : T extends Promise<unknown> ? AwaitedPolyfill<T> : T extends object ? {
    readonly [K in keyof T]: Snapshot<T[K]>;
} : T;
/**
 * This is not a public API.
 * It can be changed without any notice.
 */
export type INTERNAL_Snapshot<T> = Snapshot<T>;
type HandlePromise = <P extends Promise<any>>(promise: P) => AwaitedPolyfill<P>;
type CreateSnapshot = <T extends object>(target: T, version: number, handlePromise?: HandlePromise) => T;
type RemoveListener = () => void;
type AddListener = (listener: Listener) => RemoveListener;
type ProxyStateTarget = object;
type ProxyStateEnsureVersion = (nextCheckVersion?: number) => number;
type ProxyStateCreateSnapshot = CreateSnapshot;
type ProxyStateAddListener = AddListener;
type ProxyState = readonly [ProxyStateTarget, ProxyStateEnsureVersion, ProxyStateCreateSnapshot, ProxyStateAddListener];
declare function buildProxyFunction(objectIs?: (value1: any, value2: any) => boolean, newProxy?: <T extends object>(target: T, handler: ProxyHandler<T>) => T, canProxy?: (x: unknown) => boolean, defaultHandlePromise?: <P extends Promise<any>>(promise: P & {
    status?: "pending" | "fulfilled" | "rejected";
    value?: AwaitedPolyfill<P>;
    reason?: unknown;
}) => AwaitedPolyfill<P>, snapCache?: WeakMap<object, [number, unknown]>, createSnapshot?: <T extends object>(target: T, version: number, handlePromise?: HandlePromise) => T, proxyCache?: WeakMap<object, object>, versionHolder?: [number, number], proxyFunction?: <T extends object>(initialObject: T) => T): readonly [<T extends object>(initialObject: T) => T, WeakMap<object, ProxyState>, WeakSet<object>, (value1: any, value2: any) => boolean, <T extends object>(target: T, handler: ProxyHandler<T>) => T, (x: unknown) => boolean, <P extends Promise<any>>(promise: P & {
    status?: "pending" | "fulfilled" | "rejected";
    value?: AwaitedPolyfill<P>;
    reason?: unknown;
}) => AwaitedPolyfill<P>, WeakMap<object, [number, unknown]>, <T extends object>(target: T, version: number, handlePromise?: HandlePromise) => T, WeakMap<object, object>, [number, number]];
export declare function proxy<T extends object>(initialObject?: T): T;
export declare function getVersion(proxyObject: unknown): number | undefined;
export declare function subscribe<T extends object>(proxyObject: T, callback: (ops: Op[]) => void, notifyInSync?: boolean): () => void;
export declare function snapshot<T extends object>(proxyObject: T, handlePromise?: HandlePromise): Snapshot<T>;
export declare function ref<T extends object>(obj: T): T & {
    $$valtioSnapshot: T;
};
export declare const unstable_buildProxyFunction: typeof buildProxyFunction;
export {};
