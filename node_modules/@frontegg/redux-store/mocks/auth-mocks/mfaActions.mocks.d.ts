import { FronteggState, RestApi, SharedActions, WithCallback } from '../../interfaces';
import { IUserEnrollMFASMSPayload, IUserPreEnrollMFASMSPayload, MFAState, WithDeviceId } from '../../auth';
import type { IDisableMfa, ILoginWithMfa, IVerifyMfa } from '@frontegg/rest-api';
declare const _default: (store: FronteggState, api: RestApi, sharedActions: SharedActions) => {
    setMfaState: (state: Partial<MFAState>) => void;
    resetMfaState: () => void;
    getMFADevices: () => Promise<void>;
    getMFAStrategies: (payload?: import("../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    enrollMfa: () => Promise<void>;
    verifyMfa: (_payload: WithCallback<IVerifyMfa, string | undefined>) => Promise<void>;
    verifyMfaAfterForce: (_payload: WithCallback<ILoginWithMfa, string | undefined>) => Promise<void>;
    disableMfa: (payload: WithCallback<IDisableMfa>) => Promise<void>;
    preDisableMfaSms: (_payload: WithCallback<WithDeviceId<{}>>) => Promise<void>;
    disableMfaSms: (_payload: WithCallback<WithDeviceId<import("@frontegg/rest-api").IDisableMFASMS>>) => Promise<void>;
    preEnrollMfaSms: (payload: IUserPreEnrollMFASMSPayload) => Promise<void>;
    enrollMfaSms: (_payload: IUserEnrollMFASMSPayload) => Promise<void>;
    preEnrollMfaWebAuthn: (payload: WithCallback<{}, import("../../auth").IPreEnrollMFAWebAuthNForLoginResponse>) => Promise<void>;
    enrollMfaWebAuthn: (_payload: import("../../auth").IUserEnrollMFAWebAuthnPayload) => Promise<void>;
    preDisableMfaWebAuthn: (_payload: WithCallback<WithDeviceId<{}>, import("../../auth").IPreVerifyMFAWebAuthNForLoginResponse>) => Promise<void>;
    disableMfaWebAuthn: (_payload: import("../../auth").IDisableMFAWebAuthnPayload) => Promise<void>;
    __getMfaStateAfterEnroll: (res: import("@frontegg/rest-api").IVerifyMfaResponse) => Promise<MFAState>;
};
export default _default;
