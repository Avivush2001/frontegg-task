import { FronteggState, RestApi, SharedActions } from '../../interfaces';
declare const _default: (store: FronteggState, api: RestApi, actions: SharedActions) => {
    setProvisioningState: (state: Partial<import("../..").ProvisioningState>) => void;
    resetProvisioningState: () => void;
    __loadCountForConnection: (connection: import("dist/@frontegg/rest-api").Scim2ConnectionConfigResponse, retryConfig?: import("../../interfaces").RetryConfig) => Promise<{
        count: number;
        id: string;
        connectionName: string;
        source: import("dist/@frontegg/rest-api").ScimConnectionSource;
        syncToUserManagement: boolean;
        createdAt: Date;
        lastSync?: Date | null;
    }>;
    loadProvisionConnections: (payload?: import("../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    createProvisionConnection: (payload: import("../../interfaces").WithCallback<import("dist/@frontegg/rest-api").Scim2CreateConnectionConfigRequest, import("dist/@frontegg/rest-api").Scim2CreateConnectionConfigResponse>) => Promise<void>;
    deleteProvisionConnection: (payload: import("../../interfaces").WithCallback<import("../../interfaces").WithId & {
        deleteAll: boolean;
    }>) => Promise<void>;
    updateProvisionConnection: (payload: import("../../interfaces").WithId<import("dist/@frontegg/rest-api").Scim2PatchConnectionConfigRequest>) => Promise<void>;
};
export default _default;
