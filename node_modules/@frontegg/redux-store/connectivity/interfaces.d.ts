import { ICategory, IChannelsMap, ISlackChannel, ISlackConfigurations, IWebhookLogsResponse, IWebhooksConfigurations, IEmailSMSConfigResponse, ISlackEvent, IEmailSMSSubscriptionResponse, IWebhooksSaveData, FronteggApiError } from '@frontegg/rest-api';
export type TPlatform = 'slack' | 'email' | 'sms' | 'webhook';
export type TWebhookStatus = 'success' | 'failed' | undefined;
export type TWebhookImage = 'sms' | 'email' | 'slack' | 'webhook';
export interface IConnectivityComponent {
    onClose?(): void;
}
export interface ConnectivityState {
    isLoading: boolean;
    isSaving: boolean;
    isTesting?: boolean;
    list: IConnectivityData[];
    sms?: IEmailSMSConfigResponse[];
    email?: IEmailSMSConfigResponse[];
    slack?: ISlackConfigurations;
    webhook?: IWebhooksConfigurations[];
    categories?: ICategory[];
    channelMap?: Record<TPlatform, IChannelsMap[]>;
    error?: FronteggApiError;
    processIds: string[];
    slackChannels: {
        error?: FronteggApiError;
        isLoading: boolean;
        isLoadingScope?: boolean;
        data?: ISlackChannel[];
        clientId?: string;
    };
    testResult?: IWebhookTestResult;
    retryResult?: IWebhookRetryResult;
    webhookLogs?: IWebhookLogs;
    totalPages?: number;
}
export interface ConnectivityData {
    id: number;
    platform: string;
    key: TPlatform;
    active: boolean;
    events: number;
    image: TWebhookImage;
}
/** @deprecated Use ConnectivityState instead */
export type IConnectivityState = ConnectivityState;
/** @deprecated Use ConnectivityState instead */
export type IConnectivityData = ConnectivityData;
export interface IRootPath {
    rootPath?: string;
}
export type TBaseWebhookResult = {
    status: TWebhookStatus;
};
export type IWebhookTestResult = {
    status: 'failed';
    message?: FronteggApiError;
} | {
    status: 'success';
    message?: string;
} | {
    status: undefined;
};
export interface IWebhookRetryResult {
    [k: string]: {
        isProcess: boolean;
        success: boolean;
    };
}
export interface IWebhookLogs extends Partial<IWebhookLogsResponse> {
    isLoading: boolean;
}
export interface ISlackTableData {
    id: string;
    name: string;
    index: number;
    events: ISlackEventData[];
}
export interface ISlackEventData {
    eventId: string;
    id?: string;
    isActive: boolean;
    slackEvents?: Partial<ISlackEvent>[];
    displayName: string;
}
export interface IFormikEditComponent {
    eventIdx: number;
    dataIdx: number;
}
export interface ITableFormData {
    id: string;
    name: string;
    index: number;
    events: IEventFormData[];
}
export interface IEventFormData {
    displayName: string;
    id: string;
    enabled: boolean;
    eventKey: string;
    recipients: string[];
    subscriptions: Pick<IEmailSMSSubscriptionResponse, 'id' | 'name'>;
}
export type TPostData = {
    platform: 'sms' | 'email';
    data: IEmailSMSConfigResponse[];
} | {
    platform: 'slack';
    data: ISlackConfigurations;
} | {
    platform: 'webhook';
    data: IWebhooksSaveData;
};
export type TPostDataSuccess = {
    platform: 'sms' | 'email';
    data?: IEmailSMSConfigResponse[];
    id?: string;
} | {
    platform: 'slack';
    data?: ISlackConfigurations;
    id?: string;
} | {
    platform: 'webhook';
    data?: IWebhooksSaveData[];
    id?: string;
};
