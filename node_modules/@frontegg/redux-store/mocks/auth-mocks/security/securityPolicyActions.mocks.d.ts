import { FronteggState, RestApi, SharedActions } from '../../../interfaces';
import { SaveSecurityPolicyLockoutPayload, SaveSecurityPolicyMfaPayload, SaveSecurityPolicyPasswordHistoryPayload } from '../../../auth';
declare const _default: (store: FronteggState, api: RestApi, actions: SharedActions) => {
    setSecurityPolicyState: (state: Partial<import("../../../auth").SecurityPolicyState>) => void;
    setSecurityPolicyGlobalState: (state: Partial<import("../../../auth").GlobalPolicyState>) => void;
    setSecurityPolicyPublicState: (state: Partial<import("../../../auth").PublicPolicyState>) => void;
    setSecurityPolicyMfaState: (state: Partial<import("../../../auth").MfaPolicyState>) => void;
    setSecurityPolicyVendorMfaState: (state: Partial<import("../../../auth").MfaPolicyState>) => void;
    setSecurityPolicyLockoutState: (state: Partial<import("../../../auth").LockoutPolicyState>) => void;
    setSecurityPolicyVendorLockoutState: (state: Partial<import("../../../auth").LockoutPolicyState>) => void;
    setSecurityPolicyCaptchaState: (state: Partial<import("../../../auth").CaptchaPolicyState>) => void;
    setSecurityPolicyPasswordHistoryState: (state: Partial<import("../../../auth").PasswordHistoryPolicyState>) => void;
    setSecurityPolicyVendorPasswordHistoryState: (state: Partial<import("../../../auth").PasswordHistoryPolicyState>) => void;
    setSecurityPolicyPasswordRotationState: (state: Partial<import("../../../auth").PasswordRotationPolicyState>) => void;
    resetSecurityPolicyState: () => void;
    setSecurityPolicyPasswordState: (state: Partial<import("../../../auth").PasswordPolicyState>) => void;
    setSecurityPolicyAuthStrategyPublicState: (state: Partial<import("../../../auth").PublicAuthStrategyPolicyState>) => void;
    loadSecurityPolicy: (payload?: import("../../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    loadGlobalSecurityPolicy: (payload?: import("../../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    loadPublicSecurityPolicy: (payload?: import("../../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    loadVendorPasswordConfig: (payload?: import("../../../interfaces").WithCallback<import("../../../interfaces").WithRetryConfig<{}>, Partial<import("@frontegg/rest-api").TestConfig>>) => Promise<void>;
    loadSecurityPolicyMfa: (payload?: import("../../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    loadSecurityPolicyVendorMfa: (payload?: import("../../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    loadSecurityPolicyLockout: (payload?: import("../../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    loadSecurityPolicyVendorLockout: (payload?: import("../../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    loadSecurityPolicyCaptcha: (payload?: import("../../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    loadSecurityPolicyPasswordHistory: () => Promise<void>;
    loadSecurityPolicyVendorPasswordHistory: (payload?: import("../../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    loadSecurityPolicyPasswordRotation: () => Promise<void>;
    loadPublicAuthStrategiesPolicy: (payload?: import("../../../interfaces").WithCallback<import("../../../interfaces").WithRetryConfig<{}>, import("@frontegg/rest-api").IAuthStrategiesConfig>) => Promise<void>;
    saveSecurityPolicyMfa: (payload: SaveSecurityPolicyMfaPayload) => Promise<void>;
    saveSecurityPolicyLockout: (payload: SaveSecurityPolicyLockoutPayload) => Promise<void>;
    saveSecurityPolicyPasswordHistory: (payload: SaveSecurityPolicyPasswordHistoryPayload) => Promise<void>;
    saveSecurityPolicyPasswordRotation: (payload: import("../../../auth").SaveSecurityPolicyPasswordRotationPayload) => Promise<void>;
    __getSecurityPolicyPublicStateWithCustomLogin: (securityPolicyPublicState?: import("@frontegg/rest-api").IVendorConfig, retryConfig?: import("../../../interfaces").RetryConfig) => Promise<import("@frontegg/rest-api").IVendorConfig | undefined>;
};
export default _default;
