"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _helpers = require("../helpers");
var _interfaces = require("../interfaces");
var _interfaces2 = require("../../MfaState/interfaces");
var _helpers2 = require("../../../helpers");
var _default = (store, api, _sharedActions) => {
  const getMfaRequiredState = async (user, retryConfig, shouldContinueWhenFailing = false, emailFromSignup) => {
    var _user$mfaDevices, _user$mfaDevices$emai, _user$userEmail;
    let step = _interfaces.LoginStep.loginWithTwoFactor;
    const mfaState = {
      step: _interfaces2.MFAStep.verify,
      loading: false,
      saving: false
    };
    const loginState = store.auth.loginState;
    let isAllowedToRemember;
    let mfaDeviceExpiration;
    try {
      const response = await (0, _helpers2.retryIfNeeded)(() => api.auth.checkIfAllowToRememberMfaDevice(user.mfaToken), retryConfig);
      isAllowedToRemember = response.isAllowedToRemember;
      mfaDeviceExpiration = response.mfaDeviceExpiration;
    } catch (e) {
      if (!shouldContinueWhenFailing) {
        throw e;
      }
    }
    const isEnrolled = !('mfaEnrolled' in user && !user.mfaEnrolled) || ((_user$mfaDevices = user.mfaDevices) == null ? void 0 : (_user$mfaDevices$emai = _user$mfaDevices.emails) == null ? void 0 : _user$mfaDevices$emai.length);
    if (isEnrolled) {
      Object.assign(mfaState, {
        mfaDevices: user.mfaDevices,
        mfaToken: user.mfaToken,
        step: (0, _helpers.getMfaStepForEnrolledUsers)(user.mfaDevices)
      });
    } else {
      Object.assign(mfaState, {
        step: (0, _helpers.getMfaStepForNotEnrolledUsers)(user.mfaStrategies),
        qrCode: user.qrCode,
        recoveryCode: user.recoveryCode,
        loading: false,
        mfaToken: user.mfaToken,
        mfaStrategies: user.mfaStrategies
      });
      step = _interfaces.LoginStep.forceTwoFactor;
    }
    let quickLoginState = {};
    const quickLoginToRegister = localStorage.getItem('register-quick-login');
    if (quickLoginToRegister) {
      quickLoginState = {
        quickLoginToRegister,
        flow: _interfaces.LoginFlow.RegisterQuickLogin
      };
    }
    return {
      user: undefined,
      isAuthenticated: false,
      mfaState,
      loginState: (0, _extends2.default)({}, loginState, quickLoginState, {
        mfaToken: user.mfaToken,
        mfaRequired: user.mfaRequired,
        loading: false,
        error: undefined,
        step,
        tenantsLoading: true,
        email: (_user$userEmail = user.userEmail) != null ? _user$userEmail : emailFromSignup,
        tenants: [],
        allowRememberMfaDevice: isAllowedToRemember,
        mfaDeviceExpiration,
        isBreachedPassword: user.isBreachedPassword
      })
    };
  };
  return {
    getMfaRequiredState
  };
};
exports.default = _default;