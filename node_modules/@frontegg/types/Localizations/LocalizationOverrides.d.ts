import { Localization, ValidationLocalization } from './LocalizationType';
import { LoginBoxLocalization } from './LoginBoxLocalization';
import { AdminPortalLocalization } from './AdminPortalLocalizations';
export type DeepPartial<T> = T extends string ? T : T extends Record<string, any> ? {
    [P in keyof T]?: DeepPartial<T[P]>;
} : T;
type Languages = 'en' | 'he';
export type LocalizationsOverrides = DeepPartial<{
    [k in Languages]: LocalizationOverrides;
}> & {
    defaultLanguage?: Languages;
    autoTranslate?: {
        enabled?: boolean;
    };
};
export type ValidationLocalizationOverrides = Partial<ValidationLocalization>;
export type LoginBoxLocalizationOverrides = Partial<{
    [key in keyof LoginBoxLocalization]: Partial<LoginBoxLocalization[key]>;
}>;
export type AdminPortalLocalizationOverrides = Partial<{
    [key in keyof AdminPortalLocalization]: Partial<AdminPortalLocalization[key]>;
}>;
export interface LocalizationOverrides {
    validations?: ValidationLocalizationOverrides;
    loginBox?: LoginBoxLocalizationOverrides;
    adminPortal?: AdminPortalLocalizationOverrides;
    errors?: Partial<Localization['errors']>;
    custom?: Record<string, string>;
}
export {};
