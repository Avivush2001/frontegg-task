import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { Metadata } from '@frontegg/types';
import deepMerge from 'deepmerge';
import { retryIfNeeded } from '@frontegg/redux-store';

/**
 * To prevent XSS attack, this function check for gtm key validity
 * XSS attack may happen if values are injected by postman because we don't have validity check in the BE
 *
 * @param key gtm key
 * @returns true if gtm key is valid: starts with GTM- and contains letters and digits only
 */
var isValidGTMKey = function isValidGTMKey(key) {
  return /^GTM-[a-zA-Z0-9]+$/.test(key);
};

/**
 * load gtm scripts by using metadata gtm keys
 * @param fronteggAppName
 */
export var loadGTM = function loadGTM(fronteggAppName) {
  var _metadata$integration;
  var metadata = Metadata.getInstance(fronteggAppName);
  var gtmKeysConfig = metadata == null ? void 0 : (_metadata$integration = metadata.integrations) == null ? void 0 : _metadata$integration.gtm;
  gtmKeysConfig == null ? void 0 : gtmKeysConfig.filter(function (_ref) {
    var id = _ref.id,
      enabled = _ref.enabled;
    return enabled && isValidGTMKey(id);
  }).forEach(function (_ref2) {
    var id = _ref2.id;
    // Load GTM container script dynamically
    var script = document.createElement('script');
    script.innerHTML = "\n        (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n        new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n        j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n        'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n        })(window,document,'script','dataLayer','".concat(id, "');\n      ");
    document.body.appendChild(script);
  });
};

/**
 * @param metadata {FronteggMetadata}
 * this function will get metadata overrides from the metadataOverrides.url and will return a new object with override of old metadata
 * @param fetchClient
 */
export var getOverriddenMetadata = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(metadata, fetchClient, retryConfig) {
    var _metadata$metadataOve;
    var overrideUrl, overrideData, overriddenMetadata;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          overrideUrl = (_metadata$metadataOve = metadata.metadataOverrides) == null ? void 0 : _metadata$metadataOve.url;
          if (overrideUrl) {
            _context.next = 3;
            break;
          }
          return _context.abrupt("return", metadata);
        case 3:
          _context.prev = 3;
          _context.next = 6;
          return retryIfNeeded(function () {
            return fetchClient.sendRequest({
              url: overrideUrl,
              method: 'GET',
              credentials: 'omit'
            });
          }, retryConfig);
        case 6:
          overrideData = _context.sent;
          if (!overrideData) {
            _context.next = 10;
            break;
          }
          overriddenMetadata = deepMerge(metadata, overrideData);
          return _context.abrupt("return", overriddenMetadata);
        case 10:
          _context.next = 15;
          break;
        case 12:
          _context.prev = 12;
          _context.t0 = _context["catch"](3);
          console.error('Failed to get metadata overrides', _context.t0);
        case 15:
          return _context.abrupt("return", metadata);
        case 16:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[3, 12]]);
  }));
  return function getOverriddenMetadata(_x, _x2, _x3) {
    return _ref3.apply(this, arguments);
  };
}();