import { BaseApiClient } from '../../BaseApiClient';
import { FronteggPaginationResult } from '../../interfaces';
import { BulkCreateIpRestriction, CreateDomainRestriction, CreateIpRestriction, DomainRestriction, DomainRestrictionConfig, GetIPRestrictionsParams, IpRestriction, IPRestrictionsConfig, IPValidResponse, ISaveSecurityPolicyLockout, ISaveSecurityPolicyMfa, ISaveSecurityPolicyPasswordHistory, ISecurityPolicy, ISecurityPolicyCaptcha, ISecurityPolicyLockout, ISecurityPolicyMfa, ISecurityPolicyPasswordConfig, ISecurityPolicyPasswordHistory, ISecurityPolicyPasswordRotationConfig, UpdateDomainRestrictionsConfig } from './interfaces';
export declare class SecurityPolicyApi extends BaseApiClient {
    constructor(appName: string);
    /** Get global secure access configuration */
    getGlobalSecurityPolicy: () => Promise<ISecurityPolicy>;
    /** Get Mfa configuration from security policy */
    getMfaPolicy: () => Promise<ISecurityPolicyMfa>;
    /** Get Vendor Mfa configuration from security policy */
    getVendorMfaPolicy: () => Promise<ISecurityPolicyMfa>;
    /** Create/Update Mfa configuration from security policy */
    saveMfaPolicy: (body: ISaveSecurityPolicyMfa) => Promise<ISecurityPolicyMfa>;
    /** Get Lockout configuration from security policy */
    getLockoutPolicy: () => Promise<ISecurityPolicyLockout>;
    /** Get Vendor Lockout configuration from security policy */
    getVendorLockoutPolicy: () => Promise<ISecurityPolicyLockout>;
    /** Create/Update Lockout configuration from security policy */
    saveLockoutPolicy: (body: ISaveSecurityPolicyLockout) => Promise<ISecurityPolicyLockout>;
    /** Get Captcha configuration from security policy */
    getCaptchaPolicy: () => Promise<ISecurityPolicyCaptcha | null>;
    /** Get Password History configuration from security policy */
    getPasswordHistoryPolicy: () => Promise<ISecurityPolicyPasswordHistory>;
    /** Get Vendor Password History configuration from security policy */
    getVendorPasswordHistoryPolicy: () => Promise<ISecurityPolicyPasswordHistory>;
    /** Create/Update Password History configuration from security policy */
    savePasswordHistoryPolicy: (body: ISaveSecurityPolicyPasswordHistory) => Promise<ISecurityPolicyPasswordHistory>;
    /** Get Password Rotation configuration from security policy */
    getPasswordRotationPolicy: () => Promise<ISecurityPolicyPasswordRotationConfig>;
    /** Get Vendor Password Rotation configuration from security policy */
    getVendorPasswordRotationPolicy: () => Promise<ISecurityPolicyPasswordRotationConfig>;
    /** Create/Update Password Rotation configuration from security policy */
    savePasswordRotationPolicy: (body: ISecurityPolicyPasswordRotationConfig) => Promise<ISecurityPolicyPasswordRotationConfig>;
    /** Load vendor password configuration */
    getPasswordConfigPolicy: () => Promise<ISecurityPolicyPasswordConfig>;
    /** Get domain restrictions for tenant */
    getDomainRestrictions: () => Promise<{
        items: DomainRestriction[];
    }>;
    /** Get domain restrictions config for tenant */
    getDomainRestrictionsConfig: () => Promise<DomainRestrictionConfig>;
    /** Create domain restriction for tenant */
    createDomainRestriction: (body: CreateDomainRestriction) => Promise<DomainRestriction>;
    /** Update domain restrictions config for tenant */
    updateDomainRestrictionConfig: (body: UpdateDomainRestrictionsConfig) => Promise<DomainRestrictionConfig>;
    /** Delete domain restriction for tenant by id */
    deleteDomainRestriction: (id: string) => Promise<void>;
    /** Get IP restrictions for tenant */
    getIPRestrictions: (params: GetIPRestrictionsParams) => Promise<FronteggPaginationResult<IpRestriction[]>>;
    /** Get IP restrictions config for tenant */
    getIPRestrictionsConfig: () => Promise<IPRestrictionsConfig>;
    /** Create IP restriction for tenant */
    createIPRestriction: (body: CreateIpRestriction) => Promise<void>;
    /** Create bulk IP restrictions for tenant */
    bulkCreateIPRestriction: (body: BulkCreateIpRestriction) => Promise<void>;
    /** Update IP restrictions config for tenant */
    updateIPRestrictionConfig: (body: IPRestrictionsConfig) => Promise<void>;
    /** Delete IP restriction for tenant by id */
    deleteIPRestriction: (id: string) => Promise<void>;
    /** Test current user IP restriction */
    testCurrentIp: () => Promise<IPValidResponse>;
    /** Test current user IP restriction is in allow list */
    testCurrentIpInAllowList: () => Promise<IPValidResponse>;
}
declare const _default: SecurityPolicyApi;
export default _default;
