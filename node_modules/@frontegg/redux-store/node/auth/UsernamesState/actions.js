"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _helpers = require("../../helpers");
var _state = require("./state");
var _default = (store, api, sharedActions) => {
  const setUsernamesState = state => {
    Object.assign(store.auth.usernamesState, state);
  };
  const resetUsernamesState = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'usernamesState'], _state.initialState);
  };
  const loadUserOwnUsername = async () => {
    setUsernamesState({
      loading: true
    });
    try {
      const response = await api.usernames.getUserOwnUsername();
      setUsernamesState({
        username: response == null ? void 0 : response.username,
        loading: false,
        fetching: false
      });
    } catch (e) {
      setUsernamesState({
        error: (0, _helpers.errorHandler)(e),
        fetching: false
      });
    } finally {
      setUsernamesState({
        loading: false,
        fetching: false
      });
    }
  };
  const saveUserUsername = async payload => {
    setUsernamesState({
      loading: true
    });
    try {
      if (store.auth.usernamesState.username === payload.username) {
        var _payload$callback;
        (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload);
        return;
      }
      if (store.auth.usernamesState.username && store.auth.usernamesState.username !== payload.username) {
        await deleteUserUsername(store.auth.usernamesState.username);
        if (!payload.username) {
          var _payload$callback2;
          setUsernamesState({
            username: undefined,
            loading: false
          });
          (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload);
          return;
        }
      }
      if (!!payload.username) {
        var _payload$callback3;
        await api.usernames.createUsername(payload);
        setUsernamesState({
          username: payload.username,
          loading: false
        });
        (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload);
      }
    } catch (e) {
      setUsernamesState({
        error: (0, _helpers.errorHandler)(e)
      });
    } finally {
      setUsernamesState({
        loading: false
      });
    }
  };
  const deleteUserUsername = async username => {
    setUsernamesState({
      loading: true
    });
    try {
      await api.usernames.deleteUsername(username);
      setUsernamesState({
        username: undefined,
        loading: false
      });
    } catch (e) {
      setUsernamesState({
        error: (0, _helpers.errorHandler)(e)
      });
    } finally {
      setUsernamesState({
        loading: false
      });
    }
  };
  return {
    resetUsernamesState,
    loadUserOwnUsername,
    saveUserUsername,
    deleteUserUsername
  };
};
exports.default = _default;