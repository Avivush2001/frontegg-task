import { FronteggState, RestApi, SharedActions, WithCallback } from '../../../interfaces';
import { CreateIpRestriction, IPRestrictionsConfig } from '@frontegg/rest-api';
import { SaveEmailDomainRestrictionConfigPayload, SaveEmailDomainRestrictionsPayload } from '../../../auth';
declare const _default: (store: FronteggState, api: RestApi, actions: SharedActions) => {
    setRestrictionsState: (state: Partial<import("../../../auth").RestrictionsState>) => void;
    setIpRestrictionsState: (state: Partial<import("../../../auth").IPRestrictionsState>) => void;
    setEmailDomainRestrictionsState: (state: Partial<import("../../../auth").EmailDomainRestrictionsState>) => void;
    __securityCenterSagaWrapper: <T>(action: T) => T;
    loadIpRestrictions: () => Promise<void>;
    saveIpRestriction: (payload: WithCallback<CreateIpRestriction>) => Promise<void>;
    saveIpRestrictionsConfig: (payload: WithCallback<IPRestrictionsConfig>) => Promise<void>;
    deleteIpRestriction: (payload: WithCallback<{
        id: string;
    }>) => Promise<void>;
    checkIfUserIpValid: () => Promise<void>;
    addCurrentUserIpAndActivate: (payload: WithCallback) => Promise<void>;
    loadEmailDomainRestrictions: () => Promise<void>;
    saveEmailDomainRestriction: (payload: SaveEmailDomainRestrictionsPayload) => Promise<void>;
    saveEmailDomainRestrictionsConfig: (payload: SaveEmailDomainRestrictionConfigPayload) => Promise<void>;
    deleteEmailDomainRestriction: (payload: {
        id: string;
    }) => Promise<void>;
};
export default _default;
