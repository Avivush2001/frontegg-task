import { AuthStrategyEnum, EIdentifierType, MachineToMachineAuthStrategy, SocialLoginProviders } from './auth';
import { ISubscriptionCancellationPolicy, ISubscriptionStatus, PaymentMethodType, ProviderType } from './subscriptions';
import { FronteggApiError } from './error';
import fetch, { FetchClient } from './FetchClient';
import { ContextHolder, FronteggContext } from './ContextHolder';
import { AuthenticationApi } from './auth';
import { SecurityPolicyApi } from './auth/secutiry-poilicy';
import { UsersApi } from './users';
import { TeamsApi } from './teams';
import { MetadataApi } from './metadata';
import { ReportsApi } from './reports';
import { ConnectivityApi } from './connectivity';
import { NotificationsApi } from './notifications';
import { AuditsApi } from './audits';
import { TenantsApi } from './tenants';
import { AccountSettingsApi } from './account-settings';
import { RolesApi } from './roles';
import { SubscriptionsApi } from './subscriptions';
import { VendorApi } from './vendor';
import { SubTenantsApi } from './sub-tenants';
import { FeatureFlagsApi } from './feature-flags';
import { DirectoryApi } from './directory';
import { ImpersonateApi } from './impersonate';
import { GroupsApi } from './groups';
import { EntitlementsApi } from './entitlements';
import { SecurityCenterApi } from './security-center';
import { PhoneNumbersApi } from './user-phone-numbers';
import { ApplicationsApi } from './applications';
import { VeloApi } from './velo';
import { UsernamesApi } from './usernames';
import { UserEmailPolicyApi } from './users-emails-policy';
export * from './interfaces';
export * from './auth/interfaces';
export * from './auth/enums';
export { setTabTenantInSessionStorage, getTabTenantFromSessionStorage, removeTabTenantFromSessionStorage, getCurrentUserTenantsFunction, FRONTEGG_SEPARATE_TABS_BY_TENANT, } from './auth';
export * from './teams/interfaces';
export * from './metadata/interfaces';
export * from './reports/interfaces';
export * from './connectivity/interfaces';
export * from './notifications/interfaces';
export * from './audits/interfaces';
export * from './tenants/interfaces';
export * from './account-settings/interfaces';
export * from './roles/interfaces';
export * from './subscriptions/interfaces';
export * from './vendor/interfaces';
export * from './sub-tenants/interfaces';
export * from './routers';
export * from './feature-flags/index';
export * from './feature-flags/interfaces';
export * from './directory/index';
export * from './directory/interfaces';
export * from './impersonate/interfaces';
export * from './groups/interfaces';
export * from './groups/enums';
export * from './users/interfaces';
export * from './entitlements/interfaces';
export * from './security-center/interfaces';
export * from './user-phone-numbers/interfaces';
export * from './applications/interfaces';
export * from './velo/interfaces';
export * from './users-emails-policy/interfaces';
export { GENERIC_ERROR_CODE, GENERIC_ERROR_MESSAGE } from './constants';
/**
 * Frontegg API client for default app
 *
 * @deprecated use createApiClient instead
 */
declare const api: {
    auth: AuthenticationApi;
    securityPolicy: SecurityPolicyApi;
    teams: TeamsApi;
    metadata: MetadataApi;
    reports: ReportsApi;
    connectivity: ConnectivityApi;
    notifications: NotificationsApi;
    audits: AuditsApi;
    tenants: TenantsApi;
    accountSettings: AccountSettingsApi;
    roles: RolesApi;
    subscriptions: SubscriptionsApi;
    vendor: VendorApi;
    subTenants: SubTenantsApi;
    featureFlags: FeatureFlagsApi;
    directory: DirectoryApi;
    impersonate: ImpersonateApi;
    groups: GroupsApi;
    users: UsersApi;
    entitlements: EntitlementsApi;
    securityCenter: SecurityCenterApi;
    userPhoneNumbers: PhoneNumbersApi;
    applications: ApplicationsApi;
    velo: VeloApi;
    usernames: UsernamesApi;
    userEmailPolicy: UserEmailPolicyApi;
};
export type FronteggApiClient = {
    auth: AuthenticationApi;
    securityPolicy: SecurityPolicyApi;
    teams: TeamsApi;
    metadata: MetadataApi;
    reports: ReportsApi;
    connectivity: ConnectivityApi;
    notifications: NotificationsApi;
    audits: AuditsApi;
    tenants: TenantsApi;
    accountSettings: AccountSettingsApi;
    roles: RolesApi;
    subscriptions: SubscriptionsApi;
    vendor: VendorApi;
    subTenants: SubTenantsApi;
    featureFlags: FeatureFlagsApi;
    directory: DirectoryApi;
    impersonate: ImpersonateApi;
    groups: GroupsApi;
    users: UsersApi;
    entitlements: EntitlementsApi;
    securityCenter: SecurityCenterApi;
    userPhoneNumbers: PhoneNumbersApi;
    applications: ApplicationsApi;
    velo: VeloApi;
    usernames: UsernamesApi;
    userEmailPolicy: UserEmailPolicyApi;
};
declare const createApiClient: (appName: string) => FronteggApiClient;
export { fetch, FetchClient, ContextHolder, FronteggContext, api, createApiClient, FronteggApiError, AuthStrategyEnum, SocialLoginProviders, ISubscriptionCancellationPolicy, ISubscriptionStatus, PaymentMethodType, ProviderType, MachineToMachineAuthStrategy, EIdentifierType, };
declare const _default: {
    fetch: FetchClient;
    FetchClient: typeof FetchClient;
    ContextHolder: typeof ContextHolder;
    FronteggContext: {
        getContext: () => import("./interfaces").ContextOptions;
        getAccessToken: () => string | null;
        setAccessToken: (accessToken: string | null) => void;
        getUser: () => import("./users/interfaces").IUserProfile | null;
        setUser: (user: import("./users/interfaces").IUserProfile | null) => void;
        onRedirectTo: (path: string, opts?: import("./interfaces").RedirectOptions) => void;
        setOnRedirectTo: (onRedirectTo: (path: string, opts?: import("./interfaces").RedirectOptions) => void) => void;
        logout: (callback?: () => void) => void;
        getRequestSource: () => import("./interfaces").RequestSource | null;
        setRequestSource: (requestSource: import("./interfaces").RequestSource | null) => void;
        isSessionPerTenantEnabled: () => boolean;
        shouldLoadEntitlements: () => boolean;
        getAppName: () => string | null;
        setEntitlementsOptions: (entitlementsOptions: import("./ContextHolder").EntitlementsOptions) => void;
        setSessionContext: (sessionContext: import("./interfaces").SessionContext) => void;
        getBasename: () => string | null;
        setBasename: (basename: string | null) => void;
    };
    api: {
        auth: AuthenticationApi;
        securityPolicy: SecurityPolicyApi;
        teams: TeamsApi;
        metadata: MetadataApi;
        reports: ReportsApi;
        connectivity: ConnectivityApi;
        notifications: NotificationsApi;
        audits: AuditsApi;
        tenants: TenantsApi;
        accountSettings: AccountSettingsApi;
        roles: RolesApi;
        subscriptions: SubscriptionsApi;
        vendor: VendorApi;
        subTenants: SubTenantsApi;
        featureFlags: FeatureFlagsApi;
        directory: DirectoryApi;
        impersonate: ImpersonateApi;
        groups: GroupsApi;
        users: UsersApi;
        entitlements: EntitlementsApi;
        securityCenter: SecurityCenterApi;
        userPhoneNumbers: PhoneNumbersApi;
        applications: ApplicationsApi;
        velo: VeloApi;
        usernames: UsernamesApi;
        userEmailPolicy: UserEmailPolicyApi;
    };
    createApiClient: (appName: string) => FronteggApiClient;
    FronteggApiError: typeof FronteggApiError;
    AuthStrategyEnum: typeof AuthStrategyEnum;
    MachineToMachineAuthStrategy: typeof MachineToMachineAuthStrategy;
    SocialLoginProviders: typeof SocialLoginProviders;
    ISubscriptionCancellationPolicy: typeof ISubscriptionCancellationPolicy;
    ISubscriptionStatus: typeof ISubscriptionStatus;
    PaymentMethodType: typeof PaymentMethodType;
    ProviderType: typeof ProviderType;
    EIdentifierType: typeof EIdentifierType;
};
export default _default;
