"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _helpers = require("../../helpers");
var _Information = require("../../../subscriptions/Billing/Information");
var _dummy = require("../dummy");
var _restApi = require("@frontegg/rest-api");
var _helpers2 = require("../../../helpers");
var _default = (store, api, actions) => {
  const originalActions = (0, _Information.buildInformationActions)(store, api, actions);
  const mockedActions = (0, _helpers.mockActionsExpect)(originalActions, ['setBillingInformationState', 'resetBillingInformationState']);
  mockedActions.loadBillingInformation = async () => {
    var _planResponseMock$0$p, _planResponseMock$0$p2;
    mockedActions.setBillingInformationState({
      loading: true
    });
    await (0, _helpers2.delay)(500);
    mockedActions.setBillingInformationState({
      loading: false,
      fetching: false,
      summary: {
        subscriptionId: _dummy.subscriptionResponseMock.id,
        paymentMethodId: 'mockPaymentMethodId',
        tenantConfigurationId: 'mockTenantConfigurationId',
        providerType: _restApi.ProviderType.Stripe,
        externallyManaged: false,
        currentPlanId: _dummy.planResponseMock[0].id,
        defaultPlanId: _dummy.planResponseMock[0].id
      },
      plan: (0, _extends2.default)({}, _dummy.planResponseMock[0], {
        price: (_planResponseMock$0$p = _dummy.planResponseMock[0].price) == null ? void 0 : _planResponseMock$0$p.amount,
        currency: (_planResponseMock$0$p2 = _dummy.planResponseMock[0].price) == null ? void 0 : _planResponseMock$0$p2.currency,
        recurringInterval: 'month'
      })
    });
  };
  return mockedActions;
};
exports.default = _default;