import _extends from "@babel/runtime/helpers/esm/extends";
import { useStore } from '../FronteggStoreContext';
import { useSnapshot } from '../useSnapshot';
function getSubscriptionsState() {
  // eslint-disable-next-line react-hooks/rules-of-hooks
  return useStore().store.subscriptions;
}
export const usePaymentProvider = () => {
  const {
    config
  } = getSubscriptionsState();
  return useSnapshot(config);
};
export const usePaymentProviderActions = () => {
  return useStore().stateActions.subscriptions.config;
};
export const usePlans = () => {
  const {
    plans
  } = getSubscriptionsState();
  return useSnapshot(plans);
};
export const usePlansActions = () => {
  return useStore().stateActions.subscriptions.plans;
};
export const useCheckout = () => {
  const {
    checkout
  } = getSubscriptionsState();
  return useSnapshot(checkout);
};
export const useCheckoutActions = () => {
  return useStore().stateActions.subscriptions.checkout;
};
const useBillingActions = billingKey => {
  return useStore().stateActions.subscriptions.billing[billingKey];
};
export const useBillingInformation = () => {
  const {
    billing
  } = getSubscriptionsState();
  return useSnapshot(billing.information);
};
export const useBillingInformationActions = () => {
  return useBillingActions('information');
};
export const usePaymentMethod = () => {
  const {
    billing
  } = getSubscriptionsState();
  return useSnapshot(billing.paymentMethod);
};
export const usePaymentMethodActions = () => {
  return useBillingActions('paymentMethod');
};
export const useInvoices = () => {
  const {
    billing
  } = getSubscriptionsState();
  return useSnapshot(billing.invoices);
};
export const useInvoicesActions = () => {
  return useBillingActions('invoices');
};
export const useSubscriptionCancellation = () => {
  const {
    billing
  } = getSubscriptionsState();
  const {
    cancellation
  } = useSnapshot(billing.subscription);
  return cancellation;
};
export const useSubscriptionRenewal = () => {
  const {
    billing
  } = getSubscriptionsState();
  const {
    renewal
  } = useSnapshot(billing.subscription);
  return renewal;
};
export const useSubscription = () => {
  const {
    billing
  } = getSubscriptionsState();
  return useSnapshot(billing.subscription);
};
export const useSubscriptionActions = () => {
  const actions = useStore().stateActions.subscriptions.billing.subscription;
  return _extends({}, actions, {
    load: actions.loadSubscription
  });
};
export const useStripeState = () => {
  const {
    stripe
  } = getSubscriptionsState();
  return useSnapshot(stripe);
};
export const useStripeActions = () => {
  return useStore().stateActions.subscriptions.stripe;
};
export const useVendorPublicConfig = () => {
  return useSnapshot(useStore().store.subscriptions.vendorPublicConfig);
};
export const useVendorPublicConfigActions = () => {
  return useStore().stateActions.subscriptions.vendorPublicConfig;
};