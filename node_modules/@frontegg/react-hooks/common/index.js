import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["urlStrategy", "onRedirectTo", "renderByRoute", "customLoader", "customStyles", "contextOptions"];
import { createContext, useContext } from 'react';
import { useStore } from '../FronteggStoreContext';
import { useSnapshot } from '../useSnapshot';
import { FetchClient, createApiClient } from '@frontegg/rest-api';
export const ShadowDomContext = /*#__PURE__*/createContext({});
const defaultPathOnRedirectTo = path => {
  var _window$history, _window$history$pushS;
  return typeof window !== 'undefined' && ((_window$history = window.history) == null ? void 0 : (_window$history$pushS = _window$history.pushState) == null ? void 0 : _window$history$pushS.call(_window$history, null, '', path));
};
const defaultHashOnRedirectTo = path => {
  var _window$history2, _window$history2$push;
  return typeof window !== 'undefined' && ((_window$history2 = window.history) == null ? void 0 : (_window$history2$push = _window$history2.pushState) == null ? void 0 : _window$history2$push.call(_window$history2, null, '', `#${path}`));
};
export const useShadowDom = () => {
  var _rest$injector$name, _rest$injector;
  const context = useContext(ShadowDomContext);
  const {
      urlStrategy = 'path',
      onRedirectTo = urlStrategy === 'path' ? defaultPathOnRedirectTo : defaultHashOnRedirectTo,
      renderByRoute = false,
      customLoader = false,
      customStyles,
      contextOptions
    } = context,
    rest = _objectWithoutPropertiesLoose(context, _excluded);
  const appName = (_rest$injector$name = (_rest$injector = rest.injector) == null ? void 0 : _rest$injector.name) != null ? _rest$injector$name : 'default';
  return _extends({
    isShadowDom: true,
    onRedirectTo,
    renderByRoute,
    customLoader,
    customStyles,
    urlStrategy,
    contextOptions: _extends({
      requestCredentials: 'include'
    }, contextOptions)
  }, rest, {
    appName,
    fetchClient: new FetchClient(appName),
    apiClient: createApiClient(appName)
  });
};
export const useRootState = () => {
  return useSnapshot(useStore().store.root);
};
export * from './CustomComponentHolder';