import { FronteggState, RestApi, SharedActions, WithSilentLoad } from '../../interfaces';
declare const _default: (store: FronteggState, api: RestApi, actions: SharedActions) => {
    setRolesState: (state: Partial<import("../../auth").RolesState>) => void;
    setRolesStateLoader: (payload: import("../../auth").RolesStateIndicator) => void;
    setRolesStateError: (payload: import("../../auth").RolesStateIndicator) => void;
    resetRolesState: () => void;
    loadRolesAndPermissions: (payload?: import("../../interfaces").WithRetryConfig<WithSilentLoad<{}>>) => Promise<void>;
    addRole: (payload: import("../../interfaces").WithCallback<import("dist/@frontegg/rest-api").IAddRole, import("dist/@frontegg/rest-api").IRole>) => Promise<void>;
    addRoleV2: (payload: import("../../interfaces").WithCallback<import("dist/@frontegg/rest-api").IAddRoleV2, import("dist/@frontegg/rest-api").IRole>) => Promise<void>;
    updateRole: (payload: import("../../interfaces").WithCallback<import("dist/@frontegg/rest-api").IUpdateRole, import("dist/@frontegg/rest-api").IRole>) => Promise<void>;
    deleteRole: (payload: import("../../interfaces").WithCallback<import("dist/@frontegg/rest-api").IDeleteRole>) => Promise<void>;
    attachPermissionsToRole: (payload: import("../../interfaces").WithCallback<import("dist/@frontegg/rest-api").IAttachPermissionsToRole, import("dist/@frontegg/rest-api").IRole>) => Promise<void>;
    attachPermissionToRoles: (payload: import("../../interfaces").WithCallback<import("dist/@frontegg/rest-api").IAttachPermissionToRoles>) => Promise<void>;
};
export default _default;
