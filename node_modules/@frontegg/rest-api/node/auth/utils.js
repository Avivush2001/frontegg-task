"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.executeConditionalPromise = executeConditionalPromise;
exports.getCurrentUserTenantsFunction = getCurrentUserTenantsFunction;
exports.getTabTenantFromSessionStorage = getTabTenantFromSessionStorage;
exports.removeTabTenantFromSessionStorage = removeTabTenantFromSessionStorage;
exports.setTabTenantInSessionStorage = setTabTenantInSessionStorage;
var _ContextHolder = require("../ContextHolder");
var _constants = require("./constants");
var _featureFlags = require("../feature-flags");
var _users = require("../users");
async function executeConditionalPromise({
  shouldLoad,
  action
}) {
  if (!shouldLoad) return;
  return await action();
}
function setTabTenantInSessionStorage(tenantId) {
  if (!tenantId) {
    return;
  }
  sessionStorage.setItem(_constants.FRONTEGG_SEPARATE_TABS_BY_TENANT, tenantId);
}
function removeTabTenantFromSessionStorage() {
  sessionStorage.removeItem(_constants.FRONTEGG_SEPARATE_TABS_BY_TENANT);
}
function getTabTenantFromSessionStorage(appName) {
  if (!_ContextHolder.ContextHolder.for(appName).isSessionPerTenantEnabled()) {
    return null;
  }
  return sessionStorage.getItem(_constants.FRONTEGG_SEPARATE_TABS_BY_TENANT);
}
function getCurrentUserTenantsFunction(appName) {
  const skipUserLoading = _ContextHolder.ContextHolder.for(appName).shouldSkipUserLoad();
  if (skipUserLoading) {
    return async () => ({
      tenants: [],
      activeTenant: {}
    });
  }
  const usersApi = new _users.UsersApi(appName);
  const [useCurrentUserTenantsV1] = _featureFlags.FeatureFlags.getFeatureFlags([_constants.USE_CURRENT_USER_TENANTS_V1_ENDPOINT_FF], appName);
  if (_ContextHolder.ContextHolder.for(appName).isSessionPerTenantEnabled()) {
    return usersApi.getCurrentUserTenantsV1;
  }
  return useCurrentUserTenantsV1 ? usersApi.getCurrentUserTenantsV1 : usersApi.getCurrentUserTenantsV3;
}