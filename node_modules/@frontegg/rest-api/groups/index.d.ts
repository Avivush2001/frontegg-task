import { ICreateGroup, ICreateGroupResponse, IGetGroup, IGetGroupQueryOptions, IGetGroupsByIds, IGroupConfigResponse, IGroupResponse, IUpdateGroup, IUpdateGroupConfig, IUpdateGroupRoles, IUpdateGroupUsers } from './interfaces';
import { BaseApiClient } from '../BaseApiClient';
export declare class GroupsApi extends BaseApiClient {
    constructor(appName: string);
    /**
     * Get group by given id
     * @param groupId - The ID of the group to retrieve
     * @param query - Optional query parameters
     */
    getGroupById: ({ groupId }: IGetGroup, query?: IGetGroupQueryOptions) => Promise<IGroupResponse>;
    /**
     * Get all tenant groups
     * @param query - Optional query parameters
     */
    getGroups: (query?: IGetGroupQueryOptions) => Promise<IGroupResponse[]>;
    /**
     * Get groups by ids
     * @param body - Request body containing group IDs
     * @param params - Optional query parameters
     */
    getGroupsByIds: (body: IGetGroupsByIds, params?: IGetGroupQueryOptions) => Promise<IGroupResponse[]>;
    /**
     * Create new group
     * @param body - Request body to create a group
     */
    createGroup: (body: ICreateGroup) => Promise<ICreateGroupResponse>;
    /**
     * Update existing group by Id
     * @param groupId - The ID of the group to update
     * @param body - Request body containing update data
     */
    updateGroup: ({ groupId, ...body }: IUpdateGroup) => Promise<void>;
    /**
     * Delete existing group by Id
     * @param groupId - The ID of the group to delete
     */
    deleteGroup: (groupId: string) => Promise<void>;
    /**
     * Add roles to existing group
     * @param groupId - The ID of the group
     * @param body - Request body containing roles to add
     */
    addRolesToGroup: (groupId: string, body: IUpdateGroupRoles) => Promise<void>;
    /**
     * Delete roles from existing group
     * @param groupId - The ID of the group
     * @param body - Request body containing roles to delete
     */
    deleteRolesFromGroup: (groupId: string, body: IUpdateGroupRoles) => Promise<void>;
    /**
     * Add users to existing group
     * @param groupId - The ID of the group
     * @param body - Request body containing users to add
     */
    addUsersToGroup: (groupId: string, body: IUpdateGroupUsers) => Promise<void>;
    /**
     * Delete users from existing group
     * @param groupId - The ID of the group
     * @param body - Request body containing users to delete
     */
    deleteUsersFromGroup: (groupId: string, body: IUpdateGroupUsers) => Promise<void>;
    /**
     * Get or create default groups configuration
     */
    getGroupConfiguration: () => Promise<IGroupConfigResponse>;
    /**
     * Create or update groups configuration
     * @param body - Request body to update group configuration
     */
    updateGroupConfiguration: (body: IUpdateGroupConfig) => Promise<IGroupConfigResponse>;
}
declare const _default: GroupsApi;
export default _default;
