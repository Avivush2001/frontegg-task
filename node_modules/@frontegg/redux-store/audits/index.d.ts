import { buildAuditLogsActions } from './AuditLogsState';
import { buildAuditsMetadataActions } from './AuditsMetadataState';
import { FronteggState, RestApi, SharedActions } from '../interfaces';
import { DeepPartial } from '../types';
import { AuditsState } from './interfaces';
export declare const createAuditsState: (overrideState?: DeepPartial<AuditsState>) => AuditsState;
export declare const buildAuditsActions: (store: FronteggState, api: RestApi, sharedActions: SharedActions) => {
    setAuditsMetadataState: (state: Partial<import("./interfaces").AuditsMetadataState>) => void;
    resetAuditsMetadataState: () => void;
    loadAuditsMetadata: (payload?: import("../interfaces").WithRetryConfig<{}>) => Promise<void>;
    setAuditLogsState: (state: Partial<import("./interfaces").AuditLogsState>) => void;
    resetAuditLogsState: () => void;
    exportAuditsCsv: () => Promise<void>;
    loadAuditLogs: (payload: import("../interfaces").WithRetryConfig<import("./interfaces").LoadAuditLogsPayload>) => Promise<void>;
};
export type AuditsActions = ReturnType<typeof buildAuditLogsActions> & ReturnType<typeof buildAuditsMetadataActions>;
