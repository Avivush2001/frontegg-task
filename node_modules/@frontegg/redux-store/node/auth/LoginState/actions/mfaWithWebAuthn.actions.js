"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _helpers = require("../../../helpers");
const _excluded = ["callback", "deviceId"],
  _excluded2 = ["callback", "deviceId"];
var _default = (store, api, sharedActions) => {
  const actions = sharedActions;

  /**
   * Shared logic for MFA Webauthn pre-verify step
   * @param payload.callback callback function to be called after the verification is done
   * @param payload.deviceId
   * @param payload.mfaToken
   * @param setLoadingAction loading setter action (e.g. actions.setLoginState)
   */
  const preVerifyMFAWebAuthn = async (_ref, setLoadingAction) => {
    let {
        callback,
        deviceId
      } = _ref,
      payload = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
    setLoadingAction({
      loading: true
    });
    try {
      var _data$options$allowCr;
      const data = await api.auth.preVerifyMFAWebAuthnForLogin(deviceId, payload);
      const options = (0, _extends2.default)({}, data.options, {
        challenge: (0, _helpers.base64urlDecode)(data.options.challenge),
        allowCredentials: (_data$options$allowCr = data.options.allowCredentials) == null ? void 0 : _data$options$allowCr.map(credentials => (0, _extends2.default)({}, credentials, {
          id: (0, _helpers.base64urlDecode)(credentials.id)
        }))
      });
      setLoadingAction({
        loading: false,
        error: undefined
      });
      callback == null ? void 0 : callback({
        options,
        webauthnToken: data.webauthnToken
      });
    } catch (e) {
      setLoadingAction({
        loading: false,
        error: (0, _helpers.errorHandler)(e)
      });
      callback == null ? void 0 : callback(null);
    }
  };

  /**
   * Shared logic for MFA Webauthn verify step
   * @param payload.callback callback function to be called after the verification is done with true for success, o.w false
   * @param payload.deviceId
   * @param payload.webauthnToken
   * @param payload.mfaToken
   * @param payload.publicKey public key object from browser navigator credentials
   * @param payload.code 6 digits code input by the user
   * @param setLoadingAction loading setter action (e.g. actions.setLoginState)
   * @param isStepUp true when it's step up flow
   */
  const verifyMFAWebAuthn = async (_ref2, setLoadingAction, isStepUp) => {
    let {
        callback,
        deviceId
      } = _ref2,
      payload = (0, _objectWithoutPropertiesLoose2.default)(_ref2, _excluded2);
    setLoadingAction({
      loading: true
    });
    try {
      const publicKey = (0, _helpers.publicKeyCredentialToJSON)(payload.publicKey);
      const data = await api.auth.verifyMFAWebAuthnForLoginV2(deviceId, (0, _extends2.default)({}, payload, {
        options: publicKey
      }));
      await actions.handleVerifyMFAResponse(data, isStepUp);
      setLoadingAction({
        loading: false,
        error: undefined
      });
      callback == null ? void 0 : callback(true);
    } catch (e) {
      setLoadingAction({
        loading: false,
        error: (0, _helpers.errorHandler)(e)
      });
      callback == null ? void 0 : callback(null);
    }
  };

  /**
   * Pre verify step for MFA Webauthn login
   * @param payload.callback callback function to be called after the verification is done
   * @param payload.deviceId
   * @param payload.mfaToken
   */
  const preVerifyMFAWebAuthnForLogin = async payload => {
    return await preVerifyMFAWebAuthn(payload, actions.setLoginState);
  };

  /**
   * Verify step for MFA Webauthn login
   * @param payload.callback callback function to be called after the verification is done with true for success, o.w false
   * @param payload.deviceId
   * @param payload.webauthnToken
   * @param payload.mfaToken
   * @param payload.publicKey public key object from browser navigator credentials
   * @param payload.code 6 digits code input by the user
   */
  const verifyMFAWebAuthnForLogin = async payload => {
    return await verifyMFAWebAuthn(payload, actions.setLoginState, false);
  };
  return {
    preVerifyMFAWebAuthn,
    verifyMFAWebAuthn,
    preVerifyMFAWebAuthnForLogin,
    verifyMFAWebAuthnForLogin
  };
};
exports.default = _default;