import { FronteggState, RestApi, SharedActions, WithCallback } from '../interfaces';
import { ConnectivityState, TPlatform, TPostData } from './interfaces';
import { IWebhookTest } from '@frontegg/rest-api';
declare const _default: (store: FronteggState, api: RestApi, sharedActions: SharedActions) => {
    setConnectivityState: (state: Partial<ConnectivityState>) => void;
    initData: () => void;
    resetConnectivityState: () => void;
    loadSlackActions: () => Promise<void>;
    loadSlackChannels: () => Promise<void>;
    loadDataAction: (_payload?: TPlatform[]) => Promise<void>;
    loadConnectivityChannels: (_payload?: TPlatform[]) => Promise<void>;
    postDataAction: (payload: WithCallback<TPostData>) => Promise<void>;
    postChannelData: (payload: WithCallback<TPostData>) => Promise<void>;
    postCodeAction: (payload: string) => Promise<void>;
    postSlackCode: (payload: string) => Promise<void>;
    loadScope: () => Promise<void>;
    loadSlackPermissions: () => Promise<void>;
    deleteWebhookConfigAction: (payload: WithCallback<{
        webhookId: string;
    }>) => Promise<void>;
    deleteWebhookConfig: (payload: WithCallback<{
        webhookId: string;
    }>) => Promise<void>;
    postWebhookTestAction: (payload: IWebhookTest) => Promise<void>;
    postWebhookTest: (payload: IWebhookTest) => Promise<void>;
    postWebhookRetryAction: (payload: string) => Promise<void>;
    postWebhookRetry: (payload: string) => Promise<void>;
    loadWebhookLogsAction: (payload: {
        id: string;
        offset: number;
        limit: number;
    }) => Promise<void>;
    loadWebhookLogs: (payload: {
        id: string;
        offset: number;
        limit: number;
    }) => Promise<void>;
    cleanWebhookTestData: () => void;
    cleanWebhookLogsData: () => Promise<void>;
    cleanWebhookTestMessage: (state: ConnectivityState) => Promise<void>;
    cleanError: () => Promise<void>;
    cleanSlackData: () => Promise<void>;
};
export default _default;
