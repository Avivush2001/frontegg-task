"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFronteggApiError = exports.isError = exports.errorHandler = void 0;
var _restApi = require("@frontegg/rest-api");
const isFronteggApiError = error => Boolean(error == null ? void 0 : error.statusCode);
exports.isFronteggApiError = isFronteggApiError;
const isError = error => {
  if (error instanceof Error) {
    return true;
  }

  //using 'instanceof Error' wont work if the error is thrown in different window/frame/iframe than where the check is happening https://stackoverflow.com/a/30469297
  return (error == null ? void 0 : error.message) && (error == null ? void 0 : error.stack) && (error == null ? void 0 : error.name) === 'Error';
};
exports.isError = isError;
const errorHandler = (error, fallback) => {
  if (!error) {
    return fallback;
  }
  if (isFronteggApiError(error)) {
    console.error(error.message);
    return error;
  }
  if (isError(error)) {
    console.error(error.message);
  } else if (typeof error === 'string') {
    console.error(error);
  }
  return fallback != null ? fallback : new _restApi.FronteggApiError(_restApi.GENERIC_ERROR_MESSAGE, 500, null, _restApi.GENERIC_ERROR_CODE);
};
exports.errorHandler = errorHandler;