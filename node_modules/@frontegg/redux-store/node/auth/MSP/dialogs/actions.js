"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _helpers = require("../../../helpers");
var _state = require("./state");
var _default = (store, api, sharedActions) => {
  const setAllAccountDialogsState = payload => {
    Object.assign(store.auth.allAccountsDialogsState, payload);
  };
  const resetAllAccountDialogsState = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'allAccountsDialogsState'], _state.initialState);
  };

  // Create new account dialog
  const openCreateSubAccountDialog = payload => {
    Object.assign(store.auth.allAccountsDialogsState.createSubAccountDialog, (0, _extends2.default)({}, payload, {
      open: true
    }));
  };
  const closeCreateSubAccountDialog = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'allAccountsDialogsState', 'createSubAccountDialog'], _state.initialState.createSubAccountDialog);
  };

  // Update account dialog
  const openUpdateSubAccountDialog = payload => {
    Object.assign(store.auth.allAccountsDialogsState.updateSubAccountDialog, (0, _extends2.default)({}, payload, {
      open: true
    }));
  };
  const closeUpdateSubAccountDialog = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'allAccountsDialogsState', 'updateSubAccountDialog'], _state.initialState.updateSubAccountDialog);
  };

  // Enable sub account management dialog
  const openEnableSubAccountManagementDialog = payload => {
    Object.assign(store.auth.allAccountsDialogsState.enableSubAccountManagementDialog, (0, _extends2.default)({}, payload, {
      open: true
    }));
  };
  const closeEnableSubAccountManagementDialog = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'allAccountsDialogsState', 'enableSubAccountManagementDialog'], _state.initialState.enableSubAccountManagementDialog);
  };

  // Enable sub account management dialog
  const openUpdateSubAccountHierarchySettingsDialog = payload => {
    Object.assign(store.auth.allAccountsDialogsState.updateSubAccountHierarchySettingsDialog, (0, _extends2.default)({}, payload, {
      open: true
    }));
  };
  const closeUpdateSubAccountHierarchySettingsDialog = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'allAccountsDialogsState', 'updateSubAccountHierarchySettingsDialog'], _state.initialState.updateSubAccountHierarchySettingsDialog);
  };

  // Disable sub account management dialog
  const openDisableSubAccountManagementDialog = payload => {
    Object.assign(store.auth.allAccountsDialogsState.disableSubAccountManagementDialog, (0, _extends2.default)({}, payload, {
      open: true
    }));
  };
  const closeDisableSubAccountManagementDialog = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'allAccountsDialogsState', 'disableSubAccountManagementDialog'], _state.initialState.disableSubAccountManagementDialog);
  };

  // Delete account dialog
  const openDeleteSubAccountDialog = payload => {
    Object.assign(store.auth.allAccountsDialogsState.deleteSubAccountDialog, (0, _extends2.default)({}, payload, {
      open: true
    }));
  };
  const closeDeleteSubAccountDialog = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'allAccountsDialogsState', 'deleteSubAccountDialog'], _state.initialState.deleteSubAccountDialog);
  };

  // Add users to account dialog
  const openAddUsersToAccountDialog = payload => {
    Object.assign(store.auth.allAccountsDialogsState.addUsersToAccountDialog, (0, _extends2.default)({}, payload, {
      open: true
    }));
  };
  const closeAddUsersToAccountDialog = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'allAccountsDialogsState', 'addUsersToAccountDialog'], _state.initialState.addUsersToAccountDialog);
  };

  // Delete user from account dialog
  const openDeleteUserFromAccountDialog = payload => {
    Object.assign(store.auth.allAccountsDialogsState.deleteUserFromAccountDialog, (0, _extends2.default)({}, payload, {
      open: true
    }));
  };
  const closeDeleteUserFromAccountDialog = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'allAccountsDialogsState', 'deleteUserFromAccountDialog'], _state.initialState.deleteUserFromAccountDialog);
  };

  // Edit user roles dialog
  const openEditUserRolesDialog = payload => {
    Object.assign(store.auth.allAccountsDialogsState.editUserRolesDialog, (0, _extends2.default)({}, payload, {
      open: true
    }));
  };
  const closeEditUserRolesDialog = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'allAccountsDialogsState', 'editUserRolesDialog'], _state.initialState.editUserRolesDialog);
  };
  return {
    setAllAccountDialogsState,
    resetAllAccountDialogsState,
    openCreateSubAccountDialog,
    closeCreateSubAccountDialog,
    openUpdateSubAccountDialog,
    closeUpdateSubAccountDialog,
    openEnableSubAccountManagementDialog,
    closeEnableSubAccountManagementDialog,
    openUpdateSubAccountHierarchySettingsDialog,
    closeUpdateSubAccountHierarchySettingsDialog,
    openDisableSubAccountManagementDialog,
    closeDisableSubAccountManagementDialog,
    openDeleteSubAccountDialog,
    closeDeleteSubAccountDialog,
    openAddUsersToAccountDialog,
    closeAddUsersToAccountDialog,
    openDeleteUserFromAccountDialog,
    closeDeleteUserFromAccountDialog,
    openEditUserRolesDialog,
    closeEditUserRolesDialog
  };
};
exports.default = _default;