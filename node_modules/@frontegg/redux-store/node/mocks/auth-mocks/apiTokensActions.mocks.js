"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _ApiTokensState = require("../../auth/ApiTokensState");
var _dummy = require("../dummy");
var _uuid = require("uuid");
var _helpers = require("../../helpers");
var _auth = require("../../auth");
var _helpers2 = require("../helpers");
var _default = (store, api, actions) => {
  const originalActions = (0, _ApiTokensState.buildApiTokensActions)(store, api, actions);
  const mockedActions = (0, _helpers2.mockActionsExpect)(originalActions, ['setApiTokensState', 'resetApiTokensState', 'setApiTokensLoader', 'setApiTokensError']);
  mockedActions.addTenantApiToken = async payload => {
    const {
      description,
      roleIds,
      callback
    } = payload;
    mockedActions.setApiTokensLoader({
      key: _auth.ApiStateKeys.ADD_API_TOKEN,
      value: true
    });
    const {
      apiTokensDataTenant
    } = store.auth.apiTokensState;
    const newToken = (0, _extends2.default)({}, _dummy.apiTokensDataTenantDemo, {
      description,
      roleIds,
      clientId: `CLIENT_ID_${(0, _uuid.v4)()}`
    });
    mockedActions.setApiTokensState({
      showAddTokenDialog: false
    });
    await (0, _helpers.delay)(200);
    mockedActions.setApiTokensState({
      apiTokensDataTenant: [...apiTokensDataTenant, newToken],
      successDialog: {
        open: true,
        secret: newToken.secret,
        clientId: newToken.clientId
      }
    });
    await (0, _helpers.delay)(200);
    mockedActions.setApiTokensLoader({
      key: _auth.ApiStateKeys.ADD_API_TOKEN,
      value: false
    });
    callback == null ? void 0 : callback(null);
  };
  mockedActions.deleteTenantApiToken = async payload => {
    mockedActions.setApiTokensLoader({
      key: _auth.ApiStateKeys.DELETE_API_TOKEN,
      value: true
    });
    await (0, _helpers.delay)(200);
    const apiTokensDataTenant = [_dummy.apiTokensDataTenantDemo];
    mockedActions.setApiTokensState({
      apiTokensDataTenant: apiTokensDataTenant.filter(i => i.clientId !== payload),
      deleteTokenDialog: {
        open: false,
        clientId: payload
      }
    });
    mockedActions.setApiTokensLoader({
      key: _auth.ApiStateKeys.DELETE_API_TOKEN,
      value: false
    });
  };
  mockedActions.loadApiTokens = async payload => {
    var _payload$callback;
    if (!(payload != null && payload.silentLoading)) {
      mockedActions.setApiTokensLoader({
        key: _auth.ApiStateKeys.LOAD_API_TOKENS,
        value: true
      });
    }
    const apiTokensDataUser = [_dummy.apiTokensDataDemo];
    const apiTokensDataTenant = [_dummy.apiTokensDataTenantDemo];
    mockedActions.setApiTokensState({
      apiTokensDataUser,
      apiTokensDataTenant
    });
    await (0, _helpers.delay)(200);
    mockedActions.setApiTokensLoader({
      key: _auth.ApiStateKeys.LOAD_API_TOKENS,
      value: false
    });
    payload == null ? void 0 : (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, true);
  };
  mockedActions.loadUserApiTokens = async payload => {
    var _payload$callback2;
    if (!(payload != null && payload.silentLoading)) {
      mockedActions.setApiTokensLoader({
        key: _auth.ApiStateKeys.LOAD_API_TOKENS,
        value: true
      });
    }
    const apiTokensDataUser = [_dummy.apiTokensDataDemo];
    mockedActions.setApiTokensState({
      apiTokensDataUser
    });
    await (0, _helpers.delay)(200);
    mockedActions.setApiTokensLoader({
      key: _auth.ApiStateKeys.LOAD_API_TOKENS,
      value: false
    });
    payload == null ? void 0 : (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, true);
  };
  mockedActions.loadTenantApiTokens = async payload => {
    var _payload$callback3;
    if (!(payload != null && payload.silentLoading)) {
      mockedActions.setApiTokensLoader({
        key: _auth.ApiStateKeys.LOAD_API_TOKENS,
        value: true
      });
    }
    const apiTokensDataTenant = [_dummy.apiTokensDataTenantDemo];
    mockedActions.setApiTokensState({
      apiTokensDataTenant
    });
    await (0, _helpers.delay)(200);
    mockedActions.setApiTokensLoader({
      key: _auth.ApiStateKeys.LOAD_API_TOKENS,
      value: false
    });
    payload == null ? void 0 : (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, true);
  };
  return mockedActions;
};
exports.default = _default;