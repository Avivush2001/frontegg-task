"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _state = require("./state");
var _helpers = require("../../../helpers");
var _restApi = require("@frontegg/rest-api");
var _default = (store, api, sharedActions) => {
  const actions = sharedActions;
  const setBillingSubscriptionState = state => {
    Object.assign(store.subscriptions.billing.subscription, state);
  };
  const resetBillingSubscriptionState = () => {
    (0, _helpers.deepResetState)(store, ['subscriptions', 'billing', 'subscription'], _state.initialState);
  };
  const __setError = error => {
    setBillingSubscriptionState({
      error,
      loading: false,
      fetching: false
    });
  };
  const __setLoading = loading => {
    setBillingSubscriptionState({
      loading
    });
  };
  const setCancellationLoading = loading => {
    Object.assign(store.subscriptions.billing.subscription.cancellation, {
      loading
    });
  };
  const setCancellationError = error => {
    Object.assign(store.subscriptions.billing.subscription.cancellation, {
      error
    });
  };
  const setRenewalLoading = loading => {
    Object.assign(store.subscriptions.billing.subscription.renewal, {
      loading
    });
  };
  const setRenewalError = error => {
    Object.assign(store.subscriptions.billing.subscription.renewal, {
      error
    });
  };
  const loadSubscription = async () => {
    __setLoading(true);
    try {
      const [subscription] = await api.subscriptions.getManagedSubscriptions();
      setBillingSubscriptionState({
        subscription,
        fetching: false,
        loading: false,
        error: null
      });
    } catch (e) {
      __setError((0, _helpers.errorHandler)(e));
    }
  };
  const loadSubscriptionTenant = async () => {
    var _store$auth$user;
    const tenantId = (_store$auth$user = store.auth.user) == null ? void 0 : _store$auth$user.tenantId;
    if (!tenantId) {
      __setError(new _restApi.FronteggApiError('TenantId is not defined', 500, null));
      return;
    }
    await actions.loadSummaries(tenantId);
  };
  const cancelSubscription = async () => {
    const {
      subscription
    } = store.subscriptions.billing.subscription;
    if (!subscription) {
      setCancellationError(new _restApi.FronteggApiError('Subscription not found', 500, null));
      return;
    }
    if (subscription != null && subscription.externallyManaged) {
      setCancellationError(new _restApi.FronteggApiError('Billing is externally managed', 500, null));
      return;
    }
    const {
      id: subscriptionId,
      cancellation,
      status
    } = subscription || {};
    const isCancellable = !cancellation && status === _restApi.ISubscriptionStatus.ACTIVE;
    if (isCancellable) {
      try {
        setCancellationLoading(true);
        await api.subscriptions.cancelManagedSubscription(subscriptionId);
        await loadSubscription();
        setCancellationLoading(false);
      } catch (e) {
        setCancellationError((0, _helpers.errorHandler)(e));
      }
    }
  };
  const renewSubscription = async () => {
    const {
      subscription
    } = store.subscriptions.billing.subscription;
    if (!subscription) {
      setRenewalError(new _restApi.FronteggApiError('Subscription not found', 500, null));
      return;
    }
    if (subscription != null && subscription.externallyManaged) {
      setRenewalError(new _restApi.FronteggApiError('Billing is externally managed', 500, null));
      return;
    }
    const {
      id: subscriptionId,
      cancellation
    } = subscription || {};
    const renewable = (cancellation == null ? void 0 : cancellation.policy) === _restApi.ISubscriptionCancellationPolicy.AT_PERIOD_END;
    if (renewable) {
      try {
        setRenewalLoading(true);
        await api.subscriptions.renewManagedSubscription(subscriptionId);
        await loadSubscription();
        setRenewalLoading(false);
      } catch (e) {
        setRenewalError((0, _helpers.errorHandler)(e));
      }
    }
  };
  return {
    // reducers
    setBillingSubscriptionState,
    resetBillingSubscriptionState,
    setCancellationLoading,
    setCancellationError,
    setRenewalLoading,
    setRenewalError,
    // actions
    loadSubscription,
    loadSubscriptionTenant,
    cancelSubscription,
    renewSubscription
  };
};
exports.default = _default;