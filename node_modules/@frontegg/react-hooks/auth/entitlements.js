import { useAuthUserOrNull } from './hooks';
import { useMemo } from 'react';
import { useRootState, useShadowDom } from '../common';
import { useFeatureFlags } from '../flags';
import { useStore } from '../FronteggStoreContext';
import { useSnapshot } from '../useSnapshot';
import { getEntitlements, getFeatureEntitlements, getPermissionEntitlements } from '@frontegg/redux-store';

/**
 * @returns entitlements state as stored in the user
 */
const useEntitlementsState = () => {
  var _useSnapshot$user$ent, _useSnapshot$user;
  const state = useStore().store.auth;
  return (_useSnapshot$user$ent = (_useSnapshot$user = useSnapshot(state).user) == null ? void 0 : _useSnapshot$user.entitlements) != null ? _useSnapshot$user$ent : {};
};

/**
 * @returns user state
 */
const useUserState = () => {
  return useAuthUserOrNull() || undefined;
};

/**
 * @param customAttributes user attributes
 * @returns is entitled query data including entitlement state and final attributes (consumer and frontegg)
 */
const useEntitlementsQueryData = customAttributes => {
  const user = useUserState();
  const entitlements = useEntitlementsState();
  const attributes = {
    custom: customAttributes,
    jwt: user
  };
  return {
    entitlements,
    attributes
  };
};

/**
 @param key feature key
 @param customAttributes user attributes
 @returns if the user is entitled to the given feature and attributes. Attaching the justification if not
 */
export const useFeatureEntitlements = (key, customAttributes) => {
  const {
    entitlements,
    attributes
  } = useEntitlementsQueryData(customAttributes);
  const {
    appName
  } = useRootState();
  return getFeatureEntitlements(entitlements, key, attributes, undefined, appName);
};

/**
 @param key permission key
 @param customAttributes user attributes
 @returns if the user is entitled to the given permission and attributes. Attaching the justification if not
 */
export const usePermissionEntitlements = (key, customAttributes) => {
  const {
    entitlements,
    attributes
  } = useEntitlementsQueryData(customAttributes);
  const {
    appName
  } = useRootState();
  return getPermissionEntitlements(entitlements, key, attributes, undefined, appName);
};

/**
 @param options
 @param customAttributes user attributes
 @returns if the user is entitled to the given feature or permission and attributes (check only one). Attaching the justification if not
 */
export const useEntitlements = (options, customAttributes) => {
  const {
    entitlements,
    attributes
  } = useEntitlementsQueryData(customAttributes);
  const {
    appName
  } = useRootState();
  return getEntitlements(entitlements, options, attributes, undefined, appName);
};

/**
 @returns an action your can use to detect if the user is entitled to the given feature or permission (check only one).
  Attaching the justification if not
 */
export const useEntitlementsActions = () => {
  // this code is duplicated because React is yelling when using useEntitlementsQueryData inside the isEntitledTo function because it's not a hook
  const user = useUserState();
  const entitlements = useEntitlementsState();
  const {
    appName
  } = useRootState();
  return useMemo(() => ({
    isEntitledTo: (options, customAttributes) => {
      const attributes = {
        custom: customAttributes,
        jwt: user
      };
      return getEntitlements(entitlements, options, attributes, undefined, appName);
    }
  }), [user, entitlements]);
};

/**
 @returns if the option to use entitlements is enabled
 */
export const useEntitlementsOptions = () => {
  var _entitlementsOptions$;
  const {
    entitlementsOptions
  } = useShadowDom();
  const isEntitlementsEnabled = (_entitlementsOptions$ = entitlementsOptions == null ? void 0 : entitlementsOptions.enabled) != null ? _entitlementsOptions$ : false;
  const {
    isEntitledTo
  } = useEntitlementsActions();
  const [verifyIsEntitledFF] = useFeatureFlags(['admin-portal-use-is-entitled']);
  return {
    isEntitlementsEnabled,
    isEntitledTo,
    verifyIsEntitledFF
  };
};