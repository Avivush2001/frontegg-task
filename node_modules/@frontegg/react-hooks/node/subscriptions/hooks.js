"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useVendorPublicConfigActions = exports.useVendorPublicConfig = exports.useSubscriptionRenewal = exports.useSubscriptionCancellation = exports.useSubscriptionActions = exports.useSubscription = exports.useStripeState = exports.useStripeActions = exports.usePlansActions = exports.usePlans = exports.usePaymentProviderActions = exports.usePaymentProvider = exports.usePaymentMethodActions = exports.usePaymentMethod = exports.useInvoicesActions = exports.useInvoices = exports.useCheckoutActions = exports.useCheckout = exports.useBillingInformationActions = exports.useBillingInformation = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _FronteggStoreContext = require("../FronteggStoreContext");
var _useSnapshot = require("../useSnapshot");
function getSubscriptionsState() {
  // eslint-disable-next-line react-hooks/rules-of-hooks
  return (0, _FronteggStoreContext.useStore)().store.subscriptions;
}
const usePaymentProvider = () => {
  const {
    config
  } = getSubscriptionsState();
  return (0, _useSnapshot.useSnapshot)(config);
};
exports.usePaymentProvider = usePaymentProvider;
const usePaymentProviderActions = () => {
  return (0, _FronteggStoreContext.useStore)().stateActions.subscriptions.config;
};
exports.usePaymentProviderActions = usePaymentProviderActions;
const usePlans = () => {
  const {
    plans
  } = getSubscriptionsState();
  return (0, _useSnapshot.useSnapshot)(plans);
};
exports.usePlans = usePlans;
const usePlansActions = () => {
  return (0, _FronteggStoreContext.useStore)().stateActions.subscriptions.plans;
};
exports.usePlansActions = usePlansActions;
const useCheckout = () => {
  const {
    checkout
  } = getSubscriptionsState();
  return (0, _useSnapshot.useSnapshot)(checkout);
};
exports.useCheckout = useCheckout;
const useCheckoutActions = () => {
  return (0, _FronteggStoreContext.useStore)().stateActions.subscriptions.checkout;
};
exports.useCheckoutActions = useCheckoutActions;
const useBillingActions = billingKey => {
  return (0, _FronteggStoreContext.useStore)().stateActions.subscriptions.billing[billingKey];
};
const useBillingInformation = () => {
  const {
    billing
  } = getSubscriptionsState();
  return (0, _useSnapshot.useSnapshot)(billing.information);
};
exports.useBillingInformation = useBillingInformation;
const useBillingInformationActions = () => {
  return useBillingActions('information');
};
exports.useBillingInformationActions = useBillingInformationActions;
const usePaymentMethod = () => {
  const {
    billing
  } = getSubscriptionsState();
  return (0, _useSnapshot.useSnapshot)(billing.paymentMethod);
};
exports.usePaymentMethod = usePaymentMethod;
const usePaymentMethodActions = () => {
  return useBillingActions('paymentMethod');
};
exports.usePaymentMethodActions = usePaymentMethodActions;
const useInvoices = () => {
  const {
    billing
  } = getSubscriptionsState();
  return (0, _useSnapshot.useSnapshot)(billing.invoices);
};
exports.useInvoices = useInvoices;
const useInvoicesActions = () => {
  return useBillingActions('invoices');
};
exports.useInvoicesActions = useInvoicesActions;
const useSubscriptionCancellation = () => {
  const {
    billing
  } = getSubscriptionsState();
  const {
    cancellation
  } = (0, _useSnapshot.useSnapshot)(billing.subscription);
  return cancellation;
};
exports.useSubscriptionCancellation = useSubscriptionCancellation;
const useSubscriptionRenewal = () => {
  const {
    billing
  } = getSubscriptionsState();
  const {
    renewal
  } = (0, _useSnapshot.useSnapshot)(billing.subscription);
  return renewal;
};
exports.useSubscriptionRenewal = useSubscriptionRenewal;
const useSubscription = () => {
  const {
    billing
  } = getSubscriptionsState();
  return (0, _useSnapshot.useSnapshot)(billing.subscription);
};
exports.useSubscription = useSubscription;
const useSubscriptionActions = () => {
  const actions = (0, _FronteggStoreContext.useStore)().stateActions.subscriptions.billing.subscription;
  return (0, _extends2.default)({}, actions, {
    load: actions.loadSubscription
  });
};
exports.useSubscriptionActions = useSubscriptionActions;
const useStripeState = () => {
  const {
    stripe
  } = getSubscriptionsState();
  return (0, _useSnapshot.useSnapshot)(stripe);
};
exports.useStripeState = useStripeState;
const useStripeActions = () => {
  return (0, _FronteggStoreContext.useStore)().stateActions.subscriptions.stripe;
};
exports.useStripeActions = useStripeActions;
const useVendorPublicConfig = () => {
  return (0, _useSnapshot.useSnapshot)((0, _FronteggStoreContext.useStore)().store.subscriptions.vendorPublicConfig);
};
exports.useVendorPublicConfig = useVendorPublicConfig;
const useVendorPublicConfigActions = () => {
  return (0, _FronteggStoreContext.useStore)().stateActions.subscriptions.vendorPublicConfig;
};
exports.useVendorPublicConfigActions = useVendorPublicConfigActions;