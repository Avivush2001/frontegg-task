"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ReportsApi = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _constants = require("../constants");
var _BaseApiClient = require("../BaseApiClient");
const _excluded = ["dataFilters"],
  _excluded2 = ["templateId", "dataFilters"],
  _excluded3 = ["dataFilters"];
class ReportsApi extends _BaseApiClient.BaseApiClient {
  constructor(appName) {
    super(appName);
    this.getReports = async body => {
      return this.get(`${_constants.urls.reports.service.v2}/tenant-reports`, body);
    };
    this.getReport = async body => {
      return this.get(`${_constants.urls.reports.service.v2}/${body.id}/tenant-reports`);
    };
    this.renderReport = async _ref => {
      let {
          dataFilters
        } = _ref,
        body = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
      const html = await this.get(`${_constants.urls.reports.trigger.v1}/preview-report`, (0, _extends2.default)({}, body, {
        dataFilters: btoa(JSON.stringify(dataFilters || {})),
        responseType: 'html'
      }), {
        responseType: 'plain'
      });
      return {
        html
      };
    };
    this.scheduleReport = async _ref2 => {
      let {
          templateId,
          dataFilters
        } = _ref2,
        body = (0, _objectWithoutPropertiesLoose2.default)(_ref2, _excluded2);
      return this.post(`${_constants.urls.reports.service.v2}/${templateId}/tenant-reports`, (0, _extends2.default)({}, body, {
        dataFilters: btoa(JSON.stringify(dataFilters || {}))
      }));
    };
    this.downloadReport = async _ref3 => {
      let {
          dataFilters
        } = _ref3,
        body = (0, _objectWithoutPropertiesLoose2.default)(_ref3, _excluded3);
      const blob = await this.get(`${_constants.urls.reports.trigger.v1}/preview-report`, (0, _extends2.default)({}, body, {
        dataFilters: btoa(JSON.stringify(dataFilters || {}))
      }), {
        responseType: 'blob'
      });
      let contentType = 'text/html';
      let contentExt = 'html';
      if (body.responseType === 'pdf') {
        contentType = 'application/pdf';
        contentExt = 'pdf';
      } else if (body.responseType === 'image') {
        contentType = 'image/jpeg';
        contentExt = 'jpg';
      }
      const newBlob = new Blob([blob], {
        type: contentType
      });
      const fileURL = URL.createObjectURL(newBlob);
      const tempLink = document.createElement('a');
      tempLink.href = fileURL;
      tempLink.setAttribute('download', `report_${body.name || ''}.${contentExt}`);
      tempLink.click();
      setTimeout(tempLink.remove.bind(tempLink));
    };
    this.sendReport = async body => {
      return this.post(`${_constants.urls.reports.trigger.v1}/tenant-reports`, body);
    };
  }

  /**
   * Get all active tenant reports from reports service by active vendor.
   * Optional: pass filters and sort options to reports.
   *
   * @returns list of reports objects
   */
}
exports.ReportsApi = ReportsApi;
var _default = new ReportsApi('default');
exports.default = _default;