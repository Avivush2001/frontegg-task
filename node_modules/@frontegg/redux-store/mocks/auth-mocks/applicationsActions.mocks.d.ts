import { FronteggState, RestApi, SharedActions } from '../../interfaces';
declare const _default: (store: FronteggState, api: RestApi, actions: SharedActions) => {
    setApplicationsState: (payload: Partial<import("../..").ApplicationsState>) => void;
    resetApplicationsState: () => void;
    loadUserApplications: (payload?: import("../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    loadAccountApplications: (payload?: import("../../interfaces").WithRetryConfig<{}>) => Promise<void>;
    loadMultipleUsersApplications: ({ userIds, retryConfig }: import("../../interfaces").WithRetryConfig<{
        userIds: string[];
    }>) => Promise<Record<string, import("dist/@frontegg/rest-api").IApplicationsResponse[]> | undefined>;
    assignUserToApps: (payload: import("../../interfaces").WithCallback<import("../..").UserAppsAssignmentPayload>) => Promise<void>;
    unassignUserFromApps: (payload: import("../../interfaces").WithCallback<import("../..").UserAppsAssignmentPayload>) => Promise<void>;
    assignNewUserToApps: ({ appIds, user }: {
        appIds?: string[];
        user: import("dist/@frontegg/rest-api").ITeamUser;
    }) => Promise<((import("dist/@frontegg/rest-api").IApplicationsResponse & {
        userIds?: string[];
    }) | never[])[] | undefined>;
    mapUsersWithApplicationData: ({ shouldLoadApps, users, retryConfig, }: import("../../interfaces").WithRetryConfig<{
        shouldLoadApps?: boolean;
        users: import("dist/@frontegg/rest-api").ITeamUser[];
    }>) => Promise<import("dist/@frontegg/rest-api").ITeamUser[]>;
};
export default _default;
