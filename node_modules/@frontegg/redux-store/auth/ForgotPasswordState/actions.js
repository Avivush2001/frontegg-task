import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["callback"];
import { PasswordRecoveryStrategyEnum } from '@frontegg/rest-api';
import { ForgotPasswordStep } from './interfaces';
import { initialState } from './state';
import { errorHandler, deepResetState } from '../../helpers';
export default ((store, api, sharedActions) => {
  const actions = sharedActions;
  const setForgotPasswordState = payload => {
    Object.assign(store.auth.forgotPasswordState, payload);
  };
  const resetForgotPasswordState = () => {
    deepResetState(store, ['auth', 'forgotPasswordState'], initialState);
  };
  const forgotPassword = async payload => {
    setForgotPasswordState({
      loading: true
    });
    try {
      var _payload$callback;
      await api.auth.forgotPassword(payload);
      setForgotPasswordState({
        loading: false,
        error: undefined,
        step: ForgotPasswordStep.forgotPasswordEmailSuccess
      });
      (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, true);
    } catch (e) {
      var _payload$callback2;
      setForgotPasswordState({
        loading: false,
        error: errorHandler(e, 'Unknown error occurred')
      });
      (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, false, e);
    }
  };
  const sendPasswordRecoveryEmail = async () => {
    const {
      identifier,
      identifierType
    } = store.auth.forgotPasswordState;
    setForgotPasswordState({
      loading: true
    });
    try {
      await api.auth.resetPasswordViaEmail({
        identifier,
        identifierType
      });
      setForgotPasswordState({
        loading: false,
        error: undefined,
        step: ForgotPasswordStep.forgotPasswordEmailSuccess
      });
    } catch (e) {
      setForgotPasswordState({
        loading: false,
        error: errorHandler(e, 'An error occurred while sending recovery email')
      });
    }
  };
  const sendPasswordRecoverySms = async () => {
    const {
      identifier,
      identifierType
    } = store.auth.forgotPasswordState;
    setForgotPasswordState({
      loading: true
    });
    try {
      const response = await api.auth.resetPasswordViaSms({
        identifier,
        identifierType
      });
      setForgotPasswordState({
        loading: false,
        error: undefined,
        sessionId: response.sessionId
      });
    } catch (e) {
      setForgotPasswordState({
        loading: false,
        error: errorHandler(e, 'An error occurred while sending recovery sms')
      });
    }
  };
  const verifyPasswordViaSms = async payload => {
    const {
      sessionId
    } = store.auth.forgotPasswordState;
    if (!sessionId) {
      const error = 'Session ID not found in state for verifying password via sms.';
      setForgotPasswordState({
        loading: false,
        error
      });
      return;
    }
    setForgotPasswordState({
      loading: true
    });
    try {
      const response = await api.auth.verifyPasswordViaSms({
        otcToken: payload.otcToken,
        sessionId
      });
      if (!response.userId || !response.token) {
        const error = 'Invalid response from server: missing userId or token';
        throw new Error(error);
      }
      setForgotPasswordState({
        loading: false,
        error: undefined,
        userId: response.userId,
        token: response.token,
        step: ForgotPasswordStep.resetPasswordPage
      });
    } catch (e) {
      setForgotPasswordState({
        loading: false,
        error: errorHandler(e, 'An error occurred while verifying password via sms')
      });
    }
  };
  const determinePasswordRecoveryStrategy = async payload => {
    setForgotPasswordState({
      loading: true,
      error: undefined,
      identifier: payload.identifier,
      identifierType: payload.identifierType
    });
    try {
      const strategies = await api.auth.getPasswordRecoveryStrategies();
      const isEmailActive = strategies.some(s => s.strategy === PasswordRecoveryStrategyEnum.Email && s.isActive);
      const isSmsActive = strategies.some(s => s.strategy === PasswordRecoveryStrategyEnum.Sms && s.isActive);
      if (isEmailActive && isSmsActive) {
        setForgotPasswordState({
          loading: false,
          step: ForgotPasswordStep.passwordRecoverySelector,
          activeStrategies: strategies
        });
      } else if (isEmailActive) {
        await sendPasswordRecoveryEmail();
      } else if (isSmsActive) {
        setForgotPasswordState({
          loading: false,
          step: ForgotPasswordStep.resetPasswordViaSms,
          activeStrategies: strategies
        });
      } else {
        const error = 'No active password recovery methods found.';
        setForgotPasswordState({
          loading: false,
          error,
          activeStrategies: strategies
        });
      }
    } catch (e) {
      setForgotPasswordState({
        loading: false,
        error: errorHandler(e, 'An error occurred while determining recovery strategy')
      });
    }
  };
  const resetPassword = async payload => {
    const {
        callback
      } = payload,
      body = _objectWithoutPropertiesLoose(payload, _excluded);
    setForgotPasswordState({
      loading: true
    });
    try {
      await api.auth.resetPassword(body);
      setForgotPasswordState({
        loading: false,
        error: undefined,
        step: ForgotPasswordStep.resetPasswordSuccess
      });
      callback == null ? void 0 : callback(true);
    } catch (e) {
      setForgotPasswordState({
        loading: false,
        error: errorHandler(e)
      });
      callback == null ? void 0 : callback(false, e);
    }
  };
  const loadPasswordConfig = async payload => {
    setForgotPasswordState({
      loading: true
    });
    try {
      const passwordConfig = await api.auth.loadPasswordConfig(payload);
      setForgotPasswordState({
        loading: false,
        passwordConfig
      });
    } catch (e) {
      setForgotPasswordState({
        loading: false,
        error: errorHandler(e)
      });
    }
  };
  return {
    setForgotPasswordState,
    resetForgotPasswordState,
    forgotPassword,
    resetPassword,
    loadPasswordConfig,
    determinePasswordRecoveryStrategy,
    sendPasswordRecoveryEmail,
    sendPasswordRecoverySms,
    verifyPasswordViaSms
  };
});