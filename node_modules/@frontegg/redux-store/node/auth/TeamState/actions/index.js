"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _users = _interopRequireDefault(require("./users.actions"));
var _subTenants = _interopRequireDefault(require("./sub-tenants.actions"));
var _activationLink = _interopRequireDefault(require("./activation-link.actions"));
var _invitationLink = _interopRequireDefault(require("./invitation-link.actions"));
var _helpers = require("../../../helpers");
var _state = require("../state");
var _default = (store, api, sharedActions) => {
  const actions = sharedActions;
  const setTeamState = payload => {
    Object.assign(store.auth.teamState, payload);
  };
  const resetTeamState = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'teamState'], _state.initialState);
  };
  const setTeamLoader = payload => {
    Object.assign(store.auth.teamState, {
      loaders: (0, _extends2.default)({}, store.auth.teamState.loaders, {
        [payload.key]: payload.value
      })
    });
  };
  const setTeamError = payload => {
    Object.assign(store.auth.teamState, {
      errors: (0, _extends2.default)({}, store.auth.teamState.errors, {
        [payload.key]: payload.value
      }),
      loaders: (0, _extends2.default)({}, store.auth.teamState.loaders, {
        [payload.key]: false
      })
    });
  };
  const openAddUserDialog = payload => {
    setTeamState({
      addUserDialogState: (0, _extends2.default)({
        open: true,
        loading: false,
        error: false
      }, payload)
    });
  };
  const closeAddUserDialog = payload => {
    var _store$auth$teamState, _store$auth$teamState2;
    (_store$auth$teamState = (_store$auth$teamState2 = store.auth.teamState.addUserDialogState).onClose) == null ? void 0 : _store$auth$teamState.call(_store$auth$teamState2, payload);
    setTeamState({
      addUserDialogState: {
        loading: false,
        error: false,
        open: false
      }
    });
  };
  const openDeleteUserDialog = payload => {
    setTeamState({
      deleteUserDialogState: (0, _extends2.default)({
        open: true,
        loading: false,
        error: false
      }, payload)
    });
  };
  const closeDeleteUserDialog = payload => {
    var _store$auth$teamState3, _store$auth$teamState4;
    (_store$auth$teamState3 = (_store$auth$teamState4 = store.auth.teamState.deleteUserDialogState).onClose) == null ? void 0 : _store$auth$teamState3.call(_store$auth$teamState4, payload);
    setTeamState({
      deleteUserDialogState: {
        loading: false,
        error: false,
        open: false
      }
    });
  };
  const lockUser = async payload => {};
  // openLockUserDialog: (payload?: ISetDeleteUserDialog) => void;
  // closeLockUserDialog: (payload?: any) => void;

  return (0, _extends2.default)({
    setTeamLoader,
    setTeamError,
    setTeamState,
    resetTeamState,
    openAddUserDialog,
    closeAddUserDialog,
    openDeleteUserDialog,
    closeDeleteUserDialog,
    lockUser
  }, (0, _users.default)(store, api, sharedActions), (0, _subTenants.default)(store, api, sharedActions), (0, _activationLink.default)(store, api, sharedActions), (0, _invitationLink.default)(store, api, sharedActions));
};
exports.default = _default;