import { CheckoutActions, CheckoutState, PaymentProviderConfigActions, PaymentProviderConfigState, PlansActions, PlansState, StripeActions, StripeState, SubscriptionState, BillingInformationState, InvoicesState, PaymentMethodState, BillingStateActions, VendorPublicConfigurationState, VendorPublicConfigurationActions } from '@frontegg/redux-store';
export declare const usePaymentProvider: () => PaymentProviderConfigState;
export declare const usePaymentProviderActions: () => PaymentProviderConfigActions;
export declare const usePlans: () => PlansState;
export declare const usePlansActions: () => PlansActions;
export declare const useCheckout: () => CheckoutState;
export declare const useCheckoutActions: () => CheckoutActions;
export declare const useBillingInformation: () => BillingInformationState;
export declare const useBillingInformationActions: () => {
    setBillingInformationState: (state: Partial<BillingInformationState>) => void;
    resetBillingInformationState: () => void;
    loadSummaries: (tenantId: string, forceActive?: boolean) => Promise<void>;
    loadBillingInformation: (forceActive?: boolean) => Promise<void>;
};
export declare const usePaymentMethod: () => PaymentMethodState;
export declare const usePaymentMethodActions: () => {
    setBillingPaymentMethodState: (state: Partial<{}>) => void;
    resetBillingPaymentMethodState: () => void;
    loadPaymentMethod: () => Promise<void>;
    submitPaymentMethod: () => Promise<void>;
    submitPaymentMethodError: (error: import("dist/@frontegg/rest-api").FronteggApiError) => Promise<void>;
    submitPaymentMethodSuccess: () => Promise<void>;
    updatePaymentMethodBillingDetails: (payload: import("@frontegg/redux-store").WithCallback<import("@frontegg/redux-store").WithId<import("dist/@frontegg/rest-api").ISubscriptionUpdatePaymentMethodBillingDetails>>) => Promise<void>;
};
export declare const useInvoices: () => InvoicesState;
export declare const useInvoicesActions: () => {
    setBillingInvoiceState: (state: Partial<InvoicesState>) => void;
    resetBillingInvoiceState: () => void;
    loadInvoices: () => Promise<void>;
    loadBillingInvoices: () => Promise<void>;
    downloadInvoice: (payload: import("@frontegg/redux-store").DownloadInvoiceActionPayload) => Promise<void>;
    downloadBillingInvoice: (payload: import("@frontegg/redux-store").DownloadInvoiceActionPayload) => Promise<void>;
};
export declare const useSubscriptionCancellation: () => SubscriptionState["cancellation"];
export declare const useSubscriptionRenewal: () => SubscriptionState["renewal"];
export declare const useSubscription: () => SubscriptionState;
export declare const useSubscriptionActions: () => BillingStateActions["subscription"] & {
    load: () => void;
};
export declare const useStripeState: () => StripeState;
export declare const useStripeActions: () => StripeActions;
export declare const useVendorPublicConfig: () => VendorPublicConfigurationState;
export declare const useVendorPublicConfigActions: () => VendorPublicConfigurationActions;
