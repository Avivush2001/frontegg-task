"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  AuthenticationApi: true,
  FRONTEGG_SEPARATE_TABS_BY_TENANT: true,
  setTabTenantInSessionStorage: true,
  getTabTenantFromSessionStorage: true,
  getCurrentUserTenantsFunction: true,
  removeTabTenantFromSessionStorage: true
};
exports.AuthenticationApi = void 0;
Object.defineProperty(exports, "FRONTEGG_SEPARATE_TABS_BY_TENANT", {
  enumerable: true,
  get: function () {
    return _constants.FRONTEGG_SEPARATE_TABS_BY_TENANT;
  }
});
exports.default = void 0;
Object.defineProperty(exports, "getCurrentUserTenantsFunction", {
  enumerable: true,
  get: function () {
    return _utils.getCurrentUserTenantsFunction;
  }
});
Object.defineProperty(exports, "getTabTenantFromSessionStorage", {
  enumerable: true,
  get: function () {
    return _utils.getTabTenantFromSessionStorage;
  }
});
Object.defineProperty(exports, "removeTabTenantFromSessionStorage", {
  enumerable: true,
  get: function () {
    return _utils.removeTabTenantFromSessionStorage;
  }
});
Object.defineProperty(exports, "setTabTenantInSessionStorage", {
  enumerable: true,
  get: function () {
    return _utils.setTabTenantInSessionStorage;
  }
});
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _secutiryPoilicy = require("./secutiry-poilicy");
Object.keys(_secutiryPoilicy).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _secutiryPoilicy[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _secutiryPoilicy[key];
    }
  });
});
var _enums = require("./enums");
Object.keys(_enums).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _enums[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _enums[key];
    }
  });
});
var _constants = require("./constants");
var _utils = require("./utils");
var _constants2 = require("../constants");
var _jwt = require("../jwt");
var _interfaces = require("./interfaces");
var _featureFlags = require("../feature-flags");
var _tenants = require("../tenants");
var _BaseApiClient = require("../BaseApiClient");
var _entitlements = require("../entitlements");
var _ContextHolder = require("../ContextHolder");
const _excluded = ["type"],
  _excluded2 = ["type"],
  _excluded3 = ["type"];
class AuthenticationApi extends _BaseApiClient.BaseApiClient {
  constructor(appName) {
    super(appName);
    this.tenantsApi = new _tenants.TenantsApi(this.appName);
    this.entitlementsApi = new _entitlements.EntitlementsApi(this.appName);
    this.securityPolicy = new _secutiryPoilicy.SecurityPolicyApi(this.appName);
    this.generateLoginResponse = async loginResponse => {
      if (!loginResponse.accessToken) {
        return loginResponse;
      }
      const contextHolder = _ContextHolder.ContextHolder.for(this.appName);
      contextHolder.setAccessToken(loginResponse.accessToken);
      const me = await this.getMeAndEntitlements();
      const decodedContent = loginResponse.accessToken ? (0, _jwt.jwtDecode)(loginResponse.accessToken) : {};
      const user = (0, _extends2.default)({}, loginResponse, decodedContent, me);
      contextHolder.setUser(user);
      return user;
    };
    this.generateLoginResponseV2 = async loginResponse => {
      if (!loginResponse.accessToken) {
        return {
          user: loginResponse
        };
      }
      const contextHolder = _ContextHolder.ContextHolder.for(this.appName);
      contextHolder.setAccessToken(loginResponse.accessToken);
      const [me, tenants] = await Promise.all([this.getMeAndEntitlements(), this.tenantsApi.getTenants()]);
      const decodedContent = loginResponse.accessToken ? (0, _jwt.jwtDecode)(loginResponse.accessToken) : {};
      const user = (0, _extends2.default)({}, loginResponse, decodedContent, me);
      contextHolder.setUser(user);
      return {
        user,
        tenants
      };
    };
    this.generateLoginResponseV3 = async loginResponse => {
      const {
        accessToken
      } = loginResponse;
      if (!accessToken) {
        return {
          user: loginResponse
        };
      }
      const contextHolder = _ContextHolder.ContextHolder.for(this.appName);
      contextHolder.setAccessToken(accessToken);
      const [me, currentUserTenants] = await Promise.all([this.getMeAndEntitlements(), (0, _utils.getCurrentUserTenantsFunction)(this.appName)()]);
      const decodedContent = accessToken ? (0, _jwt.jwtDecode)(accessToken) : {};
      const user = (0, _extends2.default)({}, loginResponse, decodedContent, me);
      if (contextHolder.isSessionPerTenantEnabled()) {
        (0, _utils.setTabTenantInSessionStorage)(user.tenantId);
      }
      contextHolder.setUser(user);
      return {
        user,
        tenants: currentUserTenants.tenants,
        activeTenant: currentUserTenants.activeTenant
      };
    };
    this.generateLoginResponseFromOAuthResponse = async oauthResponse => {
      const contextHolder = _ContextHolder.ContextHolder.for(this.appName);
      contextHolder.setAccessToken(oauthResponse.id_token);
      const me = await this.getMeAndEntitlements();
      const decodedContent = oauthResponse.id_token ? (0, _jwt.jwtDecode)(oauthResponse.id_token) : {};
      const user = (0, _extends2.default)({
        mfaRequired: false,
        accessToken: oauthResponse.id_token,
        refreshToken: oauthResponse.refresh_token
      }, decodedContent, me, {
        expiresIn: oauthResponse.expires_in || 300
      });
      contextHolder.setUser(user);
      return user;
    };
    this.generateLoginResponseFromOAuthResponseV2 = async oauthResponse => {
      const contextHolder = _ContextHolder.ContextHolder.for(this.appName);
      contextHolder.setAccessToken(oauthResponse.id_token);
      const [me, currentUserTenants] = await Promise.all([this.getMeAndEntitlements(), (0, _utils.getCurrentUserTenantsFunction)(this.appName)()]);
      const decodedContent = oauthResponse.id_token ? (0, _jwt.jwtDecode)(oauthResponse.id_token) : {};
      const user = (0, _extends2.default)({
        mfaRequired: false,
        accessToken: oauthResponse.id_token,
        refreshToken: oauthResponse.refresh_token
      }, decodedContent, me, {
        expiresIn: oauthResponse.expires_in || 300
      });
      if (contextHolder.isSessionPerTenantEnabled()) {
        (0, _utils.setTabTenantInSessionStorage)(user.tenantId);
      }
      contextHolder.setUser(user);
      return {
        user,
        tenants: currentUserTenants.tenants,
        activeTenant: currentUserTenants.activeTenant
      };
    };
    this.preLogin = async body => {
      try {
        const {
          address
        } = await this.post(`${_constants2.urls.identity.auth.v1}/user/saml/prelogin`, body);
        return address;
      } catch {
        return null;
      }
    };
    this.preLoginWithIdpType = async body => {
      return this.post(`${_constants2.urls.identity.auth.v1}/user/saml/prelogin`, body);
    };
    this.postLogin = async body => {
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user/saml/postlogin`, body);
      return this.generateLoginResponse(data);
    };
    this.oidcPostLogin = async body => {
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user/oidc/postlogin`, body);
      return this.generateLoginResponse(data);
    };
    this.login = async body => {
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user`, body);
      return this.generateLoginResponse(data);
    };
    this.loginv2 = async body => {
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user`, body);
      return this.generateLoginResponseV3(data);
    };
    this.loginWithMfa = async body => {
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/verify`, body);
      return this.generateLoginResponse(data);
    };
    this.loginWithMfaV2 = async body => {
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/verify`, body);
      return this.generateLoginResponseV3(data);
    };
    this.activateAccount = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/activate`, body);
    };
    this.activateAccountV2 = async body => {
      const data = await this.post(`${_constants2.urls.identity.users.v1}/activate`, body);
      return this.generateLoginResponseV3(data);
    };
    this.activateAccountWithOTC = async body => {
      const data = await this.post(`${_constants2.urls.identity.users.v1}/activate/code`, body);
      return this.generateLoginResponseV3(data);
    };
    this.getActivateAccountStrategy = async params => {
      return this.get(`${_constants2.urls.identity.users.v1}/activate/strategy`, params);
    };
    this.resendActivationEmail = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/activate/reset`, body);
    };
    this.resendInvitationEmail = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/invitation/reset`, body);
    };
    this.acceptInvitation = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/invitation/accept`, body);
    };
    this.acceptInvitationWithOTC = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/invitation/accept/code`, body);
    };
    this.refreshToken = async () => {
      const tabTenantId = (0, _utils.getTabTenantFromSessionStorage)(this.appName);
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user/token/refresh`, {
        tenantId: tabTenantId
      });
      return this.generateLoginResponse(data);
    };
    this.refreshTokenV2 = async () => {
      const tabTenantId = (0, _utils.getTabTenantFromSessionStorage)(this.appName);
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user/token/refresh`, {
        tenantId: tabTenantId
      });
      return this.generateLoginResponseV2(data);
    };
    this.refreshTokenV3 = async () => {
      const tabTenantId = (0, _utils.getTabTenantFromSessionStorage)(this.appName);
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user/token/refresh`, {
        tenantId: tabTenantId
      });
      return this.generateLoginResponseV3(data);
    };
    this.logout = async () => {
      return this.post(`${_constants2.urls.identity.auth.v1}/logout`);
    };
    this.OAuthLogout = async params => {
      return this.get(`${_constants2.urls.oauth.v1}/logout`, params);
    };
    this.forgotPassword = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/passwords/reset`, body);
    };
    this.resetPassword = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/passwords/reset/verify`, body);
    };
    this.resetPasswordViaEmail = async body => {
      return this.post(`${_constants2.urls.identity.users.v2}/passwords/reset/email`, body);
    };
    this.resetPasswordViaSms = async body => {
      return this.post(`${_constants2.urls.identity.users.v2}/passwords/reset/sms`, body);
    };
    this.verifyPasswordViaSms = async body => {
      return this.post(`${_constants2.urls.identity.users.v2}/passwords/reset/sms/verify`, body);
    };
    this.getPasswordRecoveryStrategies = async () => {
      return this.get(`${_constants2.urls.identity.configurations.v1}/password-recovery/strategies`);
    };
    this.loadPasswordConfig = async params => {
      return this.get(`${_constants2.urls.identity.users.v1}/passwords/config`, params);
    };
    this.getSignUpStrategies = async () => {
      return this.get(`${_constants2.urls.identity.signup.v1.strategies}`);
    };
    this.recoverMfaToken = async body => {
      return this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/recover`, body);
    };
    this.enrollMfa = async () => {
      return this.post(`${_constants2.urls.identity.users.v1}/mfa/enroll`);
    };
    this.preEnrollMFAAuthenticatorApp = async () => {
      return this.post(`${_constants2.urls.identity.users.v1}/mfa/authenticator/enroll`);
    };
    this.enrollMFAAuthenticatorApp = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/mfa/authenticator/enroll/verify`, body);
    };
    this.preEnrollMFASMS = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/mfa/sms/enroll`, body);
    };
    this.enrollMFASMS = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/mfa/sms/enroll/verify`, body);
    };
    this.preEnrollMFAWebAuthn = async () => {
      return this.post(`${_constants2.urls.identity.users.v1}/mfa/webauthn/enroll`);
    };
    this.enrollMFAWebAuthn = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/mfa/webauthn/enroll/verify`, body);
    };
    this.verifyMfa = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/mfa/enroll/verify`, body);
    };
    this.disableMfa = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/mfa/disable`, body);
    };
    this.disableMFAAuthenticatorApp = async (deviceId, body) => {
      return this.post(`${_constants2.urls.identity.users.v1}/mfa/authenticator/${deviceId}/disable/verify`, body);
    };
    this.preDisableMFASMS = async deviceId => {
      return this.post(`${_constants2.urls.identity.users.v1}/mfa/sms/${deviceId}/disable`);
    };
    this.disableMFASMS = async (deviceId, body) => {
      return this.post(`${_constants2.urls.identity.users.v1}/mfa/sms/${deviceId}/disable/verify`, body);
    };
    this.preDisableMFAWebAuthn = async deviceId => {
      return this.post(`${_constants2.urls.identity.users.v1}/mfa/webauthn/${deviceId}/disable`);
    };
    this.disableMFAWebAuthn = async (deviceId, body) => {
      return this.post(`${_constants2.urls.identity.users.v1}/mfa/webauthn/${deviceId}/disable/verify`, body);
    };
    this.getMFADevices = async () => {
      return this.get(`${_constants2.urls.identity.users.v1}/mfa/devices`);
    };
    this.preEnrollMFAAuthenticatorAppForLogin = async body => {
      return this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/authenticator/enroll`, body);
    };
    this.enrollMFAAuthenticatorAppForLogin = async body => {
      return this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/authenticator/enroll/verify`, body);
    };
    this.enrollMFAAuthenticatorAppForLoginV2 = async body => {
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/authenticator/enroll/verify`, body);
      return this.generateLoginResponseV3(data);
    };
    this.verifyMFAAuthenticatorAppForLogin = async (deviceId, body) => {
      return this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/authenticator/${deviceId}/verify`, body);
    };
    this.preVerifyMFAEmailCode = async body => {
      return this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/emailcode`, body);
    };
    this.verifyMFAEmailCode = async body => {
      return this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/emailcode/verify`, body);
    };
    this.verifyMFAEmailCodeV2 = async body => {
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/emailcode/verify`, body);
      return this.generateLoginResponseV3(data);
    };
    this.preEnrollMFASMSForLogin = async body => {
      return this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/sms/enroll`, body);
    };
    this.enrollMFASMSForLogin = async body => {
      return this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/sms/enroll/verify`, body);
    };
    this.enrollMFASMSForLoginV2 = async body => {
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/sms/enroll/verify`, body);
      return this.generateLoginResponseV3(data);
    };
    this.preVerifyMFASMSForLogin = async (deviceId, body) => {
      return this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/sms/${deviceId}`, body);
    };
    this.verifyMFASMSForLogin = async (deviceId, body) => {
      return this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/sms/${deviceId}/verify`, body);
    };
    this.verifyMFASMSForLoginV2 = async (deviceId, body) => {
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/sms/${deviceId}/verify`, body);
      return this.generateLoginResponseV3(data);
    };
    this.preEnrollMFAWebAuthnForLogin = async body => {
      return this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/webauthn/enroll`, body);
    };
    this.enrollMFAWebAuthnForLogin = async body => {
      return this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/webauthn/enroll/verify`, body);
    };
    this.enrollMFAWebAuthnForLoginV2 = async body => {
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/webauthn/enroll/verify`, body);
      return this.generateLoginResponseV3(data);
    };
    this.preVerifyMFAWebAuthnForLogin = async (deviceId, body) => {
      return this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/webauthn/${deviceId}`, body);
    };
    this.verifyMFAWebAuthnForLogin = async (deviceId, body) => {
      return this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/webauthn/${deviceId}/verify`, body);
    };
    this.verifyMFAWebAuthnForLoginV2 = async (deviceId, body) => {
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user/mfa/webauthn/${deviceId}/verify`, body);
      return this.generateLoginResponseV3(data);
    };
    this.getSamlConfiguration = async () => {
      return this.get(`${_constants2.urls.team.sso.v1}/saml/configurations`);
    };
    this.updateSamlConfiguration = async body => {
      return this.post(`${_constants2.urls.team.sso.v1}/saml/configurations`, body);
    };
    this.getSamlVendorConfiguration = async () => {
      return this.get(`${_constants2.urls.team.sso.v1}/saml/configurations/vendor-config`);
    };
    this.updateSamlVendorMetadata = async body => {
      return this.put(`${_constants2.urls.team.sso.v1}/saml/configurations/metadata`, body);
    };
    this.validateSamlDomain = async () => {
      return this.put(`${_constants2.urls.team.sso.v1}/saml/validations/domain`);
    };
    this.getSamlRoles = async () => {
      return this.get(`${_constants2.urls.team.sso.v1}/saml/configurations/roles/default`);
    };
    this.getSamlRolesGroups = async () => {
      return this.get(`${_constants2.urls.team.sso.v2}/saml/configurations/groups`);
    };
    this.updateSamlRoles = async ({
      roleIds
    }) => {
      return this.post(`${_constants2.urls.team.sso.v1}/saml/configurations/roles/default`, {
        roleIds
      });
    };
    this.createSamlGroup = async ({
      roleIds,
      group
    }) => {
      return this.post(`${_constants2.urls.team.sso.v2}/saml/configurations/groups`, {
        group,
        roleIds
      });
    };
    this.updateSamlGroup = async ({
      roleIds,
      group,
      id
    }) => {
      return this.patch(`${_constants2.urls.team.sso.v2}/saml/configurations/groups/${id}`, {
        group,
        roleIds
      });
    };
    this.deleteSamlGroup = async ({
      id
    }) => {
      return this.delete(`${_constants2.urls.team.sso.v2}/saml/configurations/groups/${id}`);
    };
    this.getOidcConfiguration = async () => {
      return this.get(`${_constants2.urls.team.sso.v1}/oidc/configurations`);
    };
    this.getSSOPublicConfiguration = async () => {
      return this.get(`${_constants2.urls.team.sso.v2}/configurations/public`);
    };
    this.getSocialLoginProviders = async () => {
      return this.get(_constants2.urls.identity.sso.v1);
    };
    this.getSocialLoginProvidersV2 = async () => {
      return this.get(_constants2.urls.identity.sso.v2);
    };
    this.getSocialLoginProvidersV2ForAuthenticatedUser = async () => {
      return this.get(`${_constants2.urls.identity.sso.v2}/authenticated`);
    };
    this.getCustomSocialLoginProvidersV1 = async () => {
      return this.get(_constants2.urls.identity.sso.custom.v1);
    };
    this.loginViaSocialLogin = async params => {
      const queryParams = {};
      if (params.code) {
        queryParams.code = params.code;
      }
      if (params.idToken) {
        queryParams.id_token = params.idToken;
      }
      if (params.redirectUri) {
        queryParams.redirectUri = params.redirectUri;
      }
      if (params.codeVerifier) {
        queryParams.code_verifier = params.codeVerifier;
      }
      if (params.codeVerifierPkce) {
        queryParams.code_verifier_pkce = params.codeVerifierPkce;
      }
      if (params.state) {
        queryParams.state = params.state;
      }
      return this.post(`${_constants2.urls.identity.auth.v1}/user/sso/${params.provider}/postlogin`, {
        metadata: params.metadata,
        invitationToken: params.invitationToken
      }, {
        params: queryParams
      });
    };
    this.getVendorConfig = async () => {
      return this.get(`${_constants2.urls.identity.configurations.v1}/public`);
    };
    this.signUpUser = async body => {
      const {
        shouldActivate,
        authResponse,
        userId,
        tenantId,
        activationToken
      } = await this.post(`${_constants2.urls.identity.users.v1}/signUp`, body);
      const response = {
        shouldActivate,
        userId,
        tenantId
      };
      if (!shouldActivate && authResponse) {
        const {
          user,
          tenants,
          activeTenant
        } = await this.generateLoginResponseV3(authResponse);
        return (0, _extends2.default)({}, response, {
          user,
          tenants,
          activeTenant
        });
      }
      return (0, _extends2.default)({}, response, {
        activationToken
      });
    };
    this.signUpUserWithPhoneNumber = async body => {
      const {
        shouldActivate,
        authResponse,
        userId,
        tenantId,
        activationToken
      } = await this.post(`${_constants2.urls.identity.users.v1}/signUp/phoneNumber`, body);
      const response = {
        shouldActivate,
        userId,
        tenantId
      };
      if (!shouldActivate && authResponse) {
        const {
          user,
          tenants,
          activeTenant
        } = await this.generateLoginResponseV3(authResponse);
        return (0, _extends2.default)({}, response, {
          user,
          tenants,
          activeTenant
        });
      }
      return (0, _extends2.default)({}, response, {
        activationToken
      });
    };
    this.getCurrentUserSessions = async () => {
      return this.get(_constants2.urls.identity.users.sessions.currentUser.v1);
    };
    this.getCurrentUserSession = async () => {
      return this.get(`${_constants2.urls.identity.users.sessions.currentUser.v1}/current`);
    };
    this.revokeSessionsForUser = async userId => {
      return this.post(`${_constants2.urls.identity.users.sessions.v1}/revoke`, {
        userId
      });
    };
    this.getSessionConfigurations = async () => {
      return this.get(_constants2.urls.identity.users.sessions.configurations.v1);
    };
    this.createOrUpdateSessionConfigrations = async body => {
      await this.post(_constants2.urls.identity.users.sessions.configurations.v1, body);
    };
    this.deleteSessionForUser = async id => {
      await this.delete(`${_constants2.urls.identity.users.sessions.currentUser.v1}/${id}`);
    };
    this.deleteAllSessionsForUser = async () => {
      await this.delete(`${_constants2.urls.identity.users.sessions.currentUser.v1}/all`);
    };
    this.getUserAccessTokensData = async () => {
      return this.get(_constants2.urls.identity.users.accessTokens.v1);
    };
    this.getTenantAccessTokensData = async () => {
      return this.get(_constants2.urls.identity.tenants.accessTokens.v1);
    };
    this.deleteTenantAccessToken = async ({
      id
    }) => {
      await this.delete(`${_constants2.urls.identity.tenants.accessTokens.v1}/${id}`);
    };
    this.deleteUserAccessToken = async ({
      id
    }) => {
      await this.delete(`${_constants2.urls.identity.users.accessTokens.v1}/${id}`);
    };
    this.createUserAccessToken = async body => {
      return this.post(_constants2.urls.identity.users.accessTokens.v1, body);
    };
    this.createTenantAccessToken = async body => {
      return this.post(_constants2.urls.identity.tenants.accessTokens.v1, body);
    };
    this.getUserApiTokensData = async () => {
      return this.get(_constants2.urls.identity.users.apiTokens.v1);
    };
    this.getTenantApiTokensData = async () => {
      return this.get(_constants2.urls.identity.tenants.apiTokens.v1);
    };
    this.updateUserApiTokensData = async body => {
      return this.post(_constants2.urls.identity.users.apiTokens.v1, body);
    };
    this.updateTenantApiTokensData = async body => {
      return this.post(_constants2.urls.identity.tenants.apiTokens.v2, body);
    };
    this.deleteTenantApiToken = async ({
      tokenId
    }) => {
      await this.delete(`${_constants2.urls.identity.tenants.apiTokens.v1}/${tokenId}`);
    };
    this.deleteUserApiToken = async ({
      tokenId
    }) => {
      await this.delete(`${_constants2.urls.identity.users.apiTokens.v1}/${tokenId}`);
    };
    this.getUserById = async ({
      userId
    }) => {
      return this.get(`${_constants2.urls.identity.users.v1}/${userId}`);
    };
    this.checkIfAllowToRememberMfaDevice = async mfaToken => {
      return this.get(`${_constants2.urls.identity.configurations.v1}/mfa-policy/allow-remember-device`, {
        mfaToken
      });
    };
    this.passwordlessPreLogin = async _ref => {
      var _usernameToTypeMapper;
      let {
          type
        } = _ref,
        body = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
      const usernameToTypeMapper = {
        [_enums.AuthStrategyEnum.UsernameAndCode]: _enums.AuthStrategyEnum.Code,
        [_enums.AuthStrategyEnum.UsernameAndMagicLink]: _enums.AuthStrategyEnum.MagicLink,
        [_enums.AuthStrategyEnum.UsernameAndSms]: _enums.AuthStrategyEnum.SmsCode,
        [_enums.AuthStrategyEnum.UsernameAndPassword]: _enums.AuthStrategyEnum.EmailAndPassword
      };
      const mappedType = ((_usernameToTypeMapper = usernameToTypeMapper[type]) == null ? void 0 : _usernameToTypeMapper.toLowerCase()) || type.toLowerCase();
      return this.post(`${_constants2.urls.identity.auth.v1}/passwordless/${mappedType}/prelogin`, body);
    };
    this.passwordlessPostLoginV2 = async _ref2 => {
      let {
          type
        } = _ref2,
        body = (0, _objectWithoutPropertiesLoose2.default)(_ref2, _excluded2);
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/passwordless/${type.toLocaleLowerCase()}/postlogin`, body);
      return this.generateLoginResponseV3(data);
    };
    this.passwordlessPostLogin = async _ref3 => {
      let {
          type
        } = _ref3,
        body = (0, _objectWithoutPropertiesLoose2.default)(_ref3, _excluded3);
      return this.post(`${_constants2.urls.identity.auth.v1}/passwordless/${type.toLocaleLowerCase()}/postlogin`, body);
    };
    this.verifyInviteToken = async ({
      token
    }) => {
      return this.post(_constants2.urls.identity.tenants.invites.verify.v1, {
        token
      });
    };
    this.getSSOConfigurations = async () => {
      return this.get(`${_constants2.urls.team.sso.v1}/configurations`);
    };
    this.createSSOConfiguration = async body => {
      return this.post(`${_constants2.urls.team.sso.v1}/configurations`, body);
    };
    this.updateSSOConfiguration = async (ssoConfigId, body) => {
      return this.patch(`${_constants2.urls.team.sso.v1}/configurations/${ssoConfigId}`, body);
    };
    this.deleteSSOConfiguration = async ssoConfigId => {
      await this.delete(`${_constants2.urls.team.sso.v1}/configurations/${ssoConfigId}`);
    };
    this.createSSOConfigurationByMetadata = async body => {
      return this.post(`${_constants2.urls.team.sso.v1}/configurations/metadata`, body);
    };
    this.updateSSOConfigurationByMetadata = async (ssoConfigId, body) => {
      return this.put(`${_constants2.urls.team.sso.v1}/configurations/${ssoConfigId}/metadata`, body);
    };
    this.createSSOConfigurationByMetadataUrl = async body => {
      return this.post(`${_constants2.urls.team.sso.v1}/configurations/metadata-url`, body);
    };
    this.updateSSOConfigurationByMetadataUrl = async (ssoConfigId, body) => {
      return this.put(`${_constants2.urls.team.sso.v1}/configurations/${ssoConfigId}/metadata-url`, body);
    };
    this.createSSODomain = async (ssoConfigId, body) => {
      return this.post(`${_constants2.urls.team.sso.v1}/configurations/${ssoConfigId}/domains`, body);
    };
    this.deleteSSODomain = async (ssoConfigId, domainId) => {
      return this.delete(`${_constants2.urls.team.sso.v1}/configurations/${ssoConfigId}/domains/${domainId}`);
    };
    this.validateSSODomain = async (ssoConfigId, domainId) => {
      return this.put(`${_constants2.urls.team.sso.v1}/configurations/${ssoConfigId}/domains/${domainId}/validate`);
    };
    this.validateSSODomainV2 = async (ssoConfigId, domainId) => {
      return this.put(`${_constants2.urls.team.sso.v2}/configurations/${ssoConfigId}/domains/${domainId}/validate`);
    };
    this.getSSODefaultRoles = async ssoConfigId => {
      return this.get(`${_constants2.urls.team.sso.v1}/configurations/${ssoConfigId}/roles`);
    };
    this.setSSODefaultRoles = async (ssoConfigId, body) => {
      return this.put(`${_constants2.urls.team.sso.v1}/configurations/${ssoConfigId}/roles`, body);
    };
    this.createSSOGroup = async (ssoConfigId, body) => {
      return this.post(`${_constants2.urls.team.sso.v1}/configurations/${ssoConfigId}/groups`, body);
    };
    this.updateSSOGroup = async (ssoConfigId, {
      roleIds,
      group,
      id
    }) => {
      return this.patch(`${_constants2.urls.team.sso.v1}/configurations/${ssoConfigId}/groups/${id}`, {
        group,
        roleIds
      });
    };
    this.deleteSSOGroup = async (ssoConfigId, groupId) => {
      return this.delete(`${_constants2.urls.team.sso.v1}/configurations/${ssoConfigId}/groups/${groupId}`);
    };
    this.getSSOGroups = async ssoConfigId => {
      return this.get(`${_constants2.urls.team.sso.v1}/configurations/${ssoConfigId}/groups`);
    };
    this.preLoginV2 = async body => {
      return this.post(`${_constants2.urls.identity.auth.v2}/user/sso/prelogin`, body);
    };
    this.oidcPostLoginV2 = async body => {
      const data = await this.post(`${_constants2.urls.identity.auth.v2}/user/oidc/postlogin`, body);
      return this.generateLoginResponse(data);
    };
    this.exchangeOAuthTokensV2 = async body => {
      const data = await this.post(`${_constants2.urls.oauth.v1}/token`, body);
      return this.generateLoginResponseFromOAuthResponseV2(data);
    };
    this.silentOAuthRefreshTokenV2 = async () => {
      const tabTenantId = (0, _utils.getTabTenantFromSessionStorage)(this.appName);
      const data = await this.post(`${_constants2.urls.oauth.v1}/authorize/silent`, {
        tenantId: tabTenantId
      });
      return this.generateLoginResponseFromOAuthResponseV2(data);
    };
    this.exchangeOAuthTokens = async body => {
      const data = await this.post(`${_constants2.urls.oauth.v1}/token`, body);
      return this.generateLoginResponseFromOAuthResponse(data);
    };
    this.silentOAuthRefreshToken = async () => {
      const tabTenantId = (0, _utils.getTabTenantFromSessionStorage)(this.appName);
      const data = await this.post(`${_constants2.urls.oauth.v1}/authorize/silent`, {
        tenantId: tabTenantId
      });
      return this.generateLoginResponseFromOAuthResponse(data);
    };
    this.resetPhoneNumber = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/phone/reset`, body);
    };
    this.verifyResetPhoneNumber = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/phone/reset/verify`, body);
    };
    this.changePhoneNumberWithVerification = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/phone`, body);
    };
    this.verifyChangePhoneNumber = async body => {
      return this.post(`${_constants2.urls.identity.users.v1}/phone/verify`, body);
    };
    this.changePhoneNumber = async body => {
      return this.put(`${_constants2.urls.identity.users.v1}/phone/change`, body);
    };
    this.webAuthnPreLogin = async body => {
      return this.post(`${_constants2.urls.identity.auth.v1}/webauthn/prelogin`, body);
    };
    this.webAuthnPostLogin = async body => {
      return this.post(`${_constants2.urls.identity.auth.v1}/webauthn/postlogin`, body);
    };
    this.webAuthnPostLoginV2 = async body => {
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/webauthn/postlogin`, body);
      return this.generateLoginResponseV3(data);
    };
    this.webAuthnCreateNewDeviceSession = async () => {
      return this.post(_constants2.urls.identity.webAuthnDevices.v1);
    };
    this.getWebAuthnDevices = async () => {
      return this.get(_constants2.urls.identity.webAuthnDevices.v1);
    };
    this.deleteWebAuthnDevice = async deviceId => {
      return this.delete(`${_constants2.urls.identity.webAuthnDevices.v1}/${deviceId}`);
    };
    this.verifyNewDeviceSession = async body => {
      return this.post(`${_constants2.urls.identity.webAuthnDevices.v1}/verify`, body);
    };
    this.getVendorPublicAuthStrategiesConfig = async () => {
      return this.get(`${_constants2.urls.identity.configurations.v1}/auth/strategies/public`);
    };
    this.getPublicAuthStrategiesConfigForAuthenticatedUser = async () => {
      return this.get(`${_constants2.urls.identity.configurations.v1}/auth/strategies`);
    };
    this.getMFAStrategiesConfig = async () => {
      return this.get(`${_constants2.urls.identity.configurations.v1}/mfa/strategies`);
    };
    this.getUserAuthorization = async () => {
      return this.get(`${_constants2.urls.identity.users.authorization.v1}`);
    };
    this.getMeV2 = async () => {
      return this.get(`${_constants2.urls.identity.users.v2}/me`);
    };
    this.noThrowLoadEntitlements = async () => {
      try {
        return await this.entitlementsApi.loadEntitlementsV2();
      } catch (e) {
        // return undefined if entitlements failed to load
      }
    };
    this.getMeAndEntitlements = async () => {
      const shouldSkipUserLoad = _ContextHolder.ContextHolder.for(this.appName).shouldSkipUserLoad();
      // introduced this ability to reduce the number of requests to the server in hosted login
      if (shouldSkipUserLoad) {
        return {
          roles: [],
          permissions: [],
          groups: [],
          tenants: []
        };
      }
      const actions = [{
        action: this.getMeV2,
        shouldLoad: true
      }, {
        action: this.noThrowLoadEntitlements,
        shouldLoad: this.shouldLoadEntitlements()
      }, {
        action: this.getUserAuthorization,
        shouldLoad: this.shouldLoadMeAuthorization()
      }];
      const promises = actions.map(action => (0, _utils.executeConditionalPromise)(action));
      const [me, entitlements, authorization] = await Promise.all(promises);
      const tabTenant = (0, _utils.getTabTenantFromSessionStorage)(this.appName);
      if (tabTenant) {
        me.tenantId = tabTenant;
      }
      return (0, _extends2.default)({}, me, authorization != null ? authorization : {}, {
        entitlements
      });
    };
    this.generateStepupSession = async body => {
      const data = await this.post(`${_constants2.urls.identity.auth.v1}/user/step-up/generate`, body);
      if (!data.accessToken) {
        return data;
      }
      return this.generateLoginResponseV3(data);
    };
    this.getGlobalSecurityPolicy = this.securityPolicy.getGlobalSecurityPolicy.bind(this.securityPolicy);
    this.getMfaPolicy = this.securityPolicy.getMfaPolicy.bind(this.securityPolicy);
    this.getVendorMfaPolicy = this.securityPolicy.getVendorMfaPolicy.bind(this.securityPolicy);
    this.saveMfaPolicy = this.securityPolicy.saveMfaPolicy.bind(this.securityPolicy);
    this.getLockoutPolicy = this.securityPolicy.getLockoutPolicy.bind(this.securityPolicy);
    this.getVendorLockoutPolicy = this.securityPolicy.getVendorLockoutPolicy.bind(this.securityPolicy);
    this.saveLockoutPolicy = this.securityPolicy.saveLockoutPolicy.bind(this.securityPolicy);
    this.getCaptchaPolicy = this.securityPolicy.getCaptchaPolicy.bind(this.securityPolicy);
    this.getPasswordHistoryPolicy = this.securityPolicy.getPasswordHistoryPolicy.bind(this.securityPolicy);
    this.getVendorPasswordHistoryPolicy = this.securityPolicy.getVendorPasswordHistoryPolicy.bind(this.securityPolicy);
    this.savePasswordHistoryPolicy = this.securityPolicy.savePasswordHistoryPolicy.bind(this.securityPolicy);
    this.getPasswordConfigPolicy = this.securityPolicy.getPasswordConfigPolicy.bind(this.securityPolicy);
    this.getDomainRestrictions = this.securityPolicy.getDomainRestrictions.bind(this.securityPolicy);
    this.getDomainRestrictionsConfig = this.securityPolicy.getDomainRestrictionsConfig.bind(this.securityPolicy);
    this.createDomainRestriction = this.securityPolicy.createDomainRestriction.bind(this.securityPolicy);
    this.updateDomainRestrictionConfig = this.securityPolicy.updateDomainRestrictionConfig.bind(this.securityPolicy);
    this.deleteDomainRestriction = this.securityPolicy.deleteDomainRestriction.bind(this.securityPolicy);
    this.getIPRestrictions = this.securityPolicy.getIPRestrictions.bind(this.securityPolicy);
    this.getIPRestrictionsConfig = this.securityPolicy.getIPRestrictionsConfig.bind(this.securityPolicy);
    this.createIPRestriction = this.securityPolicy.createIPRestriction.bind(this.securityPolicy);
    this.bulkCreateIPRestriction = this.securityPolicy.bulkCreateIPRestriction.bind(this.securityPolicy);
    this.updateIPRestrictionConfig = this.securityPolicy.updateIPRestrictionConfig.bind(this.securityPolicy);
    this.deleteIPRestriction = this.securityPolicy.deleteIPRestriction.bind(this.securityPolicy);
    this.testCurrentIp = this.securityPolicy.testCurrentIp.bind(this.securityPolicy);
    this.testCurrentIpInAllowList = this.securityPolicy.testCurrentIpInAllowList.bind(this.securityPolicy);
  }
  /**
   * @returns true if entitlements load should be done
   */
  shouldLoadEntitlements() {
    return _ContextHolder.ContextHolder.for(this.appName).shouldLoadEntitlements();
  }

  /**
   * @returns true if me authorization load should be done
   */
  shouldLoadMeAuthorization() {
    const [shouldLoadAuthorization] = _featureFlags.FeatureFlags.getFeatureFlags([_interfaces.LOAD_AUTHORIZATION_FF], this.appName);
    return shouldLoadAuthorization;
  }
}
exports.AuthenticationApi = AuthenticationApi;
var _default = new AuthenticationApi('default');
exports.default = _default;