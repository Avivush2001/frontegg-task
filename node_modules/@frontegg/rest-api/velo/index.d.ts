import { IGetVeloConversationPayload, IGetVeloConversationResourcePayload, ISendVeloConversationApiResponsePayload, ISendVeloConversationMessagePayload, IVeloAgentConfigResponse, IVeloConversationResource, IVeloConversationsResponse, IVeloMessageStream } from './interfaces';
import { BaseApiClient } from '../BaseApiClient';
export declare class VeloApi extends BaseApiClient {
    constructor(appName: string);
    /**
     * Get Velo agents config
     * @returns {Promise<IVeloAgentConfigResponse[]>}
     */
    getAgentsConfig: () => Promise<{
        agents: IVeloAgentConfigResponse[];
    }>;
    /**
     * Get Velo conversations list
     * @returns {Promise<IVeloConversationsResponse[]>}
     */
    getConversations: () => Promise<{
        conversations: IVeloConversationsResponse[];
    }>;
    /**
     * Get Velo conversation by id
     * @returns {Promise<IVeloConversationsResponse>}
     */
    getConversationById: (payload: IGetVeloConversationPayload) => Promise<IVeloConversationsResponse>;
    /**
     * Create a new conversation and send the prompt message
     * @returns {Promise<IVeloMessageStream>}
     */
    createConversation: (payload: Omit<ISendVeloConversationMessagePayload, "conversationId">) => Promise<IVeloMessageStream>;
    /**
     * Send a new conversation message
     * @returns {Promise<IVeloMessageStream>}
     */
    sendMessage: (payload: ISendVeloConversationMessagePayload) => Promise<IVeloMessageStream>;
    /**
     * Send an api response conversation message
     * @returns {Promise<IVeloMessageStream>}
     */
    sendApiResponse: (payload: ISendVeloConversationApiResponsePayload) => Promise<IVeloMessageStream>;
    /**
     * Send an api response conversation message
     * @returns {Promise<IVeloMessageStream>}
     */
    getConversationResource: (payload: IGetVeloConversationResourcePayload) => Promise<IVeloConversationResource>;
}
declare const _default: VeloApi;
export default _default;
