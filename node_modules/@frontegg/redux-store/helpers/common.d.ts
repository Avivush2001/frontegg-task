import { FronteggState, RetryConfig, WithRetryConfig } from '../interfaces';
export declare const delay: (ms?: number) => Promise<unknown>;
export declare const retry: <T>(asyncFunc: () => Promise<T>, retryCount: number, delay: number, shouldRetryWhenNull?: boolean) => Promise<T>;
export declare const retryIfNeeded: <T>(asyncFunc: () => Promise<T>, config?: RetryConfig) => Promise<T>;
export declare const withRetryConfig: <T extends object>(payload?: T) => WithRetryConfig<T>;
export declare const errorTraceId: (e: unknown) => string | undefined;
export declare function omitProps<T>(props: any, keys: string[]): T;
/**
 * Check if the object is a proxy object to avoid cloning it
 */
export declare function isProxy(obj: any): boolean | undefined;
export declare const deepClone: (objectToClone: any) => any;
/**
 * Used to reset the state of the store to the initial state
 * @param store - the store object
 * @param statePath - the path to the state that needs to be reset
 * @param initialState - the initial state object
 */
export declare const deepResetState: (store: FronteggState, statePath: string[], initialState: any) => void;
