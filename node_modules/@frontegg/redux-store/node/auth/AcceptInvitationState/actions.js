"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _interfaces = require("./interfaces");
var _state = require("./state");
var _helpers = require("../../helpers");
var _default = (store, api, sharedActions) => {
  const actions = sharedActions;
  const setAcceptInvitationState = state => {
    Object.assign(store.auth.acceptInvitationState, state);
  };
  const resetAcceptInvitationState = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'acceptInvitationState'], _state.initialState);
  };
  const acceptInvitation = async payload => {
    if (!payload.token || !payload.userId) {
      setAcceptInvitationState({
        error: undefined,
        step: _interfaces.AcceptInvitationStep.invalid
      });
      return;
    }
    try {
      setAcceptInvitationState({
        error: undefined,
        step: _interfaces.AcceptInvitationStep.pending
      });
      await api.auth.acceptInvitation(payload);
      setAcceptInvitationState({
        step: _interfaces.AcceptInvitationStep.success
      });
    } catch (e) {
      setAcceptInvitationState({
        step: _interfaces.AcceptInvitationStep.failed,
        error: (0, _helpers.errorHandler)(e)
      });
    }
  };
  const acceptInvitationWithOTC = async payload => {
    if (!payload.token || !payload.userId || !payload.code) {
      setAcceptInvitationState({
        error: undefined,
        step: _interfaces.AcceptInvitationStep.invalid
      });
      return;
    }
    try {
      setAcceptInvitationState({
        error: undefined,
        step: _interfaces.AcceptInvitationStep.pending
      });
      await api.auth.acceptInvitationWithOTC(payload);
      setAcceptInvitationState({
        step: _interfaces.AcceptInvitationStep.success
      });
    } catch (e) {
      setAcceptInvitationState({
        step: _interfaces.AcceptInvitationStep.validate,
        error: (0, _helpers.errorHandler)(e)
      });
    }
  };
  return {
    setAcceptInvitationState,
    resetAcceptInvitationState,
    acceptInvitation,
    acceptInvitationWithOTC
  };
};
exports.default = _default;