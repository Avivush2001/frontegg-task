"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _auth = require("../../auth");
var _helpers = require("../../helpers");
var _MfaState = require("../../auth/MfaState");
var _dummy = require("../dummy");
var _helpers2 = require("../helpers");
const _excluded = ["callback"],
  _excluded2 = ["callback"];
var _default = (store, api, sharedActions) => {
  const actions = sharedActions;
  const originalActions = (0, _MfaState.buildMfaActions)(store, api, actions);
  const mockedActions = (0, _helpers2.mockActionsExpect)(originalActions, ['setMfaState', 'resetMfaState']);
  mockedActions.enrollMfa = async () => {
    mockedActions.setMfaState({
      saving: true
    });
    const qrCode = 'test';
    mockedActions.setMfaState({
      saving: false,
      error: undefined,
      qrCode
    });
  };
  mockedActions.verifyMfa = async _payload => {
    const {
        callback
      } = _payload,
      payload = (0, _objectWithoutPropertiesLoose2.default)(_payload, _excluded);
    const {
      mfaDevices = {
        webauthn: [],
        phones: [],
        authenticators: [],
        emails: []
      }
    } = store.auth.mfaState;
    mockedActions.setMfaState({
      saving: true
    });
    await (0, _helpers.delay)();
    const data = {
      token: 'token',
      recoveryCode: 'recoveryCode'
    };
    const mfaState = {
      step: _auth.MFAStep.recoveryCode,
      loading: false,
      error: undefined,
      saving: false,
      mfaDevices: (0, _extends2.default)({}, mfaDevices, {
        authenticators: [{
          id: 'authenticator-id'
        }]
      })
    };
    if (data != null && data.recoveryCode) {
      mfaState.recoveryCode = data.recoveryCode;
    }
    mockedActions.setMfaState(mfaState);
    actions.setUser((0, _extends2.default)({}, _dummy.userDemo, {
      mfaEnrolled: true
    }));
    callback == null ? void 0 : callback(mfaState.recoveryCode);
  };
  mockedActions.disableMfa = async payload => {
    var _payload$callback;
    const {
      mfaDevices = {
        webauthn: [],
        phones: [],
        authenticators: [],
        emails: []
      }
    } = store.auth.mfaState;
    mockedActions.setMfaState({
      saving: true
    });
    await (0, _helpers.delay)();
    mockedActions.setMfaState({
      saving: false,
      error: undefined,
      mfaDevices: (0, _extends2.default)({}, mfaDevices, {
        authenticators: []
      })
    });
    actions.setUser((0, _extends2.default)({}, _dummy.userDemo));
    (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, true);
  };
  mockedActions.verifyMfaAfterForce = async _payload => {
    const {
        callback
      } = _payload,
      payload = (0, _objectWithoutPropertiesLoose2.default)(_payload, _excluded2);
    mockedActions.setMfaState({
      loading: true
    });
    await (0, _helpers.delay)();
    const data = (0, _extends2.default)({}, payload, {
      recoveryCode: 'recoveryCode'
    });
    const mfaState = {
      step: _auth.MFAStep.recoveryCode,
      loading: false,
      error: undefined,
      saving: false
    };
    if (data != null && data.recoveryCode) {
      mfaState.recoveryCode = data.recoveryCode;
    }
    mockedActions.setMfaState(mfaState);
    await (0, _helpers.delay)();
    actions.setUser((0, _extends2.default)({}, _dummy.userDemo, {
      mfaEnrolled: true
    }));
    callback == null ? void 0 : callback(mfaState.recoveryCode);
  };
  mockedActions.preDisableMfaSms = async payload => {
    mockedActions.setMfaState({
      saving: true
    });
    try {
      var _payload$callback2;
      mockedActions.setMfaState({
        saving: false,
        error: undefined,
        otcToken: 'otc-token',
        phoneNumber: '+972504589346'
      });
      (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, true);
    } catch (e) {
      var _payload$callback3;
      mockedActions.setMfaState({
        saving: false,
        error: (0, _helpers.errorHandler)(e)
      });
      (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, false, e);
    }
  };
  mockedActions.disableMfaSms = async payload => {
    var _payload$callback4;
    const {
      mfaDevices = {
        webauthn: [],
        phones: [],
        authenticators: [],
        emails: []
      }
    } = store.auth.mfaState;
    mockedActions.setMfaState({
      saving: true
    });
    await (0, _helpers.delay)();
    mockedActions.setMfaState({
      loading: false,
      error: undefined,
      mfaDevices: (0, _extends2.default)({}, mfaDevices, {
        phones: []
      })
    });
    actions.setUser((0, _extends2.default)({}, _dummy.userDemo));
    (_payload$callback4 = payload.callback) == null ? void 0 : _payload$callback4.call(payload, true);
  };
  mockedActions.preEnrollMfaSms = async payload => {
    var _payload$callback5;
    mockedActions.setMfaState({
      saving: true
    });
    await (0, _helpers.delay)();
    mockedActions.setMfaState({
      saving: false,
      error: undefined,
      otcToken: 'otc-token',
      phoneNumber: '+972504589346'
    });
    (_payload$callback5 = payload.callback) == null ? void 0 : _payload$callback5.call(payload, true);
  };
  mockedActions.enrollMfaSms = async _payload => {
    const {
      callback
    } = _payload;
    const {
      mfaDevices = {
        webauthn: [],
        phones: [],
        authenticators: [],
        emails: []
      }
    } = store.auth.mfaState;
    mockedActions.setMfaState({
      saving: true
    });
    await (0, _helpers.delay)();
    const data = {
      token: 'token',
      recoveryCode: 'recoveryCode'
    };
    const mfaState = {
      step: _auth.MFAStep.recoveryCode,
      loading: false,
      error: undefined,
      saving: false,
      mfaDevices: (0, _extends2.default)({}, mfaDevices, {
        phones: [{
          id: 'phone-id',
          phoneNumber: '+972504589346'
        }]
      })
    };
    if (data != null && data.recoveryCode) {
      mfaState.recoveryCode = data.recoveryCode;
    }
    mockedActions.setMfaState(mfaState);
    actions.setUser((0, _extends2.default)({}, _dummy.userDemo, {
      mfaEnrolled: true
    }));
    callback == null ? void 0 : callback(mfaState.recoveryCode);
  };
  return mockedActions;
};
exports.default = _default;