import { FronteggState, RestApi, SharedActions, WithCallback } from '../../../interfaces';
import { FronteggNextJSSession, IEnrollMFAWebAuthnPayload, IPasswordlessPostLoginPayload, IPreEnrollMFAWebAuthNForLoginResponse, IQuickSmsPasswordlessPreLoginPayload, IRecoverMFATokenPayload, IVerifyNewWebAuthnDevicePayload, IWebAuthnPostLoginPayload, LoginState } from '../interfaces';
import { IChangePhoneNumberWithVerification, ICreateNewDeviceSessionResponse, IEnrollMFAAuthenticatorApp, IEnrollMFASMS, IForgotPassword, ILogin, ILoginResponse, ILoginResponseV3, IPasswordlessPreLogin, IPostLogin, IPreEnrollMFA, IPreEnrollMFASMS, IPreLogin, IVerifyChangePhoneNumber, IVerifyInviteToken, IWebAuthnPreLogin, IWebAuthnPreLoginResponse } from '@frontegg/rest-api';
import { AuthState, UserIPData } from '../../interfaces';
import { MFAState } from '../../MfaState/interfaces';
declare const _default: (store: FronteggState, api: RestApi, sharedActions: SharedActions) => {
    preVerifyMFAWebAuthn: ({ callback, deviceId, ...payload }: WithCallback<import("../interfaces").WithDeviceId<import("@frontegg/rest-api").IPreVerifyMFA>, import("../interfaces").IPreVerifyMFAWebAuthNForLoginResponse>, setLoadingAction: import("../interfaces").SetLoadingAction) => Promise<void>;
    verifyMFAWebAuthn: ({ callback, deviceId, ...payload }: import("../interfaces").IVerifyMFAWebAuthnPayload, setLoadingAction: import("../interfaces").SetLoadingAction, isStepUp: boolean) => Promise<void>;
    preVerifyMFAWebAuthnForLogin: (payload: WithCallback<import("../interfaces").WithDeviceId<import("@frontegg/rest-api").IPreVerifyMFA>, import("../interfaces").IPreVerifyMFAWebAuthNForLoginResponse>) => Promise<void>;
    verifyMFAWebAuthnForLogin: (payload: import("../interfaces").IVerifyMFAWebAuthnPayload) => Promise<void>;
    preVerifyMFASMS: ({ callback, deviceId, ...payload }: WithCallback<import("../interfaces").WithDeviceId<import("@frontegg/rest-api").IPreVerifyMFA>>, setLoadingAction: import("../interfaces").SetLoadingAction) => Promise<void>;
    verifyMFASMS: ({ callback, deviceId, ...payload }: WithCallback<import("../interfaces").WithDeviceId<import("@frontegg/rest-api").IVerifyMFASMS>>, setLoadingAction: import("../interfaces").SetLoadingAction, isStepUp?: boolean) => Promise<void>;
    preVerifyMFASMSForLogin: (payload: WithCallback<import("../interfaces").WithDeviceId<import("@frontegg/rest-api").IPreVerifyMFA>>) => Promise<void>;
    verifyMFASMSForLogin: (payload: WithCallback<import("../interfaces").WithDeviceId<import("@frontegg/rest-api").IVerifyMFASMS>>) => Promise<void>;
    preVerifyMFAEmailCode: ({ callback, ...payload }: WithCallback<import("@frontegg/rest-api").IPreVerifyMFA>, setLoadingAction?: import("../interfaces").SetLoadingAction) => Promise<void>;
    verifyMFAEmailCode: ({ callback, ...payload }: WithCallback<import("@frontegg/rest-api").IVerifyMFAEmailCode>, setLoadingAction?: import("../interfaces").SetLoadingAction) => Promise<void>;
    preVerifyMFAEmailCodeForLogin: (payload: WithCallback<import("@frontegg/rest-api").IPreVerifyMFA>) => Promise<void>;
    verifyMFAEmailCodeForLogin: (payload: WithCallback<import("@frontegg/rest-api").IVerifyMFAEmailCode>) => Promise<void>;
    mfaWithAuthenticator: ({ callback, ...loginWithMfaPayload }: WithCallback<import("@frontegg/rest-api").ILoginWithMfa>, setLoadingAction: import("../interfaces").SetLoadingAction, isStepUp: boolean) => Promise<void>;
    loginWithMfa: (payload: WithCallback<import("@frontegg/rest-api").ILoginWithMfa>) => Promise<void>;
    getMfaRequiredState: (user: import("../../interfaces").User | any, retryConfig?: import("../../../interfaces").RetryConfig, shouldContinueWhenFailing?: boolean, emailFromSignup?: string) => Promise<Partial<AuthState> & {
        mfaState: Partial<MFAState>;
        loginState: Partial<LoginState>;
    }>;
    postHandleVerifyMFAResponseForStepUp: () => Promise<void>;
    postHandleVerifyMFAResponseForLogin: (isAuthenticated: boolean, user: ILoginResponse) => Promise<void>;
    handleVerifyMFAResponse: (payload: ILoginResponseV3, isStepUp?: boolean) => Promise<void>;
    getFeatureFlags: (flags: string[]) => Promise<boolean[]>;
    afterAuthNavigationUtil: (resetStateAction: (() => void) | (() => Promise<void>), options?: import("../interfaces").AfterAuthNavigationUtilOptions) => Promise<void>;
    afterAuthNavigation: (payload?: Pick<import("../interfaces").AfterAuthNavigationUtilOptions, "preventRedirectUrlOriginCleaning">) => Promise<void>;
    afterStepUpAuthNavigation: () => Promise<void>;
    afterAuthenticationStateUpdate: ({ user, tenants, activeTenant }: ILoginResponseV3, additionalUpdate?: Partial<AuthState>) => void;
    requestHostedLoginAuthorize: (additionalParams?: Record<string, string>) => Promise<void>;
    requestHostedLoginAuthorizeV2: (payload?: {
        additionalParams?: Record<string, string>;
        shouldRedirectToLogin?: boolean;
        firstTime?: boolean;
        loginDirectAction?: import("../interfaces").LoginDirectAction;
    }) => Promise<void>;
    __requestHostedLoginAuthorize: (additionalParams?: Record<string, string>) => Promise<void>;
    __requestHostedLoginSilentAuthorize: () => Promise<void>;
    handleHostedLoginCallback: (payload: import("../interfaces").HostedLoginCallback) => Promise<void>;
    setLoginState: (state: Partial<LoginState>) => void;
    resetLoginState: () => void;
    requestAuthorize: (firstTime?: boolean) => Promise<void>;
    requestAuthorizeSSR: (payload: FronteggNextJSSession) => Promise<void>;
    preLogin: (payload: WithCallback<IPreLogin & {
        recaptchaToken?: string;
        invitationToken?: string;
    }, void>) => Promise<void>;
    postLogin: (payload: IPostLogin) => Promise<void>;
    login: (payload: WithCallback<ILogin>) => Promise<void>;
    logout: (payload?: () => void) => Promise<void>;
    silentLogout: (payload?: WithCallback<{
        callbackTimeout?: number;
    }>) => Promise<void>;
    recoverMfa: (payload: IRecoverMFATokenPayload) => Promise<void>;
    quickSmsPasswordlessPreLogin: (_payload: WithCallback<IQuickSmsPasswordlessPreLoginPayload>) => Promise<void>;
    changePhoneNumberWithVerification: (_payload: WithCallback<IChangePhoneNumberWithVerification>) => Promise<void>;
    verifyChangePhoneNumber: (_payload: WithCallback<IVerifyChangePhoneNumber>) => Promise<void>;
    passwordlessPreLogin: (_payload: WithCallback<IPasswordlessPreLogin, void>) => Promise<void>;
    passwordlessPostLogin: (_payload: WithCallback<IPasswordlessPostLoginPayload>) => Promise<void>;
    verifyInviteToken: (payload: IVerifyInviteToken) => Promise<void>;
    webAuthnPrelogin: (payload: WithCallback<IWebAuthnPreLogin, IWebAuthnPreLoginResponse | null>) => Promise<void>;
    webAuthnPostLogin: (payload: IWebAuthnPostLoginPayload) => Promise<void>;
    webAuthnCreateNewDeviceSession: (payload: WithCallback<{}, ICreateNewDeviceSessionResponse | null>) => Promise<void>;
    webAuthnVerifyNewDeviceSession: (payload: IVerifyNewWebAuthnDevicePayload) => Promise<void>;
    getUserIP: (payload: WithCallback<{}, UserIPData | boolean>) => Promise<void>;
    preEnrollMFAWebAuthnForLogin: (_payload: WithCallback<IPreEnrollMFA, IPreEnrollMFAWebAuthNForLoginResponse>) => Promise<void>;
    enrollMFAWebAuthnForLogin: (_payload: IEnrollMFAWebAuthnPayload) => Promise<void>;
    enrollMFAAuthenticatorAppForLogin: (_payload: WithCallback<IEnrollMFAAuthenticatorApp>) => Promise<void>;
    preEnrollMFASMSForLogin: (_payload: WithCallback<IPreEnrollMFASMS>) => Promise<void>;
    enrollMFASMSForLogin: (_payload: WithCallback<IEnrollMFASMS>) => Promise<void>;
    handleEnrollMFAResponse: (payload: ILoginResponseV3) => Promise<void>;
    resetBreachedPassword: (payload: IForgotPassword) => Promise<void>;
    refreshTokenForSocialLogins: () => Promise<void>;
    __refreshToken: () => Promise<void>;
};
export default _default;
