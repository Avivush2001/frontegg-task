"use strict";

var _ = require("../");
/* eslint-disable react-hooks/rules-of-hooks */
// noinspection JSUnusedLocalSymbols

/**
 * useAuth hook typescript tests
 */
{
  const {
    isAuthenticated,
    isLoading
  } = (0, _.useAuth)();
  const isLoadingDirect = (0, _.useAuth)(state => state.isLoading);
  isLoadingDirect.valueOf();
  const {
    user
  } = (0, _.useAuth)(state => ({
    user: state.user
  }));
  const {
    loginUrl
  } = (0, _.useAuth)(state => state.routes);
  const {
    loadProfile,
    setLoginState
  } = (0, _.useAuthActions)();
}

/**
 * useAcceptInvitationState hook typescript tests
 */
{
  const {
    step
  } = (0, _.useAcceptInvitationState)();
  const errorDirect = (0, _.useAcceptInvitationState)(state => state.error);
  errorDirect == null ? void 0 : errorDirect.substring(0);
  const {
    acceptInvitation
  } = (0, _.useAcceptInvitationActions)();
}

/**
 * useActivateAccountState hook typescript tests
 */
{
  const {
    step
  } = (0, _.useActivateAccountState)();
  const loadingDirect = (0, _.useActivateAccountState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    activateAccount
  } = (0, _.useActivateAccountActions)();
}

/**
 * useApiTokensState hook typescript tests
 */
{
  const {
    roles
  } = (0, _.useApiTokensState)();
  const {
    loaders: loadingDirect
  } = (0, _.useApiTokensState)();
  const m = loadingDirect.LOAD_API_TOKENS;
  const {
    loadUserApiTokens
  } = (0, _.useApiTokensActions)();
}

/**
 * useForgotPasswordState hook typescript tests
 */
{
  const {
    step
  } = (0, _.useForgotPasswordState)();
  const {
    email: emailDirect
  } = (0, _.useForgotPasswordState)();
  emailDirect.substring(0);
  const {
    forgotPassword
  } = (0, _.useForgotPasswordActions)();
}

/**
 * useMfaState hook typescript tests
 */
{
  const {
    step
  } = (0, _.useMfaState)();
  const loadingDirect = (0, _.useMfaState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    enrollMfa
  } = (0, _.useMfaActions)();
}

/**
 * useLoginState hook typescript tests
 */
{
  const {
    step
  } = (0, _.useLoginState)();
  const {
    loading: loadingDirect
  } = (0, _.useLoginState)();
  loadingDirect.valueOf();
  const {
    logout
  } = (0, _.useLoginActions)();
}

/**
 * useLoginState hook typescript tests
 */
{
  const {
    profile
  } = (0, _.useProfileState)();
  const {
    loading: loadingDirect
  } = (0, _.useProfileState)();
  loadingDirect.valueOf();
  const {
    loadProfile
  } = (0, _.useProfileActions)();
}

/**
 * useResetPhoneNumberState hook typescript tests
 */
{
  const {
    step
  } = (0, _.useResetPhoneNumberState)();
  const {
    loading: loadingDirect
  } = (0, _.useResetPhoneNumberState)();
  loadingDirect.valueOf();
  const {
    resetPhoneNumber
  } = (0, _.useResetPhoneNumberActions)();
}

/**
 * useRolesState hook typescript tests
 */
{
  var _loadingDirect$loadRo;
  const {
    saving
  } = (0, _.useRolesState)();
  const {
    loaders: loadingDirect
  } = (0, _.useRolesState)();
  loadingDirect == null ? void 0 : (_loadingDirect$loadRo = loadingDirect.loadRoles) == null ? void 0 : _loadingDirect$loadRo.valueOf();
  const {
    loadRolesAndPermissions
  } = (0, _.useRolesActions)();
}

/**
 * useSecurityPolicyState hook typescript tests
 */
{
  const {
    lockoutPolicy
  } = (0, _.useSecurityPolicyState)();
  const captchaPolicy = (0, _.useSecurityPolicyState)(state => state.captchaPolicy);
  captchaPolicy.loading.valueOf();
  const {
    loadPublicSecurityPolicy
  } = (0, _.useSecurityPolicyActions)();
}

/**
 * useSessionsState hook typescript tests
 */
{
  const {
    sessions
  } = (0, _.useSessionsState)();
  const {
    loading: loadingDirect
  } = (0, _.useSessionsState)();
  loadingDirect.valueOf();
  const {
    deleteUserSession
  } = (0, _.useSessionsActions)();
}

/**
 * useSessionsPolicyState hook typescript tests
 */
{
  const {
    configurations
  } = (0, _.useSessionsPolicyState)();
  const {
    loading: loadingDirect
  } = (0, _.useSessionsPolicyState)();
  loadingDirect.valueOf();
  const {
    resetSessionsPolicyState
  } = (0, _.useSessionsPolicyActions)();
}

/**
 * useSSOState hook typescript tests
 */
{
  const {
    authorizationRoles
  } = (0, _.useSSOState)();
  const {
    loading: loadingDirect
  } = (0, _.useSSOState)();
  loadingDirect.valueOf();
  const {
    loadSSOConfigurationsV2
  } = (0, _.useSSOActions)();
}

/**
 * useSignUpState hook typescript tests
 */
{
  const {
    stage
  } = (0, _.useSignUpState)();
  const loadingDirect = (0, _.useSignUpState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    setSignUpState
  } = (0, _.useSignUpActions)();
}

/**
 * useSocialLoginState hook typescript tests
 */
{
  const {
    socialLoginsConfig
  } = (0, _.useSocialLoginState)();
  const loadingDirect = (0, _.useSocialLoginState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    loadSocialLoginsConfiguration
  } = (0, _.useSocialLoginActions)();
}

/**
 * useSocialLoginState hook typescript tests
 */
{
  const {
    tenants
  } = (0, _.useTenantsState)();
  const {
    loading: loadingDirect
  } = (0, _.useTenantsState)();
  loadingDirect.valueOf();
  const {
    loadTenants
  } = (0, _.useTenantsActions)();
}

/**
 * useVendorState hook typescript tests
 */
{
  const {
    loading
  } = (0, _.useVendorState)();
  const {
    loading: isLoadingDirect
  } = (0, _.useVendorState)();
  isLoadingDirect.valueOf();
  const {
    whiteLabelMode
  } = (0, _.useVendorState)(state => ({
    whiteLabelMode: state.whiteLabelMode
  }));
  const {
    loadVendorPublicInfo
  } = (0, _.useVendorActions)();
}

/**
 * useConnectivityState hook typescript tests
 */
{
  const {
    isLoading,
    error
  } = (0, _.useConnectivityState)();
  const {
    processIds
  } = (0, _.useConnectivityState)();
  processIds.map(id => id);
  const {
    email = []
  } = (0, _.useConnectivityState)();
  email.length;
  const {
    loadScope,
    loadDataAction
  } = (0, _.useConnectivityActions)();
}

/**
 * useAuditsState hook typescript tests
 */
{
  const {
    auditLogsState
  } = (0, _.useAuditsState)();
  const {
    columns
  } = (0, _.useAuditsState)(state => state.auditsMetadataState);
  const {
    loading
  } = (0, _.useAuditsState)(state => ({
    loading: state.auditLogsState.loading
  }));
  loading.valueOf();
  const x = columns == null ? void 0 : columns.length;
  const {
    loadAuditLogs
  } = (0, _.useAuditsActions)();
}