"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _interfaces = require("./interfaces");
var _helpers = require("../../helpers");
var _state = require("./state");
const _excluded = ["callback", "events"];
var _default = (store, api, sharedActions) => {
  const actions = sharedActions;
  const setImpersonateState = state => {
    Object.assign(store.auth.impersonateState, state);
  };
  const resetImpersonateState = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'impersonateState'], _state.initialState);
  };
  const impersonate = async _payload => {
    const {
        callback
      } = _payload,
      payload = (0, _objectWithoutPropertiesLoose2.default)(_payload, _excluded);
    setImpersonateState({
      loading: true
    });
    try {
      // TODO: check why this this response not used for setting user accessToken
      //       https://github.com/frontegg/admin-box/blob/8ac579241250ac2ab627aacfcc6118b548a4c7e5/packages/redux-store/src/auth/ImpersonationState/saga.ts#L13
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const data = await api.impersonate.impersonate(payload);
      setImpersonateState({
        step: _interfaces.ImpersonateStep.success
      });
      await (0, _helpers.delay)(1000);
      /**
       * We want to avoid cleaning the origin of the redirect URL
       * because we want to refresh the page and redirect to the same origin on embedded mode
       */
      await actions.afterAuthNavigation({
        preventRedirectUrlOriginCleaning: true
      });
      resetImpersonateState();
      callback == null ? void 0 : callback(true);
    } catch (e) {
      setImpersonateState({
        loading: false,
        error: (0, _helpers.errorHandler)(e)
      });
    }
  };
  return {
    setImpersonateState,
    resetImpersonateState,
    impersonate
  };
};
exports.default = _default;