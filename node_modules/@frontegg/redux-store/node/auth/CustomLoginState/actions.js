"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _state = require("./state");
var _helpers = require("../../helpers");
var _helpers2 = require("../helpers");
var _restApi = require("@frontegg/rest-api");
var _helpers3 = require("../LoginState/helpers");
const _excluded = ["callback"];
var _default = (store, api, sharedActions) => {
  const actions = sharedActions;
  const setCustomLoginState = payload => {
    Object.assign(store.auth.customLoginState, payload);
  };
  const resetCustomLoginState = () => {
    (0, _helpers.deepResetState)(store, ['auth', 'customLoginState'], _state.initialState);
  };
  const loadTenantMetadata = async () => {
    setCustomLoginState({
      loading: true
    });
    try {
      const tenantMetadata = await api.metadata.getAdminBoxMetadata();
      setCustomLoginState({
        tenantMetadata,
        loading: false
      });
    } catch (e) {
      setCustomLoginState({
        loading: false,
        error: (0, _helpers.errorHandler)(e)
      });
    }
  };
  const updateTenantMetadata = async payload => {
    const {
        callback
      } = payload,
      state = (0, _objectWithoutPropertiesLoose2.default)(payload, _excluded);
    try {
      setCustomLoginState({
        error: null,
        saving: true
      });
      const requestActions = (0, _helpers2.mapMetaDataObjectToActions)(state);
      if (requestActions.length === 0) {
        throw new Error('No changes to update');
      }
      await api.metadata.updateAdminBoxMetadata({
        actions: requestActions
      });
      const tenantMetadata = await api.metadata.getAdminBoxMetadata();
      setCustomLoginState({
        tenantMetadata,
        saving: false
      });
      callback == null ? void 0 : callback(true);
    } catch (e) {
      setCustomLoginState({
        error: (0, _helpers.errorHandler)(e, 'No changes to update'),
        saving: false
      });
      callback == null ? void 0 : callback(null, e);
    }
  };
  const customLoginEnabled = async () => {
    var _await$ContextHolder$, _ContextHolder$for$ge, _ContextHolder$for$ge2;
    const isAuthenticated = store.auth.isAuthenticated;
    if (isAuthenticated) {
      var _store$auth$tenantsSt, _store$auth$tenantsSt2;
      return (_store$auth$tenantsSt = (_store$auth$tenantsSt2 = store.auth.tenantsState.activeTenant) == null ? void 0 : _store$auth$tenantsSt2.hasCustomLogin) != null ? _store$auth$tenantsSt : false;
    }
    const resolvedTenant = (_await$ContextHolder$ = await ((_ContextHolder$for$ge = _restApi.ContextHolder.for(store.root.appName).getContext()) == null ? void 0 : (_ContextHolder$for$ge2 = _ContextHolder$for$ge.tenantResolver) == null ? void 0 : _ContextHolder$for$ge2.call(_ContextHolder$for$ge))) == null ? void 0 : _await$ContextHolder$.tenant;
    return !!resolvedTenant;
  };
  const loadCustomLoginRoutes = async payload => {
    try {
      var _getSearchParamsFromU, _payload$callback3;
      const isCustomLoginEnabled = await customLoginEnabled();
      if (!isCustomLoginEnabled) {
        var _payload$callback;
        payload == null ? void 0 : (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, true);
        return;
      }
      const isAuthenticated = store.auth.isAuthenticated;
      const {
        getSettings,
        getPublicSettings
      } = api.accountSettings;
      const {
        applicationUrl
      } = await (0, _helpers.retryIfNeeded)(isAuthenticated ? getSettings : getPublicSettings, payload == null ? void 0 : payload.retryConfig);
      if (!applicationUrl) {
        var _payload$callback2;
        payload == null ? void 0 : (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, true);
        return;
      }
      const routes = store.auth.routes;
      const searchParams = (_getSearchParamsFromU = (0, _helpers3.getSearchParamsFromUrl)(applicationUrl)) != null ? _getSearchParamsFromU : '';
      actions.setAuthState({
        routes: (0, _extends2.default)({}, routes, {
          customLoginAuthenticatedUrl: applicationUrl,
          customLoginUrl: routes.loginUrl + searchParams
        })
      });
      setCustomLoginState({
        customLoginSearchParams: searchParams != null ? searchParams : undefined
      });
      payload == null ? void 0 : (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, true);
    } catch (e) {
      var _payload$callback4;
      payload == null ? void 0 : (_payload$callback4 = payload.callback) == null ? void 0 : _payload$callback4.call(payload, null, e);
    }
  };
  return {
    setCustomLoginState,
    resetCustomLoginState,
    loadTenantMetadata,
    updateTenantMetadata,
    customLoginEnabled,
    loadCustomLoginRoutes
  };
};
exports.default = _default;