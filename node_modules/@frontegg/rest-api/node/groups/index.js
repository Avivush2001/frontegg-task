"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.GroupsApi = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _constants = require("../constants");
var _BaseApiClient = require("../BaseApiClient");
const _excluded = ["groupId"];
class GroupsApi extends _BaseApiClient.BaseApiClient {
  constructor(appName) {
    super(appName);
    this.getGroupById = async ({
      groupId
    }, query) => {
      return this.get(`${_constants.urls.identity.groups.v1}/${groupId}`, (0, _extends2.default)({}, query));
    };
    this.getGroups = async query => {
      return this.get(`${_constants.urls.identity.groups.v1}`, (0, _extends2.default)({}, query));
    };
    this.getGroupsByIds = async (body, params) => {
      return this.post(`${_constants.urls.identity.groups.getByIds.v1}`, body, {
        params
      });
    };
    this.createGroup = async body => {
      return this.post(`${_constants.urls.identity.groups.v1}`, body);
    };
    this.updateGroup = async _ref => {
      let {
          groupId
        } = _ref,
        body = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
      return this.patch(`${_constants.urls.identity.groups.v1}/${groupId}`, body);
    };
    this.deleteGroup = async groupId => {
      return this.delete(`${_constants.urls.identity.groups.v1}/${groupId}`);
    };
    this.addRolesToGroup = async (groupId, body) => {
      return this.post(`${_constants.urls.identity.groups.v1}/${groupId}/roles`, body);
    };
    this.deleteRolesFromGroup = async (groupId, body) => {
      return this.delete(`${_constants.urls.identity.groups.v1}/${groupId}/roles`, body);
    };
    this.addUsersToGroup = async (groupId, body) => {
      return this.post(`${_constants.urls.identity.groups.v1}/${groupId}/users`, body);
    };
    this.deleteUsersFromGroup = async (groupId, body) => {
      return this.delete(`${_constants.urls.identity.groups.v1}/${groupId}/users`, body);
    };
    this.getGroupConfiguration = async () => {
      return this.get(`${_constants.urls.identity.groups.configurations.v1}`);
    };
    this.updateGroupConfiguration = async body => {
      return this.post(`${_constants.urls.identity.groups.configurations.v1}`, body);
    };
  }

  /**
   * Get group by given id
   * @param groupId - The ID of the group to retrieve
   * @param query - Optional query parameters
   */
}
exports.GroupsApi = GroupsApi;
var _default = new GroupsApi('default');
exports.default = _default;