"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAuth = useAuth;
exports.useAuthRoutes = exports.useAuthActions = void 0;
exports.useAuthState = useAuthState;
exports.useStoreActions = exports.useOnRedirectTo = exports.useLoginWithRedirectV2 = exports.useLoginWithRedirect = exports.useIsAuthenticated = exports.useAuthUserOrNull = exports.useAuthUser = void 0;
var _react = require("react");
var _restApi = require("@frontegg/rest-api");
var _FronteggStoreContext = require("../FronteggStoreContext");
var _useSnapshot = require("../useSnapshot");
var _common = require("../common");
const defaultMapper = {
  state: state => state,
  actions: actions => actions
};

/**
 * Use this `frontegg` hook function to obtain the complete authentication state, if it exists.
 *
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const { isAuthenticated, user } = useAuth();
 *
 *   return isAuthenticated ? <div>Hello, User {user.name}</div> : null;
 * }
 * ```
 *
 * You can also utilize other `frontegg` hooks like `useAuthUser` to specifically retrieve the user and redirect to the login page if necessary, `useAuthUserOrNull` to get the user if available, and `useIsAuthenticated` for checking authentication status.
 */

function useAuth(stateMapper = defaultMapper.state) {
  const state = (0, _FronteggStoreContext.useStore)().store.auth;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return stateMapper((0, _useSnapshot.useSnapshot)(state));
}
function useAuthState() {
  const state = (0, _FronteggStoreContext.useStore)().store.auth;
  return (0, _useSnapshot.useSnapshot)(state);
}

/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const { isAuthenticated, user } = useAuth();
 *   const loginWithRedirect = useLoginWithRedirect();
 *
 *   if (!isAuthenticated) {
 *     loginWithRedirect();
 *     return <></>;
 *   }
 *
 *   return (<div>Hello User {user.name}</div>);
 * }
 * ```
 *
 /**
 * Use this frontegg hook function to redirect the user to the login page when in hosted login mode.
 * If the user is already authenticated, this method will direct the user to the store, and you can retrieve user information using the `useAuthUserOrNull` method.
 *
 * To ensure the user is available on the first page load when authenticated, configure this option in your `FronteggProvider`:
 * `authOptions`:
 *   `hostedLoginOptions`:
 *     `loadUserOnFirstLoad: true`
 *
 * When using this option, you can have the user on the first load, and you can control when the user is redirected to the login page by using `loginWithRedirect`.
 */
const useLoginWithRedirect = () => {
  const {
    actions
  } = (0, _react.useContext)(_FronteggStoreContext.FronteggStoreContext);
  return actions.requestHostedLoginAuthorize;
};
exports.useLoginWithRedirect = useLoginWithRedirect;
const useLoginWithRedirectV2 = () => {
  const {
    actions
  } = (0, _react.useContext)(_FronteggStoreContext.FronteggStoreContext);
  return actions.requestHostedLoginAuthorizeV2;
};
exports.useLoginWithRedirectV2 = useLoginWithRedirectV2;
const useAuthActions = () => {
  return (0, _FronteggStoreContext.useStore)().actions;
};
exports.useAuthActions = useAuthActions;
const useOnRedirectTo = () => {
  const {
    onRedirectTo
  } = useAuth();
  const {
    appName
  } = (0, _common.useRootState)();
  return onRedirectTo || _restApi.ContextHolder.for(appName).onRedirectTo;
};
exports.useOnRedirectTo = useOnRedirectTo;
const useAuthRoutes = () => useAuthState().routes;

/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const isAuthenticated  = useIsAuthenticated();
 *   return isAuthenticated ? <div>Hello User</div> : <Redirect to={'/login'}/>
 * }
 * ```
 *
 * use this frontegg hook function to get if user is "Authenticated"
 */
exports.useAuthRoutes = useAuthRoutes;
const useIsAuthenticated = () => {
  const {
    isAuthenticated
  } = (0, _useSnapshot.useSnapshot)((0, _FronteggStoreContext.useStore)().store.auth);
  return isAuthenticated;
};

/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const user = useAuthUser();
 *   return user ? <div>Hello {user.name}!</div> : <div>Hello Guest!</div>
 * }
 * ```
 *
 * Use this `frontegg` hook function to obtain the authenticated user.
 * If the user is not authenticated, this method will immediately redirect the user to the login page.
 * To prevent this immediate redirection behavior, use the `useAuthUserOrNull` method.
 */
exports.useIsAuthenticated = useIsAuthenticated;
const useAuthUser = () => {
  const authRoutes = useAuthRoutes();
  const onRedirectTo = useOnRedirectTo();
  const loginWithRedirect = useLoginWithRedirectV2();
  const {
    user,
    hostedLoginBox
  } = useAuth();
  const noUser = {};
  const isSSR = typeof window === 'undefined';
  (0, _react.useEffect)(() => {
    if (user == null && !isSSR) {
      if (hostedLoginBox) {
        loginWithRedirect({
          shouldRedirectToLogin: true
        });
      } else {
        const {
          loginUrl,
          customLoginUrl
        } = authRoutes;
        onRedirectTo(customLoginUrl != null ? customLoginUrl : loginUrl, {
          refresh: true
        });
      }
    }
  }, [hostedLoginBox, user, authRoutes, onRedirectTo, loginWithRedirect]);
  if (user == null && !isSSR) {
    return noUser;
  }
  return user || noUser;
};

/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const user = useAuthUserOrNull();
 *   return user ? <div>Hello {user.name}!</div> : <div>Hello Guest!</div>
 * }
 * ```
 *
 * Use this `frontegg` hook function to retrieve the authenticated user. If the user is not authenticated, this hook will return null. To redirect the user to the login page in case they are not authenticated, use the `useAuthUser` method.
 */
exports.useAuthUser = useAuthUser;
const useAuthUserOrNull = () => {
  const {
    user
  } = useAuth();
  return user || null;
};
exports.useAuthUserOrNull = useAuthUserOrNull;
const useStoreActions = () => {
  const store = (0, _FronteggStoreContext.useStore)();
  return store.actions;
};
exports.useStoreActions = useStoreActions;