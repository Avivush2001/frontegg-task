import { GetHierarchyMetadataParams, GetHierarchyMetadataResponse, IGetTenantsUserCountRequest, IGetTenantsUserCountResponse, IParentTenant, ISubTenant, ISubTenantTree, ISwitchTenant, ITenantsResponse, SearchSubTenantsParams, SearchSubTenantsResponse } from './interfaces';
import { FronteggPaginationWrapper, UserJwtOptions } from '../interfaces';
import { BaseApiClient } from '../BaseApiClient';
export declare class TenantsApi extends BaseApiClient {
    constructor(appName: string);
    /**
     * Switch logged in user to specific tenant by providing tenantId.
     * @throws exception if invalid tenantId.
     */
    switchTenant: (body: ISwitchTenant) => Promise<void>;
    /** Retrieve logged in user's available tenants. */
    getTenants: () => Promise<ITenantsResponse[]>;
    /** Retrieve logged in user's available sub tenants. */
    getSubTenants: (options?: UserJwtOptions) => Promise<ISubTenant>;
    /** Retrieve logged in user's available sub tenants as a tree. */
    getSubTenantsAsTree: (options?: UserJwtOptions) => Promise<ISubTenantTree>;
    /** Retrieve logged in user's available parent tenants. */
    getParentTenants: (options?: UserJwtOptions) => Promise<IParentTenant[]>;
    getParentTenantsById: (tenantId: string, options?: UserJwtOptions) => Promise<IParentTenant[]>;
    getTenantsUsersCount: (body: IGetTenantsUserCountRequest, options?: UserJwtOptions) => Promise<IGetTenantsUserCountResponse[]>;
    searchSubTenants: (params: SearchSubTenantsParams, options?: UserJwtOptions) => Promise<FronteggPaginationWrapper<SearchSubTenantsResponse>>;
    getHierarchyMetadata: (params: GetHierarchyMetadataParams, options?: UserJwtOptions) => Promise<GetHierarchyMetadataResponse[]>;
}
declare const _default: TenantsApi;
export default _default;
